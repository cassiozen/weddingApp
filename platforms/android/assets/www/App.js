/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(10);
	var React = __webpack_require__(9);
	var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
	var classnames = __webpack_require__(7);
	var Touchstone = __webpack_require__(8);
	var TouchEmulator = __webpack_require__(1);
	var injectTapEventPlugin = __webpack_require__(12);
	var Parse = __webpack_require__(13).Parse;

	var mui = __webpack_require__(14),
	  LeftNav = mui.LeftNav,
	  MenuItem = mui.MenuItem;

	var views = {
	  // app
	  'home': __webpack_require__(2),
	  'rsvp': __webpack_require__(3),
	  'gifts': __webpack_require__(4),
	  'sponsors': __webpack_require__(5),
	  'locationcostume': __webpack_require__(6),
	};

	var menuItems = [
	  { route: 'home', text: 'Convite', number: '❯'},
	  { route: 'locationcostume', text: 'Local da Festa e Traje', number: '❯'},
	  { route: 'rsvp', text: 'RSVP', number: '❯' },
	  { route: 'gifts', text: 'Lista de Presentes', number: '❯' },
	  { route: 'sponsors', text: 'Padrinhos', number: '❯' },
	];

	var App = React.createClass({displayName: "App",
	  mixins: [Touchstone.createApp(views)],

	  getInitialState:function() {
	    var initialState = {
	      currentView: 'home',
	      online: true,
	      currentViewIndex: 0,
	      isNativeApp: (typeof cordova !== 'undefined' && device.platform === "iOS")
	    };

	    return initialState;
	  },

	  getViewProps:function() {
	    return {
	      online: this.state.online,
	      toggleLeftBar: this.toggleLeftBar
	    };
	  },

	  componentWillMount:function() {
	    console.log("Opa");
	    Parse.initialize("nAaQd2GKodtQQzUWwSyVkxzORuLC6SJ7GkMwy1fx", "0OVs3ueEyYMR0HUabA9wIH6AiBBy1wQ3rwPWnXTh");
	  },

	  toggleLeftBar:function() {
	    this.refs.leftNav.toggle();
	  },

	  onLeftNavChange:function(e, key, payload) {
	    this.state.currentViewIndex = key;
	    viewState = {}
	    viewState[payload.route  + '_class'] = "view " + payload.route;
	    this.showView(payload.route, "fade", null, viewState);
	  },
	  
	  gotoDefaultView:function() {
	    this.showView('home', 'fade');
	  },

	  render:function() {
	    var appWrapperClassName = classnames({
	      'app-wrapper': true,
	      'is-native-app': this.state.isNativeApp
	    });

	    var menuHeaderStyle={
	      width: '100%',
	      backgroundColor: '#d8383b'
	    };

	    var menuImageStyle={
	      display: 'block',
	      width: '99px',
	      margin:'auto',
	    };

	    var header = React.createElement("div", {style: menuHeaderStyle}, React.createElement("img", {style: menuImageStyle, src: "img/menu_header.png", width: "99"}));

	    return (
	      React.createElement("div", {className: appWrapperClassName}, 
	        React.createElement(ReactCSSTransitionGroup, {transitionName: this.state.viewTransition.name, transitionEnter: this.state.viewTransition.in, transitionLeave: this.state.viewTransition.out, className: "view-wrapper", component: "div"}, 
	          this.getCurrentView()
	        ), 
	        React.createElement(LeftNav, {
	          ref: "leftNav", 
	          docked: false, 
	          isInitiallyOpen: false, 
	          header: header, 
	          menuItems: menuItems, 
	          selectedIndex: this.state.currentViewIndex, 
	          onChange: this.onLeftNavChange})
	      )
	    );
	  }
	});






	///


	///


	var app = {
	   // Application Constructor
	   initialize: function() {
	      if (typeof cordova === 'undefined') {
	        TouchEmulator();
	        injectTapEventPlugin();
	        React.render(React.createElement(App, null), document.body);
	      } else {
	        this.bindEvents();
	      }
	       
	   },
	   // Bind Event Listeners
	   //
	   // Bind any events that are required on startup. Common events are:
	   // 'load', 'deviceready', 'offline', and 'online'.
	   bindEvents: function() {
	       document.addEventListener('deviceready', this.onDeviceReady, false);
	   },
	   // deviceready Event Handler
	   //
	   // The scope of 'this' is the event. In order to call the 'receivedEvent'
	   // function, we must explicity call 'app.receivedEvent(...);'
	   onDeviceReady: function() {
	       app.receivedEvent('deviceready');
	   },
	   // Update DOM on a Received Event
	   receivedEvent: function(id) {
	       console.log('Received Event: ' + id);
	       if(device.platform === "iOS"){
	        StatusBar.styleDefault();
	       }
	       // Start the App
	       injectTapEventPlugin();
	       React.render(React.createElement(App, null), document.body);
	       // start to initialize PayPalMobile library
	       app.initPaymentUI();
	   },
	   initPaymentUI : function () {
	     var clientIDs = {
	       "PayPalEnvironmentProduction": "YOUR_PRODUCTION_CLIENT_ID",
	       "PayPalEnvironmentSandbox": "AVfZdY6EhPVysfE3pg5svkANHdhI_NJ5n7wRv8eF8GrIn9B51A7-amZP5liGqKRKCVObw78H3NyeKnTB"
	     };
	     PayPalMobile.init(clientIDs, app.onPayPalMobileInit);

	   },
	   configuration : function () {
	     // for more options see `paypal-mobile-js-helper.js`
	     var config = new PayPalConfiguration({merchantName: "Casamento Caco & Mel", merchantPrivacyPolicyURL: "https://mytestshop.com/policy", merchantUserAgreementURL: "https://mytestshop.com/agreement", languageOrLocale: "pt_BR"});
	     return config;   
	   },

	   onPayPalMobileInit : function() {
	     // must be called
	     // use PayPalEnvironmentNoNetwork mode to get look and feel of the flow
	     PayPalMobile.prepareToRender("PayPalEnvironmentSandbox", app.configuration(), function(){console.log("Paypal Initiated")});
	   }
	};

	app.initialize();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// https://github.com/hammerjs/touchemulator

	(function(window, document, exportName, undefined) {
	    "use strict";

	    var isMultiTouch = false;
	    var multiTouchStartPos;
	    var eventTarget;
	    var touchElements = {};

	    // polyfills
	    if(!document.createTouch) {
	        document.createTouch = function(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY) {
	            // auto set
	            if(clientX == undefined || clientY == undefined) {
	                clientX = pageX - window.pageXOffset;
	                clientY = pageY - window.pageYOffset;
	            }

	            return new Touch(target, identifier, {
	                pageX: pageX,
	                pageY: pageY,
	                screenX: screenX,
	                screenY: screenY,
	                clientX: clientX,
	                clientY: clientY
	            });
	        };
	    }

	    if(!document.createTouchList) {
	        document.createTouchList = function() {
	            var touchList = new TouchList();
	            for (var i = 0; i < arguments.length; i++) {
	                touchList[i] = arguments[i];
	            }
	            touchList.length = arguments.length;
	            return touchList;
	        };
	    }

	    /**
	     * create an touch point
	     * @constructor
	     * @param target
	     * @param identifier
	     * @param pos
	     * @param deltaX
	     * @param deltaY
	     * @returns {Object} touchPoint
	     */
	    function Touch(target, identifier, pos, deltaX, deltaY) {
	        deltaX = deltaX || 0;
	        deltaY = deltaY || 0;

	        this.identifier = identifier;
	        this.target = target;
	        this.clientX = pos.clientX + deltaX;
	        this.clientY = pos.clientY + deltaY;
	        this.screenX = pos.screenX + deltaX;
	        this.screenY = pos.screenY + deltaY;
	        this.pageX = pos.pageX + deltaX;
	        this.pageY = pos.pageY + deltaY;
	    }

	    /**
	     * create empty touchlist with the methods
	     * @constructor
	     * @returns touchList
	     */
	    function TouchList() {
	        var touchList = [];

	        touchList.item = function(index) {
	            return this[index] || null;
	        };

	        // specified by Mozilla
	        touchList.identifiedTouch = function(id) {
	            return this[id + 1] || null;
	        };

	        return touchList;
	    }


	    /**
	     * Simple trick to fake touch event support
	     * this is enough for most libraries like Modernizr and Hammer
	     */
	    function fakeTouchSupport() {
	        var objs = [window, document.documentElement];
	        var props = ['ontouchstart', 'ontouchmove', 'ontouchcancel', 'ontouchend'];

	        for(var o=0; o<objs.length; o++) {
	            for(var p=0; p<props.length; p++) {
	                if(objs[o] && objs[o][props[p]] == undefined) {
	                    objs[o][props[p]] = null;
	                }
	            }
	        }
	    }

	    /**
	     * we don't have to emulate on a touch device
	     * @returns {boolean}
	     */
	    function hasTouchSupport() {
	        return ("ontouchstart" in window) || // touch events
	               (window.Modernizr && window.Modernizr.touch) || // modernizr
	               (navigator.msMaxTouchPoints || navigator.maxTouchPoints) > 2; // pointer events
	    }

	    /**
	     * disable mouseevents on the page
	     * @param ev
	     */
	    function preventMouseEvents(ev) {
	        ev.preventDefault();
	        ev.stopPropagation();
	    }

	    /**
	     * only trigger touches when the left mousebutton has been pressed
	     * @param touchType
	     * @returns {Function}
	     */
	    function onMouse(touchType) {
	        return function(ev) {
	            // prevent mouse events
	            preventMouseEvents(ev);

	            if (ev.which !== 1) {
	                return;
	            }

	            // The EventTarget on which the touch point started when it was first placed on the surface,
	            // even if the touch point has since moved outside the interactive area of that element.
	            // also, when the target doesnt exist anymore, we update it
	            if (ev.type == 'mousedown' || !eventTarget || (eventTarget && !eventTarget.dispatchEvent)) {
	                eventTarget = ev.target;
	            }

	            // shiftKey has been lost, so trigger a touchend
	            if (isMultiTouch && !ev.shiftKey) {
	                triggerTouch('touchend', ev);
	                isMultiTouch = false;
	            }

	            triggerTouch(touchType, ev);

	            // we're entering the multi-touch mode!
	            if (!isMultiTouch && ev.shiftKey) {
	                isMultiTouch = true;
	                multiTouchStartPos = {
	                    pageX: ev.pageX,
	                    pageY: ev.pageY,
	                    clientX: ev.clientX,
	                    clientY: ev.clientY,
	                    screenX: ev.screenX,
	                    screenY: ev.screenY
	                };
	                triggerTouch('touchstart', ev);
	            }

	            // reset
	            if (ev.type == 'mouseup') {
	                multiTouchStartPos = null;
	                isMultiTouch = false;
	                eventTarget = null;
	            }
	        }
	    }

	    /**
	     * trigger a touch event
	     * @param eventName
	     * @param mouseEv
	     */
	    function triggerTouch(eventName, mouseEv) {
	        var touchEvent = document.createEvent('Event');
	        touchEvent.initEvent(eventName, true, true);

	        touchEvent.altKey = mouseEv.altKey;
	        touchEvent.ctrlKey = mouseEv.ctrlKey;
	        touchEvent.metaKey = mouseEv.metaKey;
	        touchEvent.shiftKey = mouseEv.shiftKey;

	        touchEvent.touches = getActiveTouches(mouseEv, eventName);
	        touchEvent.targetTouches = getActiveTouches(mouseEv, eventName);
	        touchEvent.changedTouches = getChangedTouches(mouseEv, eventName);

	        eventTarget.dispatchEvent(touchEvent);
	    }

	    /**
	     * create a touchList based on the mouse event
	     * @param mouseEv
	     * @returns {TouchList}
	     */
	    function createTouchList(mouseEv) {
	        var touchList = new TouchList();

	        if (isMultiTouch) {
	            var f = TouchEmulator.multiTouchOffset;
	            var deltaX = multiTouchStartPos.pageX - mouseEv.pageX;
	            var deltaY = multiTouchStartPos.pageY - mouseEv.pageY;

	            touchList.push(new Touch(eventTarget, 1, multiTouchStartPos, (deltaX*-1) - f, (deltaY*-1) + f));
	            touchList.push(new Touch(eventTarget, 2, multiTouchStartPos, deltaX+f, deltaY-f));
	        } else {
	            touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));
	        }

	        return touchList;
	    }

	    /**
	     * receive all active touches
	     * @param mouseEv
	     * @returns {TouchList}
	     */
	    function getActiveTouches(mouseEv, eventName) {
	        // empty list
	        if (mouseEv.type == 'mouseup') {
	            return new TouchList();
	        }

	        var touchList = createTouchList(mouseEv);
	        if(isMultiTouch && mouseEv.type != 'mouseup' && eventName == 'touchend') {
	            touchList.splice(1, 1);
	        }
	        return touchList;
	    }

	    /**
	     * receive a filtered set of touches with only the changed pointers
	     * @param mouseEv
	     * @param eventName
	     * @returns {TouchList}
	     */
	    function getChangedTouches(mouseEv, eventName) {
	        var touchList = createTouchList(mouseEv);

	        // we only want to return the added/removed item on multitouch
	        // which is the second pointer, so remove the first pointer from the touchList
	        //
	        // but when the mouseEv.type is mouseup, we want to send all touches because then
	        // no new input will be possible
	        if(isMultiTouch && mouseEv.type != 'mouseup' &&
	            (eventName == 'touchstart' || eventName == 'touchend')) {
	            touchList.splice(0, 1);
	        }

	        return touchList;
	    }

	    /**
	     * show the touchpoints on the screen
	     */
	    function showTouches(ev) {
	        var touch, i, el, styles;

	        // first all visible touches
	        for(i = 0; i < ev.touches.length; i++) {
	            touch = ev.touches[i];
	            el = touchElements[touch.identifier];
	            if(!el) {
	                el = touchElements[touch.identifier] = document.createElement("div");
	                document.body.appendChild(el);
	            }

	            styles = TouchEmulator.template(touch);
	            for(var prop in styles) {
	                el.style[prop] = styles[prop];
	            }
	        }

	        // remove all ended touches
	        if(ev.type == 'touchend' || ev.type == 'touchcancel') {
	            for(i = 0; i < ev.changedTouches.length; i++) {
	                touch = ev.changedTouches[i];
	                el = touchElements[touch.identifier];
	                if(el) {
	                    el.parentNode.removeChild(el);
	                    delete touchElements[touch.identifier];
	                }
	            }
	        }
	    }

	    /**
	     * TouchEmulator initializer
	     */
	    function TouchEmulator() {
	        if (hasTouchSupport()) {
	            return;
	        }

	        fakeTouchSupport();

	        window.addEventListener("mousedown", onMouse('touchstart'), true);
	        window.addEventListener("mousemove", onMouse('touchmove'), true);
	        window.addEventListener("mouseup", onMouse('touchend'), true);

	        window.addEventListener("mouseenter", preventMouseEvents, true);
	        window.addEventListener("mouseleave", preventMouseEvents, true);
	        window.addEventListener("mouseout", preventMouseEvents, true);
	        window.addEventListener("mouseover", preventMouseEvents, true);

	        // it uses itself!
	        window.addEventListener("touchstart", showTouches, false);
	        window.addEventListener("touchmove", showTouches, false);
	        window.addEventListener("touchend", showTouches, false);
	        window.addEventListener("touchcancel", showTouches, false);
	    }

	    // start distance when entering the multitouch mode
	    TouchEmulator.multiTouchOffset = 75;

	    /**
	     * css template for the touch rendering
	     * @param touch
	     * @returns object
	     */
	    TouchEmulator.template = function(touch) {
	        var size = 30;
	        var transform = 'translate('+ (touch.clientX-(size/2)) +'px, '+ (touch.clientY-(size/2)) +'px)';
	        return {
	            position: 'fixed',
	            left: 0,
	            top: 0,
	            background: '#fff',
	            border: 'solid 1px #999',
	            opacity: .6,
	            borderRadius: '100%',
	            height: size + 'px',
	            width: size + 'px',
	            padding: 0,
	            margin: 0,
	            display: 'block',
	            overflow: 'hidden',
	            pointerEvents: 'none',
	            webkitUserSelect: 'none',
	            mozUserSelect: 'none',
	            userSelect: 'none',
	            webkitTransform: transform,
	            mozTransform: transform,
	            transform: transform
	        }
	    };

	    // export
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return TouchEmulator;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module != "undefined" && module.exports) {
	        module.exports = TouchEmulator;
	    } else {
	        window[exportName] = TouchEmulator;
	    }
	})(window, document, "TouchEmulator");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    Navigation = __webpack_require__(8).Navigation,
	    Link = __webpack_require__(8).Link,
	    UI = __webpack_require__(8).UI,
	    _ = __webpack_require__(29),
	    Particles = __webpack_require__(16).Particles,
	    ParticleAnimation = __webpack_require__(16).ParticleAnimation;

	module.exports = React.createClass({displayName: "exports",
	  mixins: [Navigation],

	  createParticles:function() {
	    // preparing the elements we'll need further
	    var particlesCanvas = React.findDOMNode(this.refs.canvas);
	    var particlesContext;
	    if (particlesCanvas.getContext) {
	        particlesContext = particlesCanvas.getContext("2d");
	    }
	    particlesCanvas.width = 345;
	    particlesCanvas.height = 340;
	    // genarate particles
	    Particles.init(particlesContext,{
	        count: 150,
	        clip: [[20,0],[325, 0],[328, 10],[333, 17],[345, 21],[345, 435],[333, 439],[327, 446],[325, 455],[20, 455],[18, 446],[13, 439],[0, 435],[0, 21],[13, 17],[18, 9]],
	        particleSprites: {
	            "url": "img/hearts.png",
	            "count": 3,
	            "individualWidth": 33,
	            "individualHeight": 33
	        },
	        particleMovement: {
	            "minScale": 0.4,
	            "maxScale": 1.25,
	            "minOpacity": 0,
	            "maxOpacity": 0.4,
	            "maxOpacityIncrement": 90,
	            "speedFactor": 0.1
	        }
	    });
	    Particles.generate();
	    Particles.updateBounds(345, 385);
	    // initialize out animation functions and start animation:
	    // falling particles
	    ParticleAnimation.addFrameRenderer(Particles.render, particlesContext);
	    ParticleAnimation.start();
	  },

	  componentDidMount:function() {
	    this.createParticles();
	  },

	  componentWillUnmount:function() {
	    ParticleAnimation.removeFrameRenderers();
	  },

	  render:function() {
	    style={
	      height: '455px',
	      width: '345px',
	      background: 'url("img/insert.png")',
	      backgroundSize: '345px 455px',
	      margin: 'auto',
	      position: 'relative'
	    };

	    canvasStyle={
	      position:'absolute'
	    };
	 

	    return (
	      React.createElement(UI.FlexLayout, {className: this.props.viewClassName}, 
	        React.createElement(UI.Headerbar, {label: "Nosso Casamento", className: "red"}, 
	          React.createElement(UI.HeaderbarButton, {icon: "ion-navicon-round", onTap: this.props.toggleLeftBar})
	        ), 
	        React.createElement(UI.FlexBlock, {className: "base-view"}, 
	          React.createElement("div", {style: style}, 
	            React.createElement("canvas", {id: "particles-canvas", ref: "canvas", style: canvasStyle}), 
	            React.createElement("img", {src: "img/nhamas.png", width: "345", style: canvasStyle})
	          )
	        )
	      )
	    );
	  }
	});

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    Tappable = __webpack_require__(30),
	    Navigation = __webpack_require__(8).Navigation,
	    LabelSelect = __webpack_require__(17),
	    UI = __webpack_require__(8).UI,
	    Parse = __webpack_require__(13).Parse;


	module.exports = React.createClass({displayName: "exports",
	  mixins: [Navigation],
	  getInitialState:function() {
	    return {
	      name: '',
	      going: true,
	      loading: false
	    }
	  },

	  handleGoingChange:function(going) {
	    this.setState({
	      going: going == 'true'
	    });
	  },

	  handleNameChange:function(evt) {
	    this.setState({
	      name: evt.target.value
	    });
	  },
	  
	  handleFormSubmit:function() {
	    var RSVPObject = Parse.Object.extend("RSVP");
	    var rsvpObject = new RSVPObject();
	    rsvpObject.save({name: this.state.name, going: this.state.going}).then(function(object)  {
	      this.setState({loading: false});
	      if(this.state.going){
	        navigator.notification.alert(
	            'Obrigado por nos avisar, encontramos você lá!',
	            function(){this.showView("home", "fade", null);}.bind(this),
	            'Nos vemos lá!',
	            'Ok'
	        );
	      } else {
	        navigator.notification.alert(
	            'Sentiremos sua falta, mas obrigado por avisar!',
	            function(){this.showView("home", "fade", null);}.bind(this),
	            'Obrigado',
	            'Ok'
	        );
	      }
	    }.bind(this));
	    this.setState({loading: true});
	  },

	  componentWillMount:function(){
	    window.Parse = Parse;
	  },

	  render:function() {
	    headerStyle={
	      width: '100%',
	      backgroundColor: '#DEE2EB',
	      marginBottom: '18px'
	    };
	    headerImageStyle={
	      display: 'block',
	      width: '325px',
	      margin:'auto',
	    };

	    return (
	      React.createElement(UI.FlexLayout, {className: this.props.viewClassName}, 
	        React.createElement(UI.Headerbar, {label: "RSVP", className: "red"}, 
	          React.createElement(UI.HeaderbarButton, {icon: "ion-navicon-round", onTap: this.props.toggleLeftBar})
	        ), 
	        React.createElement(UI.FlexBlock, {scrollable: true}, 
	          React.createElement("div", {style: headerStyle}, React.createElement("img", {src: "img/rsvp/header.png", style: headerImageStyle, width: "325"})), 
	          React.createElement("div", {style: {padding: '10px'}}, 
	            React.createElement("span", {className: "red-text"}, "Favor imenso!"), React.createElement("br", null), 
	            React.createElement("span", {className: "blue-text"}, "Se você não puder ir, avisa a gente, está bem? Será um casamento pequenininho e gostaríamos de encher a casa!"), " ", React.createElement("span", {className: "red-text"}, "Ficamos mega agradecidos!!")
	          ), 
	          React.createElement("div", {className: "panel"}, 
	            React.createElement(UI.LabelInput, {label: "Nome", value: this.state.name, onChange: this.handleNameChange}), 

	            React.createElement(LabelSelect, {label: "Você Vai?", value: this.state.going, onChange: this.handleGoingChange, options: [
	              { label: 'Sim!',    value: true },
	              { label: 'Infelizmente não vou poder.',  value: false }
	            ]}), 

	            React.createElement(Tappable, {component: "div", onTap: this.handleFormSubmit, className: "rsvp__submit-button"}, React.createElement(UI.LoadingButton, {loading: this.state.loading}))

	            
	            
	          )

	          
	        )
	        
	      )
	    );
	  },

	});

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    GiftItem = __webpack_require__(18);
	    Navigation = __webpack_require__(8).Navigation,
	    UI = __webpack_require__(8).UI,
	    Parse = __webpack_require__(13).Parse;


	var gifts = [
	  {
	    name: 'Coquetéis à Beira-mar',
	    value: 80.0,
	    imageURL: 'img/gifts/cocktails.png'
	  },
	  {
	    name: 'Balada no Coco Bongo',
	    value: 150.0,
	    imageURL: 'img/gifts/cocobongo.png'
	  },
	  {
	    name: 'Jantar Românico',
	    value: 220.0,
	    imageURL: 'img/gifts/dinner.png'
	  },
	  {
	    name: 'Visita às ruínas Maias',
	    value: 310.0,
	    imageURL: 'img/gifts/ruins.png'
	  },
	  {
	    name: 'Nadar com golfinhos',
	    value: 390.0,
	    imageURL: 'img/gifts/dolphin.png'
	  },
	  {
	    name: 'Fim de semana em Key West',
	    value: 500.0,
	    imageURL: 'img/gifts/keywest.png'
	  }
	];

	module.exports = React.createClass({displayName: "exports",
	  mixins: [Navigation],

	  onBuyClick:function(item){
	    console.log(item);
	    var paymentDetails = new PayPalPaymentDetails(item.value, "0.00", "0.00");
	    var payment = new PayPalPayment(item.value, "BRL", item.name, "Sale", paymentDetails);
	    PayPalMobile.renderSinglePaymentUI(payment,
	      function(payment){ 
	        navigator.notification.alert(
	            'Muito obrigado por tornar nossa lua de mel mais especial!',
	            function(){this.showView("home", "fade", null);}.bind(this),
	            'Obrigado',
	            'Ok'
	        );
	        var PaymentObject = Parse.Object.extend("Gifts");
	        var pamentObject = new PaymentObject();
	        pamentObject.save(payment).then(function(object)  { console.log("Payment Registered") });
	        // console.log("payment success: " + JSON.stringify(payment, null, 4)); 
	      }.bind(this),
	      function(result){console.log(result); });
	  },

	  render:function() {
	    textBlock = {
	      padding: '10px',
	      backgroundColor:'#81bce0',
	      color: '#ffffff',
	      fontSize: '15px'
	    };
	    giftItems = gifts.map(function(gift, index)
	      {return React.createElement(GiftItem, {product: gift, styleNum: index%2==0? 0 : 1, onBuyClick: this.onBuyClick});}.bind(this)
	    );
	    return (
	      React.createElement(UI.FlexLayout, {className: this.props.viewClassName}, 
	        React.createElement(UI.Headerbar, {label: "Lista de Presentes", className: "red"}, 
	          React.createElement(UI.HeaderbarButton, {icon: "ion-navicon-round", onTap: this.props.toggleLeftBar})
	        ), 
	        React.createElement(UI.FlexBlock, {scrollable: true}, 
	          React.createElement("div", {style: textBlock}, "Como nós já moramos juntos há dois anos, já temos nossas panelas queridas, então agradeceríamos se você pudesse audar a tornar nossa lua de mel mais especial."), 
	          giftItems, 
	          React.createElement("div", {style: textBlock}, "Se preferir, você pode fazer um depósito de qualquer valor na nossa conta conjunta:", React.createElement("br", null), "Melina Pereira Martins", React.createElement("br", null), "CPF: 337.773.078-82", React.createElement("br", null), "Banco Bradesco", React.createElement("br", null), "agência 1991", React.createElement("br", null), "conta corrente 09644")
	        )
	        
	      )
	    );
	  },

	});

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    ReactCanvas = __webpack_require__(31),
	    Tappable = __webpack_require__(30),
	    Navigation = __webpack_require__(8).Navigation,
	    Link = __webpack_require__(8).Link,
	    UI = __webpack_require__(8).UI,
	    Page = __webpack_require__(19);

	var Surface = ReactCanvas.Surface;
	var ListView = ReactCanvas.ListView;

	var articles = [
	  {
	    title: 'Maria e Jair',
	    excerpt: 'São os pais da Mel, de coração. Se a Mel chegou até aqui, foi por causa deles! Com corações imensos, o Jair e a Maria adotaram a Mel em suas vidas. Alimentaram-na com muito macarrão, muito chocolate e muito amor! Podem ter certeza de que estarão presentes em todos os pequenos e grandes momentos que estão por vir, pois são parte importante das nossas vidas. Maria, a Melina será sempre a sua menina!!',
	    imageUrl: 'img/sponsors/maria_jair.jpg'
	  },
	  {
	    title: 'Dete e Sérgio',
	    excerpt: 'São os pais do Cássio, e ele tem os melhores pais que jamais poderia desejar. No percorrer dos caminhos da vida do Cássio, na satisfação de suas conquistas, na decepção de suas derrotas, na motivação de suas lutas, no desempenho de suas atitudes, eles sempre foram a base, a inspiração e a força de toda a ação.',
	    imageUrl: 'img/sponsors/dete_sergio.jpg'
	  },
	  {
	    title: 'Olivia e Paulo',
	    excerpt: 'São os exemplos de vida da Mel. Eles foram essenciais em momentos difícieis da vida da Mel e mostraram pra ela que ia dar tudo certo e que ela podia confiar em si mesma e contar com eles. Essa é uma lição especial que ela levará para sempre. A Olivia é exemplo de coragem, sensatez e sensibilidade. O Paulo, de trabalho e disciplina. O carinho e gratidão da Mel serão eternos a vocês dois!',
	    imageUrl: 'img/sponsors/olivia_paulo.jpg'
	  },
	  {
	    title: 'Wagner e Adriana',
	    excerpt: 'Wagner é o primo que segurou o Cássio no colo e Adri está na família desde sempre (afinal de contas os dois estão juntos praticamente desde crianças - foram 15 anos de namoro!). Estiveram sempre presentes em momentos importantes da vida do Cássio, nas momentos difíceis e, claro, nos momentos felizes (que não foram poucos, incluindo aqui as madrugadas na fila de Interlagos pra ver o Senna vencer.)',
	    imageUrl: 'img/sponsors/adri_wagner.jpg'
	  },
	  {
	    title: 'Gutobat e Paty',
	    excerpt: 'Ele é amigo de faculdade da Mel e ela veio no pacote, mas se tornou uma grande amiga. São eles que sempre nos recebem de braços abertos, nos apóiam e nos fazem sentir parte importante da vida deles, como eles são da nossa! Foi a Paty quem ajudou a escolher o vestido de noiva da Mel (e não deixou que ela hesitasse em comprar o terceiro que provou!)... Podem contar conosco para o que der e vier (DE VERDADE)!',
	    imageUrl: 'img/sponsors/gutopaty.jpg'
	  },
	  {
	    title: 'Lucas e Wagner',
	    excerpt: 'Lucas era o colega de trabalho que virou inspiração que virou amigo que virou sócio (E pensa que é fácil o relacionamento com sócio?) O Wagner é a gentileza e a alegria em pessoa, e sempre participou da caminhada desses dois. Como o Lucas foi o primeiro a saber da Mel, nada mais justo do que eles estarem dois anos e pouco depois aqui. Podem contar com a gente pra tudo, porque sabemos que podemos contar com vocês.',
	    imageUrl: 'img/sponsors/lucas_wagner.jpg'
	  },
	  {    
	    title: 'Boléa e Jubinha',
	    excerpt: 'Não dá pra descrever o carinho que temos por esses dois. Não, não é porque moramos no apartamento deles. Nem porque ela praticamente planejou a nossa lua de mel e executou sozinha o chá bar (emprestando inclusive a sua casa). Não é nada disso. É porque na saúde ou na dor de dente, no japonês ou no churrasco, na casa de vocês ou no nosso apartamento (que também é de vocês), nós os amamos!',
	    imageUrl: 'img/sponsors/juboleas.jpg'
	  },
	  {
	    title: 'Fernando e Eliana',
	    excerpt: 'Se você está lendo isso foi porque a Li emprestou seu talento de designer pro nosso convite e App. E se hoje ele é conhecido como Mega-Drive foi porque o Cássio o apresentou anos atrás numa agência ressaltando não seu currículo (nem seus olhos azuis) mas o fato de ter programado jogos para o console de mesmo nome. Dizem que o Cássio e o Fernando parecem irmãos que fazem birra e provocações entre sí, e a verdade é que depois de projetos, cervejas, palestras, bikes e negócios juntos, a brincadeira não está longe da verdade.',
	    imageUrl: 'img/sponsors/eli_mega.jpg'
	  },
	];

	module.exports = React.createClass({displayName: "exports",
	  mixins: [Navigation],

	  render:function() {
	    var size = this.getSize();
	    
	    footerStyle={
	      width: '100%',
	      backgroundColor: '#81bce0',
	      position: 'absolute',
	      bottom: '0px',
	      margin: 'auto',
	      pointerEvents: 'none'

	    };
	    footerImageStyle={
	      display: 'block',
	      width: '323px',
	      margin:'auto',
	    };

	    return (
	      React.createElement(UI.FlexLayout, {className: this.props.viewClassName}, 
	        React.createElement(UI.Headerbar, {label: "Padrinhos", className: "red"}, 
	          React.createElement(UI.HeaderbarButton, {icon: "ion-navicon-round", onTap: this.props.toggleLeftBar})
	        ), 
	        React.createElement(Surface, {top: 44, left: 0, width: size.width, height: size.height-44}, 
	          React.createElement(ListView, {
	            style: this.getListViewStyle(), 
	            snapping: true, 
	            scrollingDeceleration: 0.92, 
	            scrollingPenetrationAcceleration: 0.13, 
	            numberOfItemsGetter: this.getNumberOfPages, 
	            itemHeightGetter: this.getPageHeight, 
	            itemGetter: this.renderPage})
	        ), 
	        React.createElement("div", {ref: "footer", style: footerStyle, className: "fadeable"}, React.createElement("img", {src: "img/more.png", style: footerImageStyle, width: "323"}))
	      )
	    );
	  },

	  renderPage:function(pageIndex, scrollTop) {
	    if(pageIndex>0){
	      var el = React.findDOMNode(this.refs.footer)
	      if (!el.classList.contains('fade')) {
	        el.classList.add('fade');
	      }
	    }
	    
	    var size = this.getSize();
	    var article = articles[pageIndex % articles.length];
	    var pageScrollTop = pageIndex * this.getPageHeight() - scrollTop;
	    return (
	      React.createElement(Page, {
	        width: size.width, 
	        height: size.height-44, 
	        article: article, 
	        pageIndex: pageIndex, 
	        scrollTop: pageScrollTop})
	    );
	  },

	  getSize:function() {
	    return document.body.getBoundingClientRect();
	  },

	  // ListView
	  // ========

	  getListViewStyle:function() {
	    var size = this.getSize();
	    return {
	      top: 0,
	      left: 0,
	      width: size.width,
	      height: size.height-44
	    };
	  },

	  getNumberOfPages:function() {
	    return 8;
	  },

	  getPageHeight:function() {
	    return this.getSize().height-44;
	  }
	});

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    Tappable = __webpack_require__(30),
	    Navigation = __webpack_require__(8).Navigation,
	    Link = __webpack_require__(8).Link,
	    UI = __webpack_require__(8).UI;


	module.exports = React.createClass({displayName: "exports",
	  mixins: [Navigation],

	  render:function() {
	    headerStyle={
	      width: '100%',
	      backgroundColor: '#DEE2EB',
	      marginBottom: '18px'
	    };
	    headerImageStyle={
	      display: 'block',
	      width: '325px',
	      margin:'auto',
	    };
	    return (
	      React.createElement(UI.FlexLayout, {className: this.props.viewClassName}, 
	        React.createElement(UI.Headerbar, {label: "Local da Festa e Traje", className: "red"}, 
	          React.createElement(UI.HeaderbarButton, {icon: "ion-navicon-round", onTap: this.props.toggleLeftBar})
	        ), 
	        React.createElement(UI.FlexBlock, {scrollable: true}, 
	          React.createElement("div", {style: headerStyle}, React.createElement("img", {src: "img/location_costume/header_costume.png", style: headerImageStyle, width: "325"})), 
	          React.createElement("div", {style: {textAlign:'center', marginBottom:'18px'}}, 
	            React.createElement("span", {className: "red-text"}, "Social Completo"), React.createElement("br", null)
	          ), 
	          React.createElement("div", {style: headerStyle}, React.createElement("img", {src: "img/location_costume/header_location.png", style: headerImageStyle, width: "325"})), 
	          React.createElement("div", {style: {textAlign:'center', marginBottom:'18px'}}, 
	            React.createElement("span", {className: "red-text"}, "Estação Lounge"), React.createElement("br", null), 
	            React.createElement("span", {className: "blue-text"}, "Estrada José Matias de Camargo, 715", React.createElement("br", null), "Embu das Artes, SP")
	          ), 
	          React.createElement("div", {style: headerStyle}, React.createElement("img", {src: "img/location_costume/map.png", style: headerImageStyle, width: "325"})), 
	          React.createElement("div", {style: {padding: '10px'}}, 
	            React.createElement("span", {className: "red-text"}, "Como chegar na Estação Lounge"), React.createElement("br", null), 
	            React.createElement("div", {className: "blue-text"}, 
	              React.createElement("p", null, "O Waze sabe chegar lá mas ele não é muito bom com números e acaba passando do local: Preste atenção ;)"), 
	              React.createElement("p", null, "Pra quem vem de São Paulo, o melhor caminho é vir pela Rod. Raposo Tavares até a saída do km 25,9. Observe a placa que indicará Retorno / Embu / Jd da Glória. Atravesse o viaduto por cima da Raposo seguindo a placa Embu / Colégio Arautos."), 
	              React.createElement("p", null, "Após o Assaí, entre a direita e suba. No final da subida entre à esquerda e você estará na Estrada do Capuava. Siga sempre nessa estrada e não se preocupe, pois ela mudará de nome umas duas vezes. "), 
	              React.createElement("p", null, "Serão quase 6 km até o local. Se você quiser ser bem detalhista, zere o marcador de quilometragem no início da estrada do Capuava e siga as seguinte referências:"), 
	              React.createElement("p", null, "300 m - Gera Força"), 
	              React.createElement("p", null, "700 m - Residencial Jd. Algarve"), 
	              React.createElement("p", null, "2.300 m - Academia Tenis Ranch"), 
	              React.createElement("p", null, "2.680 m - Centro Hípico de Cotia"), 
	              React.createElement("p", null, "3.800 m - Colégio Arautos do Evangélio"), 
	              React.createElement("p", null, "4.000 m - Vila de casas simples"), 
	              React.createElement("p", null, "4.600 m - Escola E. Bairro do Capuava ", React.createElement("br", null), "(início das subidas)"), 
	              React.createElement("p", null, "5.300 m - Sítio Golden Trip"), 
	              React.createElement("p", null, "5.400 m - Centro da terceira idade (não, não vamos casar no centro da terceira idade. Siga mais um pouco...)"), 
	              React.createElement("p", null, "5.600 m - a sua direita verá um muro branco e um banner indicativo do número 715 em vermelho")
	            )
	          )
	        )
	        
	      )
	    );
	  },

	});

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	function classNames() {
		var classes = '';
		var arg;

		for (var i = 0; i < arguments.length; i++) {
			arg = arguments[i];
			if (!arg) {
				continue;
			}

			if ('string' === typeof arg || 'number' === typeof arg) {
				classes += ' ' + arg;
			} else if (Object.prototype.toString.call(arg) === '[object Array]') {
				classes += ' ' + classNames.apply(null, arg);
			} else if ('object' === typeof arg) {
				for (var key in arg) {
					if (!arg.hasOwnProperty(key) || !arg[key]) {
						continue;
					}
					classes += ' ' + key;
				}
			}
		}
		return classes.substr(1);
	}

	// safely export classNames in case the script is included directly on a page
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	}


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var Touchstone = {
		createApp: __webpack_require__(21),
		Navigation: __webpack_require__(22),
		Dialogs: __webpack_require__(23),
		Link: __webpack_require__(24),
		UI: __webpack_require__(25)
	};

	module.exports = Touchstone;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(32);


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(11);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(20)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/Users/cassioantonio/Documents/work/weddingApp/node_modules/css-loader/index.js!/Users/cassioantonio/Documents/work/weddingApp/node_modules/less-loader/index.js!/Users/cassioantonio/Documents/work/weddingApp/src/css/app.less", function() {
			var newContent = require("!!/Users/cassioantonio/Documents/work/weddingApp/node_modules/css-loader/index.js!/Users/cassioantonio/Documents/work/weddingApp/node_modules/less-loader/index.js!/Users/cassioantonio/Documents/work/weddingApp/src/css/app.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(415)();
	exports.push([module.id, "/*\n * \n * Ionicons \n *\n */\n/*!\nIonicons, v1.5.2\nCreated by Ben Sperry for the Ionic Framework, http://ionicons.com/\nhttps://twitter.com/benjsperry  https://twitter.com/ionicframework\nMIT License: https://github.com/driftyco/ionicons\n*/\n@font-face {\n  font-family: \"Ionicons\";\n  src: url("+__webpack_require__(417)+");\n  src: url("+__webpack_require__(417)+"#iefix) format(\"embedded-opentype\"), url("+__webpack_require__(418)+") format(\"truetype\"), url("+__webpack_require__(419)+") format(\"woff\"), url("+__webpack_require__(420)+"#Ionicons) format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n.ion,\n.ion-loading-a,\n.ion-loading-b,\n.ion-loading-c,\n.ion-loading-d,\n.ion-looping,\n.ion-refreshing,\n.ion-ios7-reloading,\n.ionicons,\n.ion-alert:before,\n.ion-alert-circled:before,\n.ion-android-add:before,\n.ion-android-add-contact:before,\n.ion-android-alarm:before,\n.ion-android-archive:before,\n.ion-android-arrow-back:before,\n.ion-android-arrow-down-left:before,\n.ion-android-arrow-down-right:before,\n.ion-android-arrow-forward:before,\n.ion-android-arrow-up-left:before,\n.ion-android-arrow-up-right:before,\n.ion-android-battery:before,\n.ion-android-book:before,\n.ion-android-calendar:before,\n.ion-android-call:before,\n.ion-android-camera:before,\n.ion-android-chat:before,\n.ion-android-checkmark:before,\n.ion-android-clock:before,\n.ion-android-close:before,\n.ion-android-contact:before,\n.ion-android-contacts:before,\n.ion-android-data:before,\n.ion-android-developer:before,\n.ion-android-display:before,\n.ion-android-download:before,\n.ion-android-drawer:before,\n.ion-android-dropdown:before,\n.ion-android-earth:before,\n.ion-android-folder:before,\n.ion-android-forums:before,\n.ion-android-friends:before,\n.ion-android-hand:before,\n.ion-android-image:before,\n.ion-android-inbox:before,\n.ion-android-information:before,\n.ion-android-keypad:before,\n.ion-android-lightbulb:before,\n.ion-android-locate:before,\n.ion-android-location:before,\n.ion-android-mail:before,\n.ion-android-microphone:before,\n.ion-android-mixer:before,\n.ion-android-more:before,\n.ion-android-note:before,\n.ion-android-playstore:before,\n.ion-android-printer:before,\n.ion-android-promotion:before,\n.ion-android-reminder:before,\n.ion-android-remove:before,\n.ion-android-search:before,\n.ion-android-send:before,\n.ion-android-settings:before,\n.ion-android-share:before,\n.ion-android-social:before,\n.ion-android-social-user:before,\n.ion-android-sort:before,\n.ion-android-stair-drawer:before,\n.ion-android-star:before,\n.ion-android-stopwatch:before,\n.ion-android-storage:before,\n.ion-android-system-back:before,\n.ion-android-system-home:before,\n.ion-android-system-windows:before,\n.ion-android-timer:before,\n.ion-android-trash:before,\n.ion-android-user-menu:before,\n.ion-android-volume:before,\n.ion-android-wifi:before,\n.ion-aperture:before,\n.ion-archive:before,\n.ion-arrow-down-a:before,\n.ion-arrow-down-b:before,\n.ion-arrow-down-c:before,\n.ion-arrow-expand:before,\n.ion-arrow-graph-down-left:before,\n.ion-arrow-graph-down-right:before,\n.ion-arrow-graph-up-left:before,\n.ion-arrow-graph-up-right:before,\n.ion-arrow-left-a:before,\n.ion-arrow-left-b:before,\n.ion-arrow-left-c:before,\n.ion-arrow-move:before,\n.ion-arrow-resize:before,\n.ion-arrow-return-left:before,\n.ion-arrow-return-right:before,\n.ion-arrow-right-a:before,\n.ion-arrow-right-b:before,\n.ion-arrow-right-c:before,\n.ion-arrow-shrink:before,\n.ion-arrow-swap:before,\n.ion-arrow-up-a:before,\n.ion-arrow-up-b:before,\n.ion-arrow-up-c:before,\n.ion-asterisk:before,\n.ion-at:before,\n.ion-bag:before,\n.ion-battery-charging:before,\n.ion-battery-empty:before,\n.ion-battery-full:before,\n.ion-battery-half:before,\n.ion-battery-low:before,\n.ion-beaker:before,\n.ion-beer:before,\n.ion-bluetooth:before,\n.ion-bonfire:before,\n.ion-bookmark:before,\n.ion-briefcase:before,\n.ion-bug:before,\n.ion-calculator:before,\n.ion-calendar:before,\n.ion-camera:before,\n.ion-card:before,\n.ion-cash:before,\n.ion-chatbox:before,\n.ion-chatbox-working:before,\n.ion-chatboxes:before,\n.ion-chatbubble:before,\n.ion-chatbubble-working:before,\n.ion-chatbubbles:before,\n.ion-checkmark:before,\n.ion-checkmark-circled:before,\n.ion-checkmark-round:before,\n.ion-chevron-down:before,\n.ion-chevron-left:before,\n.ion-chevron-right:before,\n.ion-chevron-up:before,\n.ion-clipboard:before,\n.ion-clock:before,\n.ion-close:before,\n.ion-close-circled:before,\n.ion-close-round:before,\n.ion-closed-captioning:before,\n.ion-cloud:before,\n.ion-code:before,\n.ion-code-download:before,\n.ion-code-working:before,\n.ion-coffee:before,\n.ion-compass:before,\n.ion-compose:before,\n.ion-connection-bars:before,\n.ion-contrast:before,\n.ion-cube:before,\n.ion-disc:before,\n.ion-document:before,\n.ion-document-text:before,\n.ion-drag:before,\n.ion-earth:before,\n.ion-edit:before,\n.ion-egg:before,\n.ion-eject:before,\n.ion-email:before,\n.ion-eye:before,\n.ion-eye-disabled:before,\n.ion-female:before,\n.ion-filing:before,\n.ion-film-marker:before,\n.ion-fireball:before,\n.ion-flag:before,\n.ion-flame:before,\n.ion-flash:before,\n.ion-flash-off:before,\n.ion-flask:before,\n.ion-folder:before,\n.ion-fork:before,\n.ion-fork-repo:before,\n.ion-forward:before,\n.ion-funnel:before,\n.ion-game-controller-a:before,\n.ion-game-controller-b:before,\n.ion-gear-a:before,\n.ion-gear-b:before,\n.ion-grid:before,\n.ion-hammer:before,\n.ion-happy:before,\n.ion-headphone:before,\n.ion-heart:before,\n.ion-heart-broken:before,\n.ion-help:before,\n.ion-help-buoy:before,\n.ion-help-circled:before,\n.ion-home:before,\n.ion-icecream:before,\n.ion-icon-social-google-plus:before,\n.ion-icon-social-google-plus-outline:before,\n.ion-image:before,\n.ion-images:before,\n.ion-information:before,\n.ion-information-circled:before,\n.ion-ionic:before,\n.ion-ios7-alarm:before,\n.ion-ios7-alarm-outline:before,\n.ion-ios7-albums:before,\n.ion-ios7-albums-outline:before,\n.ion-ios7-americanfootball:before,\n.ion-ios7-americanfootball-outline:before,\n.ion-ios7-analytics:before,\n.ion-ios7-analytics-outline:before,\n.ion-ios7-arrow-back:before,\n.ion-ios7-arrow-down:before,\n.ion-ios7-arrow-forward:before,\n.ion-ios7-arrow-left:before,\n.ion-ios7-arrow-right:before,\n.ion-ios7-arrow-thin-down:before,\n.ion-ios7-arrow-thin-left:before,\n.ion-ios7-arrow-thin-right:before,\n.ion-ios7-arrow-thin-up:before,\n.ion-ios7-arrow-up:before,\n.ion-ios7-at:before,\n.ion-ios7-at-outline:before,\n.ion-ios7-barcode:before,\n.ion-ios7-barcode-outline:before,\n.ion-ios7-baseball:before,\n.ion-ios7-baseball-outline:before,\n.ion-ios7-basketball:before,\n.ion-ios7-basketball-outline:before,\n.ion-ios7-bell:before,\n.ion-ios7-bell-outline:before,\n.ion-ios7-bolt:before,\n.ion-ios7-bolt-outline:before,\n.ion-ios7-bookmarks:before,\n.ion-ios7-bookmarks-outline:before,\n.ion-ios7-box:before,\n.ion-ios7-box-outline:before,\n.ion-ios7-briefcase:before,\n.ion-ios7-briefcase-outline:before,\n.ion-ios7-browsers:before,\n.ion-ios7-browsers-outline:before,\n.ion-ios7-calculator:before,\n.ion-ios7-calculator-outline:before,\n.ion-ios7-calendar:before,\n.ion-ios7-calendar-outline:before,\n.ion-ios7-camera:before,\n.ion-ios7-camera-outline:before,\n.ion-ios7-cart:before,\n.ion-ios7-cart-outline:before,\n.ion-ios7-chatboxes:before,\n.ion-ios7-chatboxes-outline:before,\n.ion-ios7-chatbubble:before,\n.ion-ios7-chatbubble-outline:before,\n.ion-ios7-checkmark:before,\n.ion-ios7-checkmark-empty:before,\n.ion-ios7-checkmark-outline:before,\n.ion-ios7-circle-filled:before,\n.ion-ios7-circle-outline:before,\n.ion-ios7-clock:before,\n.ion-ios7-clock-outline:before,\n.ion-ios7-close:before,\n.ion-ios7-close-empty:before,\n.ion-ios7-close-outline:before,\n.ion-ios7-cloud:before,\n.ion-ios7-cloud-download:before,\n.ion-ios7-cloud-download-outline:before,\n.ion-ios7-cloud-outline:before,\n.ion-ios7-cloud-upload:before,\n.ion-ios7-cloud-upload-outline:before,\n.ion-ios7-cloudy:before,\n.ion-ios7-cloudy-night:before,\n.ion-ios7-cloudy-night-outline:before,\n.ion-ios7-cloudy-outline:before,\n.ion-ios7-cog:before,\n.ion-ios7-cog-outline:before,\n.ion-ios7-compose:before,\n.ion-ios7-compose-outline:before,\n.ion-ios7-contact:before,\n.ion-ios7-contact-outline:before,\n.ion-ios7-copy:before,\n.ion-ios7-copy-outline:before,\n.ion-ios7-download:before,\n.ion-ios7-download-outline:before,\n.ion-ios7-drag:before,\n.ion-ios7-email:before,\n.ion-ios7-email-outline:before,\n.ion-ios7-expand:before,\n.ion-ios7-eye:before,\n.ion-ios7-eye-outline:before,\n.ion-ios7-fastforward:before,\n.ion-ios7-fastforward-outline:before,\n.ion-ios7-filing:before,\n.ion-ios7-filing-outline:before,\n.ion-ios7-film:before,\n.ion-ios7-film-outline:before,\n.ion-ios7-flag:before,\n.ion-ios7-flag-outline:before,\n.ion-ios7-folder:before,\n.ion-ios7-folder-outline:before,\n.ion-ios7-football:before,\n.ion-ios7-football-outline:before,\n.ion-ios7-gear:before,\n.ion-ios7-gear-outline:before,\n.ion-ios7-glasses:before,\n.ion-ios7-glasses-outline:before,\n.ion-ios7-heart:before,\n.ion-ios7-heart-outline:before,\n.ion-ios7-help:before,\n.ion-ios7-help-empty:before,\n.ion-ios7-help-outline:before,\n.ion-ios7-home:before,\n.ion-ios7-home-outline:before,\n.ion-ios7-infinite:before,\n.ion-ios7-infinite-outline:before,\n.ion-ios7-information:before,\n.ion-ios7-information-empty:before,\n.ion-ios7-information-outline:before,\n.ion-ios7-ionic-outline:before,\n.ion-ios7-keypad:before,\n.ion-ios7-keypad-outline:before,\n.ion-ios7-lightbulb:before,\n.ion-ios7-lightbulb-outline:before,\n.ion-ios7-location:before,\n.ion-ios7-location-outline:before,\n.ion-ios7-locked:before,\n.ion-ios7-locked-outline:before,\n.ion-ios7-loop:before,\n.ion-ios7-loop-strong:before,\n.ion-ios7-medkit:before,\n.ion-ios7-medkit-outline:before,\n.ion-ios7-mic:before,\n.ion-ios7-mic-off:before,\n.ion-ios7-mic-outline:before,\n.ion-ios7-minus:before,\n.ion-ios7-minus-empty:before,\n.ion-ios7-minus-outline:before,\n.ion-ios7-monitor:before,\n.ion-ios7-monitor-outline:before,\n.ion-ios7-moon:before,\n.ion-ios7-moon-outline:before,\n.ion-ios7-more:before,\n.ion-ios7-more-outline:before,\n.ion-ios7-musical-note:before,\n.ion-ios7-musical-notes:before,\n.ion-ios7-navigate:before,\n.ion-ios7-navigate-outline:before,\n.ion-ios7-paper:before,\n.ion-ios7-paper-outline:before,\n.ion-ios7-paperplane:before,\n.ion-ios7-paperplane-outline:before,\n.ion-ios7-partlysunny:before,\n.ion-ios7-partlysunny-outline:before,\n.ion-ios7-pause:before,\n.ion-ios7-pause-outline:before,\n.ion-ios7-paw:before,\n.ion-ios7-paw-outline:before,\n.ion-ios7-people:before,\n.ion-ios7-people-outline:before,\n.ion-ios7-person:before,\n.ion-ios7-person-outline:before,\n.ion-ios7-personadd:before,\n.ion-ios7-personadd-outline:before,\n.ion-ios7-photos:before,\n.ion-ios7-photos-outline:before,\n.ion-ios7-pie:before,\n.ion-ios7-pie-outline:before,\n.ion-ios7-play:before,\n.ion-ios7-play-outline:before,\n.ion-ios7-plus:before,\n.ion-ios7-plus-empty:before,\n.ion-ios7-plus-outline:before,\n.ion-ios7-pricetag:before,\n.ion-ios7-pricetag-outline:before,\n.ion-ios7-pricetags:before,\n.ion-ios7-pricetags-outline:before,\n.ion-ios7-printer:before,\n.ion-ios7-printer-outline:before,\n.ion-ios7-pulse:before,\n.ion-ios7-pulse-strong:before,\n.ion-ios7-rainy:before,\n.ion-ios7-rainy-outline:before,\n.ion-ios7-recording:before,\n.ion-ios7-recording-outline:before,\n.ion-ios7-redo:before,\n.ion-ios7-redo-outline:before,\n.ion-ios7-refresh:before,\n.ion-ios7-refresh-empty:before,\n.ion-ios7-refresh-outline:before,\n.ion-ios7-reload:before,\n.ion-ios7-reverse-camera:before,\n.ion-ios7-reverse-camera-outline:before,\n.ion-ios7-rewind:before,\n.ion-ios7-rewind-outline:before,\n.ion-ios7-search:before,\n.ion-ios7-search-strong:before,\n.ion-ios7-settings:before,\n.ion-ios7-settings-strong:before,\n.ion-ios7-shrink:before,\n.ion-ios7-skipbackward:before,\n.ion-ios7-skipbackward-outline:before,\n.ion-ios7-skipforward:before,\n.ion-ios7-skipforward-outline:before,\n.ion-ios7-snowy:before,\n.ion-ios7-speedometer:before,\n.ion-ios7-speedometer-outline:before,\n.ion-ios7-star:before,\n.ion-ios7-star-half:before,\n.ion-ios7-star-outline:before,\n.ion-ios7-stopwatch:before,\n.ion-ios7-stopwatch-outline:before,\n.ion-ios7-sunny:before,\n.ion-ios7-sunny-outline:before,\n.ion-ios7-telephone:before,\n.ion-ios7-telephone-outline:before,\n.ion-ios7-tennisball:before,\n.ion-ios7-tennisball-outline:before,\n.ion-ios7-thunderstorm:before,\n.ion-ios7-thunderstorm-outline:before,\n.ion-ios7-time:before,\n.ion-ios7-time-outline:before,\n.ion-ios7-timer:before,\n.ion-ios7-timer-outline:before,\n.ion-ios7-toggle:before,\n.ion-ios7-toggle-outline:before,\n.ion-ios7-trash:before,\n.ion-ios7-trash-outline:before,\n.ion-ios7-undo:before,\n.ion-ios7-undo-outline:before,\n.ion-ios7-unlocked:before,\n.ion-ios7-unlocked-outline:before,\n.ion-ios7-upload:before,\n.ion-ios7-upload-outline:before,\n.ion-ios7-videocam:before,\n.ion-ios7-videocam-outline:before,\n.ion-ios7-volume-high:before,\n.ion-ios7-volume-low:before,\n.ion-ios7-wineglass:before,\n.ion-ios7-wineglass-outline:before,\n.ion-ios7-world:before,\n.ion-ios7-world-outline:before,\n.ion-ipad:before,\n.ion-iphone:before,\n.ion-ipod:before,\n.ion-jet:before,\n.ion-key:before,\n.ion-knife:before,\n.ion-laptop:before,\n.ion-leaf:before,\n.ion-levels:before,\n.ion-lightbulb:before,\n.ion-link:before,\n.ion-load-a:before,\n.ion-load-b:before,\n.ion-load-c:before,\n.ion-load-d:before,\n.ion-location:before,\n.ion-locked:before,\n.ion-log-in:before,\n.ion-log-out:before,\n.ion-loop:before,\n.ion-magnet:before,\n.ion-male:before,\n.ion-man:before,\n.ion-map:before,\n.ion-medkit:before,\n.ion-merge:before,\n.ion-mic-a:before,\n.ion-mic-b:before,\n.ion-mic-c:before,\n.ion-minus:before,\n.ion-minus-circled:before,\n.ion-minus-round:before,\n.ion-model-s:before,\n.ion-monitor:before,\n.ion-more:before,\n.ion-mouse:before,\n.ion-music-note:before,\n.ion-navicon:before,\n.ion-navicon-round:before,\n.ion-navigate:before,\n.ion-network:before,\n.ion-no-smoking:before,\n.ion-nuclear:before,\n.ion-outlet:before,\n.ion-paper-airplane:before,\n.ion-paperclip:before,\n.ion-pause:before,\n.ion-person:before,\n.ion-person-add:before,\n.ion-person-stalker:before,\n.ion-pie-graph:before,\n.ion-pin:before,\n.ion-pinpoint:before,\n.ion-pizza:before,\n.ion-plane:before,\n.ion-planet:before,\n.ion-play:before,\n.ion-playstation:before,\n.ion-plus:before,\n.ion-plus-circled:before,\n.ion-plus-round:before,\n.ion-podium:before,\n.ion-pound:before,\n.ion-power:before,\n.ion-pricetag:before,\n.ion-pricetags:before,\n.ion-printer:before,\n.ion-pull-request:before,\n.ion-qr-scanner:before,\n.ion-quote:before,\n.ion-radio-waves:before,\n.ion-record:before,\n.ion-refresh:before,\n.ion-reply:before,\n.ion-reply-all:before,\n.ion-ribbon-a:before,\n.ion-ribbon-b:before,\n.ion-sad:before,\n.ion-scissors:before,\n.ion-search:before,\n.ion-settings:before,\n.ion-share:before,\n.ion-shuffle:before,\n.ion-skip-backward:before,\n.ion-skip-forward:before,\n.ion-social-android:before,\n.ion-social-android-outline:before,\n.ion-social-apple:before,\n.ion-social-apple-outline:before,\n.ion-social-bitcoin:before,\n.ion-social-bitcoin-outline:before,\n.ion-social-buffer:before,\n.ion-social-buffer-outline:before,\n.ion-social-designernews:before,\n.ion-social-designernews-outline:before,\n.ion-social-dribbble:before,\n.ion-social-dribbble-outline:before,\n.ion-social-dropbox:before,\n.ion-social-dropbox-outline:before,\n.ion-social-facebook:before,\n.ion-social-facebook-outline:before,\n.ion-social-foursquare:before,\n.ion-social-foursquare-outline:before,\n.ion-social-freebsd-devil:before,\n.ion-social-github:before,\n.ion-social-github-outline:before,\n.ion-social-google:before,\n.ion-social-google-outline:before,\n.ion-social-googleplus:before,\n.ion-social-googleplus-outline:before,\n.ion-social-hackernews:before,\n.ion-social-hackernews-outline:before,\n.ion-social-instagram:before,\n.ion-social-instagram-outline:before,\n.ion-social-linkedin:before,\n.ion-social-linkedin-outline:before,\n.ion-social-pinterest:before,\n.ion-social-pinterest-outline:before,\n.ion-social-reddit:before,\n.ion-social-reddit-outline:before,\n.ion-social-rss:before,\n.ion-social-rss-outline:before,\n.ion-social-skype:before,\n.ion-social-skype-outline:before,\n.ion-social-tumblr:before,\n.ion-social-tumblr-outline:before,\n.ion-social-tux:before,\n.ion-social-twitter:before,\n.ion-social-twitter-outline:before,\n.ion-social-usd:before,\n.ion-social-usd-outline:before,\n.ion-social-vimeo:before,\n.ion-social-vimeo-outline:before,\n.ion-social-windows:before,\n.ion-social-windows-outline:before,\n.ion-social-wordpress:before,\n.ion-social-wordpress-outline:before,\n.ion-social-yahoo:before,\n.ion-social-yahoo-outline:before,\n.ion-social-youtube:before,\n.ion-social-youtube-outline:before,\n.ion-speakerphone:before,\n.ion-speedometer:before,\n.ion-spoon:before,\n.ion-star:before,\n.ion-stats-bars:before,\n.ion-steam:before,\n.ion-stop:before,\n.ion-thermometer:before,\n.ion-thumbsdown:before,\n.ion-thumbsup:before,\n.ion-toggle:before,\n.ion-toggle-filled:before,\n.ion-trash-a:before,\n.ion-trash-b:before,\n.ion-trophy:before,\n.ion-umbrella:before,\n.ion-university:before,\n.ion-unlocked:before,\n.ion-upload:before,\n.ion-usb:before,\n.ion-videocamera:before,\n.ion-volume-high:before,\n.ion-volume-low:before,\n.ion-volume-medium:before,\n.ion-volume-mute:before,\n.ion-wand:before,\n.ion-waterdrop:before,\n.ion-wifi:before,\n.ion-wineglass:before,\n.ion-woman:before,\n.ion-wrench:before,\n.ion-xbox:before {\n  display: inline-block;\n  font-family: \"Ionicons\";\n  speak: none;\n  font-size: inherit;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  text-rendering: auto;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.ion-spin,\n.ion-loading-a,\n.ion-loading-b,\n.ion-loading-c,\n.ion-loading-d,\n.ion-looping,\n.ion-refreshing,\n.ion-ios7-reloading {\n  -webkit-animation: spin 1s infinite linear;\n  -moz-animation: spin 1s infinite linear;\n  -o-animation: spin 1s infinite linear;\n  animation: spin 1s infinite linear;\n}\n@-moz-keyframes spin {\n  0% {\n    -moz-transform: rotate(0deg);\n  }\n  100% {\n    -moz-transform: rotate(359deg);\n  }\n}\n@-webkit-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n  }\n}\n@-o-keyframes spin {\n  0% {\n    -o-transform: rotate(0deg);\n  }\n  100% {\n    -o-transform: rotate(359deg);\n  }\n}\n@-ms-keyframes spin {\n  0% {\n    -ms-transform: rotate(0deg);\n  }\n  100% {\n    -ms-transform: rotate(359deg);\n  }\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(359deg);\n  }\n}\n.ion-loading-a {\n  -webkit-animation-timing-function: steps(8, start);\n  -moz-animation-timing-function: steps(8, start);\n  animation-timing-function: steps(8, start);\n}\n.ion-alert:before {\n  content: \"\\f101\";\n}\n.ion-alert-circled:before {\n  content: \"\\f100\";\n}\n.ion-android-add:before {\n  content: \"\\f2c7\";\n}\n.ion-android-add-contact:before {\n  content: \"\\f2c6\";\n}\n.ion-android-alarm:before {\n  content: \"\\f2c8\";\n}\n.ion-android-archive:before {\n  content: \"\\f2c9\";\n}\n.ion-android-arrow-back:before {\n  content: \"\\f2ca\";\n}\n.ion-android-arrow-down-left:before {\n  content: \"\\f2cb\";\n}\n.ion-android-arrow-down-right:before {\n  content: \"\\f2cc\";\n}\n.ion-android-arrow-forward:before {\n  content: \"\\f30f\";\n}\n.ion-android-arrow-up-left:before {\n  content: \"\\f2cd\";\n}\n.ion-android-arrow-up-right:before {\n  content: \"\\f2ce\";\n}\n.ion-android-battery:before {\n  content: \"\\f2cf\";\n}\n.ion-android-book:before {\n  content: \"\\f2d0\";\n}\n.ion-android-calendar:before {\n  content: \"\\f2d1\";\n}\n.ion-android-call:before {\n  content: \"\\f2d2\";\n}\n.ion-android-camera:before {\n  content: \"\\f2d3\";\n}\n.ion-android-chat:before {\n  content: \"\\f2d4\";\n}\n.ion-android-checkmark:before {\n  content: \"\\f2d5\";\n}\n.ion-android-clock:before {\n  content: \"\\f2d6\";\n}\n.ion-android-close:before {\n  content: \"\\f2d7\";\n}\n.ion-android-contact:before {\n  content: \"\\f2d8\";\n}\n.ion-android-contacts:before {\n  content: \"\\f2d9\";\n}\n.ion-android-data:before {\n  content: \"\\f2da\";\n}\n.ion-android-developer:before {\n  content: \"\\f2db\";\n}\n.ion-android-display:before {\n  content: \"\\f2dc\";\n}\n.ion-android-download:before {\n  content: \"\\f2dd\";\n}\n.ion-android-drawer:before {\n  content: \"\\f310\";\n}\n.ion-android-dropdown:before {\n  content: \"\\f2de\";\n}\n.ion-android-earth:before {\n  content: \"\\f2df\";\n}\n.ion-android-folder:before {\n  content: \"\\f2e0\";\n}\n.ion-android-forums:before {\n  content: \"\\f2e1\";\n}\n.ion-android-friends:before {\n  content: \"\\f2e2\";\n}\n.ion-android-hand:before {\n  content: \"\\f2e3\";\n}\n.ion-android-image:before {\n  content: \"\\f2e4\";\n}\n.ion-android-inbox:before {\n  content: \"\\f2e5\";\n}\n.ion-android-information:before {\n  content: \"\\f2e6\";\n}\n.ion-android-keypad:before {\n  content: \"\\f2e7\";\n}\n.ion-android-lightbulb:before {\n  content: \"\\f2e8\";\n}\n.ion-android-locate:before {\n  content: \"\\f2e9\";\n}\n.ion-android-location:before {\n  content: \"\\f2ea\";\n}\n.ion-android-mail:before {\n  content: \"\\f2eb\";\n}\n.ion-android-microphone:before {\n  content: \"\\f2ec\";\n}\n.ion-android-mixer:before {\n  content: \"\\f2ed\";\n}\n.ion-android-more:before {\n  content: \"\\f2ee\";\n}\n.ion-android-note:before {\n  content: \"\\f2ef\";\n}\n.ion-android-playstore:before {\n  content: \"\\f2f0\";\n}\n.ion-android-printer:before {\n  content: \"\\f2f1\";\n}\n.ion-android-promotion:before {\n  content: \"\\f2f2\";\n}\n.ion-android-reminder:before {\n  content: \"\\f2f3\";\n}\n.ion-android-remove:before {\n  content: \"\\f2f4\";\n}\n.ion-android-search:before {\n  content: \"\\f2f5\";\n}\n.ion-android-send:before {\n  content: \"\\f2f6\";\n}\n.ion-android-settings:before {\n  content: \"\\f2f7\";\n}\n.ion-android-share:before {\n  content: \"\\f2f8\";\n}\n.ion-android-social:before {\n  content: \"\\f2fa\";\n}\n.ion-android-social-user:before {\n  content: \"\\f2f9\";\n}\n.ion-android-sort:before {\n  content: \"\\f2fb\";\n}\n.ion-android-stair-drawer:before {\n  content: \"\\f311\";\n}\n.ion-android-star:before {\n  content: \"\\f2fc\";\n}\n.ion-android-stopwatch:before {\n  content: \"\\f2fd\";\n}\n.ion-android-storage:before {\n  content: \"\\f2fe\";\n}\n.ion-android-system-back:before {\n  content: \"\\f2ff\";\n}\n.ion-android-system-home:before {\n  content: \"\\f300\";\n}\n.ion-android-system-windows:before {\n  content: \"\\f301\";\n}\n.ion-android-timer:before {\n  content: \"\\f302\";\n}\n.ion-android-trash:before {\n  content: \"\\f303\";\n}\n.ion-android-user-menu:before {\n  content: \"\\f312\";\n}\n.ion-android-volume:before {\n  content: \"\\f304\";\n}\n.ion-android-wifi:before {\n  content: \"\\f305\";\n}\n.ion-aperture:before {\n  content: \"\\f313\";\n}\n.ion-archive:before {\n  content: \"\\f102\";\n}\n.ion-arrow-down-a:before {\n  content: \"\\f103\";\n}\n.ion-arrow-down-b:before {\n  content: \"\\f104\";\n}\n.ion-arrow-down-c:before {\n  content: \"\\f105\";\n}\n.ion-arrow-expand:before {\n  content: \"\\f25e\";\n}\n.ion-arrow-graph-down-left:before {\n  content: \"\\f25f\";\n}\n.ion-arrow-graph-down-right:before {\n  content: \"\\f260\";\n}\n.ion-arrow-graph-up-left:before {\n  content: \"\\f261\";\n}\n.ion-arrow-graph-up-right:before {\n  content: \"\\f262\";\n}\n.ion-arrow-left-a:before {\n  content: \"\\f106\";\n}\n.ion-arrow-left-b:before {\n  content: \"\\f107\";\n}\n.ion-arrow-left-c:before {\n  content: \"\\f108\";\n}\n.ion-arrow-move:before {\n  content: \"\\f263\";\n}\n.ion-arrow-resize:before {\n  content: \"\\f264\";\n}\n.ion-arrow-return-left:before {\n  content: \"\\f265\";\n}\n.ion-arrow-return-right:before {\n  content: \"\\f266\";\n}\n.ion-arrow-right-a:before {\n  content: \"\\f109\";\n}\n.ion-arrow-right-b:before {\n  content: \"\\f10a\";\n}\n.ion-arrow-right-c:before {\n  content: \"\\f10b\";\n}\n.ion-arrow-shrink:before {\n  content: \"\\f267\";\n}\n.ion-arrow-swap:before {\n  content: \"\\f268\";\n}\n.ion-arrow-up-a:before {\n  content: \"\\f10c\";\n}\n.ion-arrow-up-b:before {\n  content: \"\\f10d\";\n}\n.ion-arrow-up-c:before {\n  content: \"\\f10e\";\n}\n.ion-asterisk:before {\n  content: \"\\f314\";\n}\n.ion-at:before {\n  content: \"\\f10f\";\n}\n.ion-bag:before {\n  content: \"\\f110\";\n}\n.ion-battery-charging:before {\n  content: \"\\f111\";\n}\n.ion-battery-empty:before {\n  content: \"\\f112\";\n}\n.ion-battery-full:before {\n  content: \"\\f113\";\n}\n.ion-battery-half:before {\n  content: \"\\f114\";\n}\n.ion-battery-low:before {\n  content: \"\\f115\";\n}\n.ion-beaker:before {\n  content: \"\\f269\";\n}\n.ion-beer:before {\n  content: \"\\f26a\";\n}\n.ion-bluetooth:before {\n  content: \"\\f116\";\n}\n.ion-bonfire:before {\n  content: \"\\f315\";\n}\n.ion-bookmark:before {\n  content: \"\\f26b\";\n}\n.ion-briefcase:before {\n  content: \"\\f26c\";\n}\n.ion-bug:before {\n  content: \"\\f2be\";\n}\n.ion-calculator:before {\n  content: \"\\f26d\";\n}\n.ion-calendar:before {\n  content: \"\\f117\";\n}\n.ion-camera:before {\n  content: \"\\f118\";\n}\n.ion-card:before {\n  content: \"\\f119\";\n}\n.ion-cash:before {\n  content: \"\\f316\";\n}\n.ion-chatbox:before {\n  content: \"\\f11b\";\n}\n.ion-chatbox-working:before {\n  content: \"\\f11a\";\n}\n.ion-chatboxes:before {\n  content: \"\\f11c\";\n}\n.ion-chatbubble:before {\n  content: \"\\f11e\";\n}\n.ion-chatbubble-working:before {\n  content: \"\\f11d\";\n}\n.ion-chatbubbles:before {\n  content: \"\\f11f\";\n}\n.ion-checkmark:before {\n  content: \"\\f122\";\n}\n.ion-checkmark-circled:before {\n  content: \"\\f120\";\n}\n.ion-checkmark-round:before {\n  content: \"\\f121\";\n}\n.ion-chevron-down:before {\n  content: \"\\f123\";\n}\n.ion-chevron-left:before {\n  content: \"\\f124\";\n}\n.ion-chevron-right:before {\n  content: \"\\f125\";\n}\n.ion-chevron-up:before {\n  content: \"\\f126\";\n}\n.ion-clipboard:before {\n  content: \"\\f127\";\n}\n.ion-clock:before {\n  content: \"\\f26e\";\n}\n.ion-close:before {\n  content: \"\\f12a\";\n}\n.ion-close-circled:before {\n  content: \"\\f128\";\n}\n.ion-close-round:before {\n  content: \"\\f129\";\n}\n.ion-closed-captioning:before {\n  content: \"\\f317\";\n}\n.ion-cloud:before {\n  content: \"\\f12b\";\n}\n.ion-code:before {\n  content: \"\\f271\";\n}\n.ion-code-download:before {\n  content: \"\\f26f\";\n}\n.ion-code-working:before {\n  content: \"\\f270\";\n}\n.ion-coffee:before {\n  content: \"\\f272\";\n}\n.ion-compass:before {\n  content: \"\\f273\";\n}\n.ion-compose:before {\n  content: \"\\f12c\";\n}\n.ion-connection-bars:before {\n  content: \"\\f274\";\n}\n.ion-contrast:before {\n  content: \"\\f275\";\n}\n.ion-cube:before {\n  content: \"\\f318\";\n}\n.ion-disc:before {\n  content: \"\\f12d\";\n}\n.ion-document:before {\n  content: \"\\f12f\";\n}\n.ion-document-text:before {\n  content: \"\\f12e\";\n}\n.ion-drag:before {\n  content: \"\\f130\";\n}\n.ion-earth:before {\n  content: \"\\f276\";\n}\n.ion-edit:before {\n  content: \"\\f2bf\";\n}\n.ion-egg:before {\n  content: \"\\f277\";\n}\n.ion-eject:before {\n  content: \"\\f131\";\n}\n.ion-email:before {\n  content: \"\\f132\";\n}\n.ion-eye:before {\n  content: \"\\f133\";\n}\n.ion-eye-disabled:before {\n  content: \"\\f306\";\n}\n.ion-female:before {\n  content: \"\\f278\";\n}\n.ion-filing:before {\n  content: \"\\f134\";\n}\n.ion-film-marker:before {\n  content: \"\\f135\";\n}\n.ion-fireball:before {\n  content: \"\\f319\";\n}\n.ion-flag:before {\n  content: \"\\f279\";\n}\n.ion-flame:before {\n  content: \"\\f31a\";\n}\n.ion-flash:before {\n  content: \"\\f137\";\n}\n.ion-flash-off:before {\n  content: \"\\f136\";\n}\n.ion-flask:before {\n  content: \"\\f138\";\n}\n.ion-folder:before {\n  content: \"\\f139\";\n}\n.ion-fork:before {\n  content: \"\\f27a\";\n}\n.ion-fork-repo:before {\n  content: \"\\f2c0\";\n}\n.ion-forward:before {\n  content: \"\\f13a\";\n}\n.ion-funnel:before {\n  content: \"\\f31b\";\n}\n.ion-game-controller-a:before {\n  content: \"\\f13b\";\n}\n.ion-game-controller-b:before {\n  content: \"\\f13c\";\n}\n.ion-gear-a:before {\n  content: \"\\f13d\";\n}\n.ion-gear-b:before {\n  content: \"\\f13e\";\n}\n.ion-grid:before {\n  content: \"\\f13f\";\n}\n.ion-hammer:before {\n  content: \"\\f27b\";\n}\n.ion-happy:before {\n  content: \"\\f31c\";\n}\n.ion-headphone:before {\n  content: \"\\f140\";\n}\n.ion-heart:before {\n  content: \"\\f141\";\n}\n.ion-heart-broken:before {\n  content: \"\\f31d\";\n}\n.ion-help:before {\n  content: \"\\f143\";\n}\n.ion-help-buoy:before {\n  content: \"\\f27c\";\n}\n.ion-help-circled:before {\n  content: \"\\f142\";\n}\n.ion-home:before {\n  content: \"\\f144\";\n}\n.ion-icecream:before {\n  content: \"\\f27d\";\n}\n.ion-icon-social-google-plus:before {\n  content: \"\\f146\";\n}\n.ion-icon-social-google-plus-outline:before {\n  content: \"\\f145\";\n}\n.ion-image:before {\n  content: \"\\f147\";\n}\n.ion-images:before {\n  content: \"\\f148\";\n}\n.ion-information:before {\n  content: \"\\f14a\";\n}\n.ion-information-circled:before {\n  content: \"\\f149\";\n}\n.ion-ionic:before {\n  content: \"\\f14b\";\n}\n.ion-ios7-alarm:before {\n  content: \"\\f14d\";\n}\n.ion-ios7-alarm-outline:before {\n  content: \"\\f14c\";\n}\n.ion-ios7-albums:before {\n  content: \"\\f14f\";\n}\n.ion-ios7-albums-outline:before {\n  content: \"\\f14e\";\n}\n.ion-ios7-americanfootball:before {\n  content: \"\\f31f\";\n}\n.ion-ios7-americanfootball-outline:before {\n  content: \"\\f31e\";\n}\n.ion-ios7-analytics:before {\n  content: \"\\f321\";\n}\n.ion-ios7-analytics-outline:before {\n  content: \"\\f320\";\n}\n.ion-ios7-arrow-back:before {\n  content: \"\\f150\";\n}\n.ion-ios7-arrow-down:before {\n  content: \"\\f151\";\n}\n.ion-ios7-arrow-forward:before {\n  content: \"\\f152\";\n}\n.ion-ios7-arrow-left:before {\n  content: \"\\f153\";\n}\n.ion-ios7-arrow-right:before {\n  content: \"\\f154\";\n}\n.ion-ios7-arrow-thin-down:before {\n  content: \"\\f27e\";\n}\n.ion-ios7-arrow-thin-left:before {\n  content: \"\\f27f\";\n}\n.ion-ios7-arrow-thin-right:before {\n  content: \"\\f280\";\n}\n.ion-ios7-arrow-thin-up:before {\n  content: \"\\f281\";\n}\n.ion-ios7-arrow-up:before {\n  content: \"\\f155\";\n}\n.ion-ios7-at:before {\n  content: \"\\f157\";\n}\n.ion-ios7-at-outline:before {\n  content: \"\\f156\";\n}\n.ion-ios7-barcode:before {\n  content: \"\\f323\";\n}\n.ion-ios7-barcode-outline:before {\n  content: \"\\f322\";\n}\n.ion-ios7-baseball:before {\n  content: \"\\f325\";\n}\n.ion-ios7-baseball-outline:before {\n  content: \"\\f324\";\n}\n.ion-ios7-basketball:before {\n  content: \"\\f327\";\n}\n.ion-ios7-basketball-outline:before {\n  content: \"\\f326\";\n}\n.ion-ios7-bell:before {\n  content: \"\\f159\";\n}\n.ion-ios7-bell-outline:before {\n  content: \"\\f158\";\n}\n.ion-ios7-bolt:before {\n  content: \"\\f15b\";\n}\n.ion-ios7-bolt-outline:before {\n  content: \"\\f15a\";\n}\n.ion-ios7-bookmarks:before {\n  content: \"\\f15d\";\n}\n.ion-ios7-bookmarks-outline:before {\n  content: \"\\f15c\";\n}\n.ion-ios7-box:before {\n  content: \"\\f15f\";\n}\n.ion-ios7-box-outline:before {\n  content: \"\\f15e\";\n}\n.ion-ios7-briefcase:before {\n  content: \"\\f283\";\n}\n.ion-ios7-briefcase-outline:before {\n  content: \"\\f282\";\n}\n.ion-ios7-browsers:before {\n  content: \"\\f161\";\n}\n.ion-ios7-browsers-outline:before {\n  content: \"\\f160\";\n}\n.ion-ios7-calculator:before {\n  content: \"\\f285\";\n}\n.ion-ios7-calculator-outline:before {\n  content: \"\\f284\";\n}\n.ion-ios7-calendar:before {\n  content: \"\\f163\";\n}\n.ion-ios7-calendar-outline:before {\n  content: \"\\f162\";\n}\n.ion-ios7-camera:before {\n  content: \"\\f165\";\n}\n.ion-ios7-camera-outline:before {\n  content: \"\\f164\";\n}\n.ion-ios7-cart:before {\n  content: \"\\f167\";\n}\n.ion-ios7-cart-outline:before {\n  content: \"\\f166\";\n}\n.ion-ios7-chatboxes:before {\n  content: \"\\f169\";\n}\n.ion-ios7-chatboxes-outline:before {\n  content: \"\\f168\";\n}\n.ion-ios7-chatbubble:before {\n  content: \"\\f16b\";\n}\n.ion-ios7-chatbubble-outline:before {\n  content: \"\\f16a\";\n}\n.ion-ios7-checkmark:before {\n  content: \"\\f16e\";\n}\n.ion-ios7-checkmark-empty:before {\n  content: \"\\f16c\";\n}\n.ion-ios7-checkmark-outline:before {\n  content: \"\\f16d\";\n}\n.ion-ios7-circle-filled:before {\n  content: \"\\f16f\";\n}\n.ion-ios7-circle-outline:before {\n  content: \"\\f170\";\n}\n.ion-ios7-clock:before {\n  content: \"\\f172\";\n}\n.ion-ios7-clock-outline:before {\n  content: \"\\f171\";\n}\n.ion-ios7-close:before {\n  content: \"\\f2bc\";\n}\n.ion-ios7-close-empty:before {\n  content: \"\\f2bd\";\n}\n.ion-ios7-close-outline:before {\n  content: \"\\f2bb\";\n}\n.ion-ios7-cloud:before {\n  content: \"\\f178\";\n}\n.ion-ios7-cloud-download:before {\n  content: \"\\f174\";\n}\n.ion-ios7-cloud-download-outline:before {\n  content: \"\\f173\";\n}\n.ion-ios7-cloud-outline:before {\n  content: \"\\f175\";\n}\n.ion-ios7-cloud-upload:before {\n  content: \"\\f177\";\n}\n.ion-ios7-cloud-upload-outline:before {\n  content: \"\\f176\";\n}\n.ion-ios7-cloudy:before {\n  content: \"\\f17a\";\n}\n.ion-ios7-cloudy-night:before {\n  content: \"\\f308\";\n}\n.ion-ios7-cloudy-night-outline:before {\n  content: \"\\f307\";\n}\n.ion-ios7-cloudy-outline:before {\n  content: \"\\f179\";\n}\n.ion-ios7-cog:before {\n  content: \"\\f17c\";\n}\n.ion-ios7-cog-outline:before {\n  content: \"\\f17b\";\n}\n.ion-ios7-compose:before {\n  content: \"\\f17e\";\n}\n.ion-ios7-compose-outline:before {\n  content: \"\\f17d\";\n}\n.ion-ios7-contact:before {\n  content: \"\\f180\";\n}\n.ion-ios7-contact-outline:before {\n  content: \"\\f17f\";\n}\n.ion-ios7-copy:before {\n  content: \"\\f182\";\n}\n.ion-ios7-copy-outline:before {\n  content: \"\\f181\";\n}\n.ion-ios7-download:before {\n  content: \"\\f184\";\n}\n.ion-ios7-download-outline:before {\n  content: \"\\f183\";\n}\n.ion-ios7-drag:before {\n  content: \"\\f185\";\n}\n.ion-ios7-email:before {\n  content: \"\\f187\";\n}\n.ion-ios7-email-outline:before {\n  content: \"\\f186\";\n}\n.ion-ios7-expand:before {\n  content: \"\\f30d\";\n}\n.ion-ios7-eye:before {\n  content: \"\\f189\";\n}\n.ion-ios7-eye-outline:before {\n  content: \"\\f188\";\n}\n.ion-ios7-fastforward:before {\n  content: \"\\f18b\";\n}\n.ion-ios7-fastforward-outline:before {\n  content: \"\\f18a\";\n}\n.ion-ios7-filing:before {\n  content: \"\\f18d\";\n}\n.ion-ios7-filing-outline:before {\n  content: \"\\f18c\";\n}\n.ion-ios7-film:before {\n  content: \"\\f18f\";\n}\n.ion-ios7-film-outline:before {\n  content: \"\\f18e\";\n}\n.ion-ios7-flag:before {\n  content: \"\\f191\";\n}\n.ion-ios7-flag-outline:before {\n  content: \"\\f190\";\n}\n.ion-ios7-folder:before {\n  content: \"\\f193\";\n}\n.ion-ios7-folder-outline:before {\n  content: \"\\f192\";\n}\n.ion-ios7-football:before {\n  content: \"\\f329\";\n}\n.ion-ios7-football-outline:before {\n  content: \"\\f328\";\n}\n.ion-ios7-gear:before {\n  content: \"\\f195\";\n}\n.ion-ios7-gear-outline:before {\n  content: \"\\f194\";\n}\n.ion-ios7-glasses:before {\n  content: \"\\f197\";\n}\n.ion-ios7-glasses-outline:before {\n  content: \"\\f196\";\n}\n.ion-ios7-heart:before {\n  content: \"\\f199\";\n}\n.ion-ios7-heart-outline:before {\n  content: \"\\f198\";\n}\n.ion-ios7-help:before {\n  content: \"\\f19c\";\n}\n.ion-ios7-help-empty:before {\n  content: \"\\f19a\";\n}\n.ion-ios7-help-outline:before {\n  content: \"\\f19b\";\n}\n.ion-ios7-home:before {\n  content: \"\\f32b\";\n}\n.ion-ios7-home-outline:before {\n  content: \"\\f32a\";\n}\n.ion-ios7-infinite:before {\n  content: \"\\f19e\";\n}\n.ion-ios7-infinite-outline:before {\n  content: \"\\f19d\";\n}\n.ion-ios7-information:before {\n  content: \"\\f1a1\";\n}\n.ion-ios7-information-empty:before {\n  content: \"\\f19f\";\n}\n.ion-ios7-information-outline:before {\n  content: \"\\f1a0\";\n}\n.ion-ios7-ionic-outline:before {\n  content: \"\\f1a2\";\n}\n.ion-ios7-keypad:before {\n  content: \"\\f1a4\";\n}\n.ion-ios7-keypad-outline:before {\n  content: \"\\f1a3\";\n}\n.ion-ios7-lightbulb:before {\n  content: \"\\f287\";\n}\n.ion-ios7-lightbulb-outline:before {\n  content: \"\\f286\";\n}\n.ion-ios7-location:before {\n  content: \"\\f1a6\";\n}\n.ion-ios7-location-outline:before {\n  content: \"\\f1a5\";\n}\n.ion-ios7-locked:before {\n  content: \"\\f1a8\";\n}\n.ion-ios7-locked-outline:before {\n  content: \"\\f1a7\";\n}\n.ion-ios7-loop:before {\n  content: \"\\f32d\";\n}\n.ion-ios7-loop-strong:before {\n  content: \"\\f32c\";\n}\n.ion-ios7-medkit:before {\n  content: \"\\f289\";\n}\n.ion-ios7-medkit-outline:before {\n  content: \"\\f288\";\n}\n.ion-ios7-mic:before {\n  content: \"\\f1ab\";\n}\n.ion-ios7-mic-off:before {\n  content: \"\\f1a9\";\n}\n.ion-ios7-mic-outline:before {\n  content: \"\\f1aa\";\n}\n.ion-ios7-minus:before {\n  content: \"\\f1ae\";\n}\n.ion-ios7-minus-empty:before {\n  content: \"\\f1ac\";\n}\n.ion-ios7-minus-outline:before {\n  content: \"\\f1ad\";\n}\n.ion-ios7-monitor:before {\n  content: \"\\f1b0\";\n}\n.ion-ios7-monitor-outline:before {\n  content: \"\\f1af\";\n}\n.ion-ios7-moon:before {\n  content: \"\\f1b2\";\n}\n.ion-ios7-moon-outline:before {\n  content: \"\\f1b1\";\n}\n.ion-ios7-more:before {\n  content: \"\\f1b4\";\n}\n.ion-ios7-more-outline:before {\n  content: \"\\f1b3\";\n}\n.ion-ios7-musical-note:before {\n  content: \"\\f1b5\";\n}\n.ion-ios7-musical-notes:before {\n  content: \"\\f1b6\";\n}\n.ion-ios7-navigate:before {\n  content: \"\\f1b8\";\n}\n.ion-ios7-navigate-outline:before {\n  content: \"\\f1b7\";\n}\n.ion-ios7-paper:before {\n  content: \"\\f32f\";\n}\n.ion-ios7-paper-outline:before {\n  content: \"\\f32e\";\n}\n.ion-ios7-paperplane:before {\n  content: \"\\f1ba\";\n}\n.ion-ios7-paperplane-outline:before {\n  content: \"\\f1b9\";\n}\n.ion-ios7-partlysunny:before {\n  content: \"\\f1bc\";\n}\n.ion-ios7-partlysunny-outline:before {\n  content: \"\\f1bb\";\n}\n.ion-ios7-pause:before {\n  content: \"\\f1be\";\n}\n.ion-ios7-pause-outline:before {\n  content: \"\\f1bd\";\n}\n.ion-ios7-paw:before {\n  content: \"\\f331\";\n}\n.ion-ios7-paw-outline:before {\n  content: \"\\f330\";\n}\n.ion-ios7-people:before {\n  content: \"\\f1c0\";\n}\n.ion-ios7-people-outline:before {\n  content: \"\\f1bf\";\n}\n.ion-ios7-person:before {\n  content: \"\\f1c2\";\n}\n.ion-ios7-person-outline:before {\n  content: \"\\f1c1\";\n}\n.ion-ios7-personadd:before {\n  content: \"\\f1c4\";\n}\n.ion-ios7-personadd-outline:before {\n  content: \"\\f1c3\";\n}\n.ion-ios7-photos:before {\n  content: \"\\f1c6\";\n}\n.ion-ios7-photos-outline:before {\n  content: \"\\f1c5\";\n}\n.ion-ios7-pie:before {\n  content: \"\\f28b\";\n}\n.ion-ios7-pie-outline:before {\n  content: \"\\f28a\";\n}\n.ion-ios7-play:before {\n  content: \"\\f1c8\";\n}\n.ion-ios7-play-outline:before {\n  content: \"\\f1c7\";\n}\n.ion-ios7-plus:before {\n  content: \"\\f1cb\";\n}\n.ion-ios7-plus-empty:before {\n  content: \"\\f1c9\";\n}\n.ion-ios7-plus-outline:before {\n  content: \"\\f1ca\";\n}\n.ion-ios7-pricetag:before {\n  content: \"\\f28d\";\n}\n.ion-ios7-pricetag-outline:before {\n  content: \"\\f28c\";\n}\n.ion-ios7-pricetags:before {\n  content: \"\\f333\";\n}\n.ion-ios7-pricetags-outline:before {\n  content: \"\\f332\";\n}\n.ion-ios7-printer:before {\n  content: \"\\f1cd\";\n}\n.ion-ios7-printer-outline:before {\n  content: \"\\f1cc\";\n}\n.ion-ios7-pulse:before {\n  content: \"\\f335\";\n}\n.ion-ios7-pulse-strong:before {\n  content: \"\\f334\";\n}\n.ion-ios7-rainy:before {\n  content: \"\\f1cf\";\n}\n.ion-ios7-rainy-outline:before {\n  content: \"\\f1ce\";\n}\n.ion-ios7-recording:before {\n  content: \"\\f1d1\";\n}\n.ion-ios7-recording-outline:before {\n  content: \"\\f1d0\";\n}\n.ion-ios7-redo:before {\n  content: \"\\f1d3\";\n}\n.ion-ios7-redo-outline:before {\n  content: \"\\f1d2\";\n}\n.ion-ios7-refresh:before {\n  content: \"\\f1d6\";\n}\n.ion-ios7-refresh-empty:before {\n  content: \"\\f1d4\";\n}\n.ion-ios7-refresh-outline:before {\n  content: \"\\f1d5\";\n}\n.ion-ios7-reload:before {\n  content: \"\\f28e\";\n}\n.ion-ios7-reverse-camera:before {\n  content: \"\\f337\";\n}\n.ion-ios7-reverse-camera-outline:before {\n  content: \"\\f336\";\n}\n.ion-ios7-rewind:before {\n  content: \"\\f1d8\";\n}\n.ion-ios7-rewind-outline:before {\n  content: \"\\f1d7\";\n}\n.ion-ios7-search:before {\n  content: \"\\f1da\";\n}\n.ion-ios7-search-strong:before {\n  content: \"\\f1d9\";\n}\n.ion-ios7-settings:before {\n  content: \"\\f339\";\n}\n.ion-ios7-settings-strong:before {\n  content: \"\\f338\";\n}\n.ion-ios7-shrink:before {\n  content: \"\\f30e\";\n}\n.ion-ios7-skipbackward:before {\n  content: \"\\f1dc\";\n}\n.ion-ios7-skipbackward-outline:before {\n  content: \"\\f1db\";\n}\n.ion-ios7-skipforward:before {\n  content: \"\\f1de\";\n}\n.ion-ios7-skipforward-outline:before {\n  content: \"\\f1dd\";\n}\n.ion-ios7-snowy:before {\n  content: \"\\f309\";\n}\n.ion-ios7-speedometer:before {\n  content: \"\\f290\";\n}\n.ion-ios7-speedometer-outline:before {\n  content: \"\\f28f\";\n}\n.ion-ios7-star:before {\n  content: \"\\f1e0\";\n}\n.ion-ios7-star-half:before {\n  content: \"\\f33a\";\n}\n.ion-ios7-star-outline:before {\n  content: \"\\f1df\";\n}\n.ion-ios7-stopwatch:before {\n  content: \"\\f1e2\";\n}\n.ion-ios7-stopwatch-outline:before {\n  content: \"\\f1e1\";\n}\n.ion-ios7-sunny:before {\n  content: \"\\f1e4\";\n}\n.ion-ios7-sunny-outline:before {\n  content: \"\\f1e3\";\n}\n.ion-ios7-telephone:before {\n  content: \"\\f1e6\";\n}\n.ion-ios7-telephone-outline:before {\n  content: \"\\f1e5\";\n}\n.ion-ios7-tennisball:before {\n  content: \"\\f33c\";\n}\n.ion-ios7-tennisball-outline:before {\n  content: \"\\f33b\";\n}\n.ion-ios7-thunderstorm:before {\n  content: \"\\f1e8\";\n}\n.ion-ios7-thunderstorm-outline:before {\n  content: \"\\f1e7\";\n}\n.ion-ios7-time:before {\n  content: \"\\f292\";\n}\n.ion-ios7-time-outline:before {\n  content: \"\\f291\";\n}\n.ion-ios7-timer:before {\n  content: \"\\f1ea\";\n}\n.ion-ios7-timer-outline:before {\n  content: \"\\f1e9\";\n}\n.ion-ios7-toggle:before {\n  content: \"\\f33e\";\n}\n.ion-ios7-toggle-outline:before {\n  content: \"\\f33d\";\n}\n.ion-ios7-trash:before {\n  content: \"\\f1ec\";\n}\n.ion-ios7-trash-outline:before {\n  content: \"\\f1eb\";\n}\n.ion-ios7-undo:before {\n  content: \"\\f1ee\";\n}\n.ion-ios7-undo-outline:before {\n  content: \"\\f1ed\";\n}\n.ion-ios7-unlocked:before {\n  content: \"\\f1f0\";\n}\n.ion-ios7-unlocked-outline:before {\n  content: \"\\f1ef\";\n}\n.ion-ios7-upload:before {\n  content: \"\\f1f2\";\n}\n.ion-ios7-upload-outline:before {\n  content: \"\\f1f1\";\n}\n.ion-ios7-videocam:before {\n  content: \"\\f1f4\";\n}\n.ion-ios7-videocam-outline:before {\n  content: \"\\f1f3\";\n}\n.ion-ios7-volume-high:before {\n  content: \"\\f1f5\";\n}\n.ion-ios7-volume-low:before {\n  content: \"\\f1f6\";\n}\n.ion-ios7-wineglass:before {\n  content: \"\\f294\";\n}\n.ion-ios7-wineglass-outline:before {\n  content: \"\\f293\";\n}\n.ion-ios7-world:before {\n  content: \"\\f1f8\";\n}\n.ion-ios7-world-outline:before {\n  content: \"\\f1f7\";\n}\n.ion-ipad:before {\n  content: \"\\f1f9\";\n}\n.ion-iphone:before {\n  content: \"\\f1fa\";\n}\n.ion-ipod:before {\n  content: \"\\f1fb\";\n}\n.ion-jet:before {\n  content: \"\\f295\";\n}\n.ion-key:before {\n  content: \"\\f296\";\n}\n.ion-knife:before {\n  content: \"\\f297\";\n}\n.ion-laptop:before {\n  content: \"\\f1fc\";\n}\n.ion-leaf:before {\n  content: \"\\f1fd\";\n}\n.ion-levels:before {\n  content: \"\\f298\";\n}\n.ion-lightbulb:before {\n  content: \"\\f299\";\n}\n.ion-link:before {\n  content: \"\\f1fe\";\n}\n.ion-load-a:before {\n  content: \"\\f29a\";\n}\n.ion-load-b:before {\n  content: \"\\f29b\";\n}\n.ion-load-c:before {\n  content: \"\\f29c\";\n}\n.ion-load-d:before {\n  content: \"\\f29d\";\n}\n.ion-location:before {\n  content: \"\\f1ff\";\n}\n.ion-locked:before {\n  content: \"\\f200\";\n}\n.ion-log-in:before {\n  content: \"\\f29e\";\n}\n.ion-log-out:before {\n  content: \"\\f29f\";\n}\n.ion-loop:before {\n  content: \"\\f201\";\n}\n.ion-magnet:before {\n  content: \"\\f2a0\";\n}\n.ion-male:before {\n  content: \"\\f2a1\";\n}\n.ion-man:before {\n  content: \"\\f202\";\n}\n.ion-map:before {\n  content: \"\\f203\";\n}\n.ion-medkit:before {\n  content: \"\\f2a2\";\n}\n.ion-merge:before {\n  content: \"\\f33f\";\n}\n.ion-mic-a:before {\n  content: \"\\f204\";\n}\n.ion-mic-b:before {\n  content: \"\\f205\";\n}\n.ion-mic-c:before {\n  content: \"\\f206\";\n}\n.ion-minus:before {\n  content: \"\\f209\";\n}\n.ion-minus-circled:before {\n  content: \"\\f207\";\n}\n.ion-minus-round:before {\n  content: \"\\f208\";\n}\n.ion-model-s:before {\n  content: \"\\f2c1\";\n}\n.ion-monitor:before {\n  content: \"\\f20a\";\n}\n.ion-more:before {\n  content: \"\\f20b\";\n}\n.ion-mouse:before {\n  content: \"\\f340\";\n}\n.ion-music-note:before {\n  content: \"\\f20c\";\n}\n.ion-navicon:before {\n  content: \"\\f20e\";\n}\n.ion-navicon-round:before {\n  content: \"\\f20d\";\n}\n.ion-navigate:before {\n  content: \"\\f2a3\";\n}\n.ion-network:before {\n  content: \"\\f341\";\n}\n.ion-no-smoking:before {\n  content: \"\\f2c2\";\n}\n.ion-nuclear:before {\n  content: \"\\f2a4\";\n}\n.ion-outlet:before {\n  content: \"\\f342\";\n}\n.ion-paper-airplane:before {\n  content: \"\\f2c3\";\n}\n.ion-paperclip:before {\n  content: \"\\f20f\";\n}\n.ion-pause:before {\n  content: \"\\f210\";\n}\n.ion-person:before {\n  content: \"\\f213\";\n}\n.ion-person-add:before {\n  content: \"\\f211\";\n}\n.ion-person-stalker:before {\n  content: \"\\f212\";\n}\n.ion-pie-graph:before {\n  content: \"\\f2a5\";\n}\n.ion-pin:before {\n  content: \"\\f2a6\";\n}\n.ion-pinpoint:before {\n  content: \"\\f2a7\";\n}\n.ion-pizza:before {\n  content: \"\\f2a8\";\n}\n.ion-plane:before {\n  content: \"\\f214\";\n}\n.ion-planet:before {\n  content: \"\\f343\";\n}\n.ion-play:before {\n  content: \"\\f215\";\n}\n.ion-playstation:before {\n  content: \"\\f30a\";\n}\n.ion-plus:before {\n  content: \"\\f218\";\n}\n.ion-plus-circled:before {\n  content: \"\\f216\";\n}\n.ion-plus-round:before {\n  content: \"\\f217\";\n}\n.ion-podium:before {\n  content: \"\\f344\";\n}\n.ion-pound:before {\n  content: \"\\f219\";\n}\n.ion-power:before {\n  content: \"\\f2a9\";\n}\n.ion-pricetag:before {\n  content: \"\\f2aa\";\n}\n.ion-pricetags:before {\n  content: \"\\f2ab\";\n}\n.ion-printer:before {\n  content: \"\\f21a\";\n}\n.ion-pull-request:before {\n  content: \"\\f345\";\n}\n.ion-qr-scanner:before {\n  content: \"\\f346\";\n}\n.ion-quote:before {\n  content: \"\\f347\";\n}\n.ion-radio-waves:before {\n  content: \"\\f2ac\";\n}\n.ion-record:before {\n  content: \"\\f21b\";\n}\n.ion-refresh:before {\n  content: \"\\f21c\";\n}\n.ion-reply:before {\n  content: \"\\f21e\";\n}\n.ion-reply-all:before {\n  content: \"\\f21d\";\n}\n.ion-ribbon-a:before {\n  content: \"\\f348\";\n}\n.ion-ribbon-b:before {\n  content: \"\\f349\";\n}\n.ion-sad:before {\n  content: \"\\f34a\";\n}\n.ion-scissors:before {\n  content: \"\\f34b\";\n}\n.ion-search:before {\n  content: \"\\f21f\";\n}\n.ion-settings:before {\n  content: \"\\f2ad\";\n}\n.ion-share:before {\n  content: \"\\f220\";\n}\n.ion-shuffle:before {\n  content: \"\\f221\";\n}\n.ion-skip-backward:before {\n  content: \"\\f222\";\n}\n.ion-skip-forward:before {\n  content: \"\\f223\";\n}\n.ion-social-android:before {\n  content: \"\\f225\";\n}\n.ion-social-android-outline:before {\n  content: \"\\f224\";\n}\n.ion-social-apple:before {\n  content: \"\\f227\";\n}\n.ion-social-apple-outline:before {\n  content: \"\\f226\";\n}\n.ion-social-bitcoin:before {\n  content: \"\\f2af\";\n}\n.ion-social-bitcoin-outline:before {\n  content: \"\\f2ae\";\n}\n.ion-social-buffer:before {\n  content: \"\\f229\";\n}\n.ion-social-buffer-outline:before {\n  content: \"\\f228\";\n}\n.ion-social-designernews:before {\n  content: \"\\f22b\";\n}\n.ion-social-designernews-outline:before {\n  content: \"\\f22a\";\n}\n.ion-social-dribbble:before {\n  content: \"\\f22d\";\n}\n.ion-social-dribbble-outline:before {\n  content: \"\\f22c\";\n}\n.ion-social-dropbox:before {\n  content: \"\\f22f\";\n}\n.ion-social-dropbox-outline:before {\n  content: \"\\f22e\";\n}\n.ion-social-facebook:before {\n  content: \"\\f231\";\n}\n.ion-social-facebook-outline:before {\n  content: \"\\f230\";\n}\n.ion-social-foursquare:before {\n  content: \"\\f34d\";\n}\n.ion-social-foursquare-outline:before {\n  content: \"\\f34c\";\n}\n.ion-social-freebsd-devil:before {\n  content: \"\\f2c4\";\n}\n.ion-social-github:before {\n  content: \"\\f233\";\n}\n.ion-social-github-outline:before {\n  content: \"\\f232\";\n}\n.ion-social-google:before {\n  content: \"\\f34f\";\n}\n.ion-social-google-outline:before {\n  content: \"\\f34e\";\n}\n.ion-social-googleplus:before {\n  content: \"\\f235\";\n}\n.ion-social-googleplus-outline:before {\n  content: \"\\f234\";\n}\n.ion-social-hackernews:before {\n  content: \"\\f237\";\n}\n.ion-social-hackernews-outline:before {\n  content: \"\\f236\";\n}\n.ion-social-instagram:before {\n  content: \"\\f351\";\n}\n.ion-social-instagram-outline:before {\n  content: \"\\f350\";\n}\n.ion-social-linkedin:before {\n  content: \"\\f239\";\n}\n.ion-social-linkedin-outline:before {\n  content: \"\\f238\";\n}\n.ion-social-pinterest:before {\n  content: \"\\f2b1\";\n}\n.ion-social-pinterest-outline:before {\n  content: \"\\f2b0\";\n}\n.ion-social-reddit:before {\n  content: \"\\f23b\";\n}\n.ion-social-reddit-outline:before {\n  content: \"\\f23a\";\n}\n.ion-social-rss:before {\n  content: \"\\f23d\";\n}\n.ion-social-rss-outline:before {\n  content: \"\\f23c\";\n}\n.ion-social-skype:before {\n  content: \"\\f23f\";\n}\n.ion-social-skype-outline:before {\n  content: \"\\f23e\";\n}\n.ion-social-tumblr:before {\n  content: \"\\f241\";\n}\n.ion-social-tumblr-outline:before {\n  content: \"\\f240\";\n}\n.ion-social-tux:before {\n  content: \"\\f2c5\";\n}\n.ion-social-twitter:before {\n  content: \"\\f243\";\n}\n.ion-social-twitter-outline:before {\n  content: \"\\f242\";\n}\n.ion-social-usd:before {\n  content: \"\\f353\";\n}\n.ion-social-usd-outline:before {\n  content: \"\\f352\";\n}\n.ion-social-vimeo:before {\n  content: \"\\f245\";\n}\n.ion-social-vimeo-outline:before {\n  content: \"\\f244\";\n}\n.ion-social-windows:before {\n  content: \"\\f247\";\n}\n.ion-social-windows-outline:before {\n  content: \"\\f246\";\n}\n.ion-social-wordpress:before {\n  content: \"\\f249\";\n}\n.ion-social-wordpress-outline:before {\n  content: \"\\f248\";\n}\n.ion-social-yahoo:before {\n  content: \"\\f24b\";\n}\n.ion-social-yahoo-outline:before {\n  content: \"\\f24a\";\n}\n.ion-social-youtube:before {\n  content: \"\\f24d\";\n}\n.ion-social-youtube-outline:before {\n  content: \"\\f24c\";\n}\n.ion-speakerphone:before {\n  content: \"\\f2b2\";\n}\n.ion-speedometer:before {\n  content: \"\\f2b3\";\n}\n.ion-spoon:before {\n  content: \"\\f2b4\";\n}\n.ion-star:before {\n  content: \"\\f24e\";\n}\n.ion-stats-bars:before {\n  content: \"\\f2b5\";\n}\n.ion-steam:before {\n  content: \"\\f30b\";\n}\n.ion-stop:before {\n  content: \"\\f24f\";\n}\n.ion-thermometer:before {\n  content: \"\\f2b6\";\n}\n.ion-thumbsdown:before {\n  content: \"\\f250\";\n}\n.ion-thumbsup:before {\n  content: \"\\f251\";\n}\n.ion-toggle:before {\n  content: \"\\f355\";\n}\n.ion-toggle-filled:before {\n  content: \"\\f354\";\n}\n.ion-trash-a:before {\n  content: \"\\f252\";\n}\n.ion-trash-b:before {\n  content: \"\\f253\";\n}\n.ion-trophy:before {\n  content: \"\\f356\";\n}\n.ion-umbrella:before {\n  content: \"\\f2b7\";\n}\n.ion-university:before {\n  content: \"\\f357\";\n}\n.ion-unlocked:before {\n  content: \"\\f254\";\n}\n.ion-upload:before {\n  content: \"\\f255\";\n}\n.ion-usb:before {\n  content: \"\\f2b8\";\n}\n.ion-videocamera:before {\n  content: \"\\f256\";\n}\n.ion-volume-high:before {\n  content: \"\\f257\";\n}\n.ion-volume-low:before {\n  content: \"\\f258\";\n}\n.ion-volume-medium:before {\n  content: \"\\f259\";\n}\n.ion-volume-mute:before {\n  content: \"\\f25a\";\n}\n.ion-wand:before {\n  content: \"\\f358\";\n}\n.ion-waterdrop:before {\n  content: \"\\f25b\";\n}\n.ion-wifi:before {\n  content: \"\\f25c\";\n}\n.ion-wineglass:before {\n  content: \"\\f2b9\";\n}\n.ion-woman:before {\n  content: \"\\f25d\";\n}\n.ion-wrench:before {\n  content: \"\\f2ba\";\n}\n.ion-xbox:before {\n  content: \"\\f30c\";\n}\n/* \n * \n * Touchstone \n *\n */\n.display-flex {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.display-inline-flex {\n  display: -webkit-inline-flex;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n}\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nnav,\nsection,\nsummary {\n  display: block;\n}\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden],\ntemplate {\n  display: none;\n}\na {\n  background: transparent;\n}\na:active,\na:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: 1px dotted;\n}\nb,\nstrong {\n  font-weight: 500;\n}\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsup {\n  top: -0.5em;\n}\nsub {\n  bottom: -0.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\npre {\n  overflow: auto;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  margin: 0;\n}\nbutton {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: 500;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ntd,\nth {\n  padding: 0;\n}\n*,\n*:before,\n*:after {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml {\n  overflow: hidden;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  background-color: #efeff4;\n  color: black;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 17px;\n  line-height: 1.4;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  top: 0;\n  text-rendering: optimizeLegibility;\n  word-wrap: break-word;\n  -webkit-user-drag: none;\n  -webkit-text-size-adjust: none;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n  resize: none;\n}\na {\n  color: #f44336;\n  cursor: pointer;\n  text-decoration: none;\n}\na:hover,\na:focus {\n  color: #f77066;\n  text-decoration: none;\n}\na:focus {\n  outline: none;\n  text-decoration: none;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.ion:before {\n  font-size: 16px;\n}\n.ion-xs:before {\n  font-size: 8px !important;\n}\n.ion-sm:before {\n  font-size: 12px !important;\n}\n.ion-md:before {\n  font-size: 16px !important;\n}\n.ion-lg:before {\n  font-size: 24px !important;\n}\n.ion-xl:before {\n  font-size: 32px !important;\n}\n.ion-xxl:before {\n  font-size: 64px !important;\n}\n.ion-xxxl:before {\n  font-size: 128px !important;\n}\np {\n  margin: 0 0 .66em;\n}\nhr.dashed {\n  border-top-style: dashed;\n}\nhr.dotted {\n  border-top-style: dotted;\n}\n.text-overflow {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.text-overflow--reverse {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  direction: rtl;\n  text-align: left;\n}\n.view-feedback {\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  -o-transform: translateY(-50%);\n  transform: translateY(-50%);\n  position: absolute;\n  top: 50%;\n  padding-left: 10%;\n  padding-right: 10%;\n  text-align: center;\n  width: 100%;\n  margin-top: -22px;\n}\n.view-feedback-icon {\n  font-size: 64px;\n}\n.view-feedback-icon.muted {\n  color: #999999;\n}\n.view-feedback-icon.primary {\n  color: #f44336;\n}\n.view-feedback-icon.success {\n  color: #4cd964;\n}\n.view-feedback-icon.warning {\n  color: #ffcc00;\n}\n.view-feedback-icon.danger {\n  color: #e74c3c;\n}\n.view-feedback-header,\n.view-feedback-subheader {\n  font-weight: 500;\n  margin-bottom: .5em;\n}\n.view-feedback-header {\n  color: #666666;\n  font-size: 1.2em;\n}\n.view-feedback-subheader {\n  color: #999999;\n  font-size: .8em;\n  text-transform: uppercase;\n}\n.view-feedback-text {\n  color: #666666;\n}\n.view-feedback-action {\n  color: #f44336;\n  display: inline-block;\n  margin-top: 1em;\n  padding: 5px;\n}\n.list-unstyled {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n.list-unstyled > li {\n  margin: 0;\n  padding: 0;\n}\n.text-left {\n  text-align: left !important;\n}\n.text-right {\n  text-align: right !important;\n}\n.text-center {\n  text-align: center !important;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-caps,\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-thin {\n  font-weight: 100;\n}\n.text-slim {\n  font-weight: 300;\n}\n.text-regular {\n  font-weight: 400;\n}\n.text-medium {\n  font-weight: 500;\n}\n.text-bold {\n  font-weight: 600;\n}\n.text-monospace {\n  font-family: Courier, monospace;\n}\n.text-xs {\n  font-size: 13px;\n}\n.text-sm {\n  font-size: 15px;\n}\n.text-md {\n  font-size: 17px;\n}\n.text-lg {\n  font-size: 20px;\n}\n.text-huge {\n  font-size: 24px;\n  line-height: 1;\n}\n.text-massive {\n  font-size: 32px;\n  line-height: 1;\n}\n.text-ghosted {\n  color: #c7c7cd;\n}\n.text-muted,\n.btn-link.text-muted {\n  color: #999999;\n}\n.text-dimmed,\n.btn-link.text-dimmed {\n  color: #666666;\n}\n.text-base,\n.btn-link.text-base {\n  color: #333333;\n}\n.text-danger,\n.btn-link.text-danger {\n  color: #999999;\n}\n.text-danger:hover,\n.btn-link.text-danger:hover,\n.text-danger:focus,\n.btn-link.text-danger:focus {\n  color: #e74c3c;\n}\n.text-error,\n.btn-link.text-error {\n  color: #e74c3c;\n}\n.text-error:hover,\n.btn-link.text-error:hover,\n.text-error:focus,\n.btn-link.text-error:focus {\n  color: #e74c3c;\n}\n.text-primary,\n.btn-link.text-primary {\n  color: #f44336;\n}\na.text-primary:hover,\na.btn-link.text-primary:hover,\na.text-primary:focus,\na.btn-link.text-primary:focus,\nbutton.text-primary:hover,\nbutton.btn-link.text-primary:hover,\nbutton.text-primary:focus,\nbutton.btn-link.text-primary:focus {\n  color: #f77066;\n}\n.text-success,\n.btn-link.text-success {\n  color: #4cd964;\n}\na.text-success:hover,\na.btn-link.text-success:hover,\na.text-success:focus,\na.btn-link.text-success:focus,\nbutton.text-success:hover,\nbutton.btn-link.text-success:hover,\nbutton.text-success:focus,\nbutton.btn-link.text-success:focus {\n  color: #76e288;\n}\n.text-info,\n.btn-link.text-info {\n  color: #007aff;\n}\na.text-info:hover,\na.btn-link.text-info:hover,\na.text-info:focus,\na.btn-link.text-info:focus,\nbutton.text-info:hover,\nbutton.btn-link.text-info:hover,\nbutton.text-info:focus,\nbutton.btn-link.text-info:focus {\n  color: #3395ff;\n}\n.text-warning,\n.btn-link.text-warning {\n  color: #ffcc00;\n}\na.text-warning:hover,\na.btn-link.text-warning:hover,\na.text-warning:focus,\na.btn-link.text-warning:focus,\nbutton.text-warning:hover,\nbutton.btn-link.text-warning:hover,\nbutton.text-warning:focus,\nbutton.btn-link.text-warning:focus {\n  color: #ffd633;\n}\n.inline {\n  display: inline;\n}\n.inline-block {\n  display: inline-block;\n}\n.block {\n  display: block;\n}\n.clearfix:before,\n.clearfix:after {\n  content: \" \";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n}\n.clearfix:before,\n.clearfix:after {\n  content: \" \";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.collapse-left {\n  border-bottom-left-radius: 0 !important;\n  border-top-left-radius: 0 !important;\n}\n.collapse-right {\n  border-bottom-right-radius: 0 !important;\n  border-top-right-radius: 0 !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.hidden {\n  display: none !important;\n  visibility: hidden !important;\n}\n.visually-hidden {\n  -webkit-transition: opacity 150ms, visibility 150ms;\n  -o-transition: opacity 150ms, visibility 150ms;\n  transition: opacity 150ms, visibility 150ms;\n  opacity: 0;\n  pointer-events: none;\n  visibility: hidden;\n}\n.u-round-none {\n  border-radius: 0 !important;\n}\n.u-round {\n  border-radius: 8px;\n}\n.u-round-bottom {\n  border-bottom-right-radius: 8px;\n  border-bottom-left-radius: 8px;\n}\n.u-round-top {\n  border-top-right-radius: 8px;\n  border-top-left-radius: 8px;\n}\n.u-crop {\n  overflow: hidden;\n}\n.u-scrollable {\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n.u-selectable {\n  -webkit-touch-callout: default;\n  -webkit-user-select: text;\n}\n.v-center {\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  -o-transform: translateY(-50%);\n  transform: translateY(-50%);\n  position: absolute;\n  top: 50%;\n}\n.mt-5 {\n  margin-top: 5px;\n}\n.mr-5 {\n  margin-right: 5px;\n}\n.mb-5 {\n  margin-bottom: 5px;\n}\n.ml-5 {\n  margin-left: 5px;\n}\n.mt-1 {\n  margin-top: 10px;\n}\n.mr-1 {\n  margin-right: 10px;\n}\n.mb-1 {\n  margin-bottom: 10px;\n}\n.ml-1 {\n  margin-left: 10px;\n}\n.mt-2 {\n  margin-top: 20px;\n}\n.mr-2 {\n  margin-right: 20px;\n}\n.mb-2 {\n  margin-bottom: 20px;\n}\n.ml-2 {\n  margin-left: 20px;\n}\n.mv-1 {\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n.mv-2 {\n  margin-bottom: 20px;\n  margin-top: 20px;\n}\n.mv-3 {\n  margin-bottom: 30px;\n  margin-top: 30px;\n}\n.mh-1 {\n  margin-left: 10px;\n  margin-right: 10px;\n}\n.mh-2 {\n  margin-left: 20px;\n  margin-right: 20px;\n}\n.mh-3 {\n  margin-left: 30px;\n  margin-right: 30px;\n}\n.pt-1 {\n  padding-top: 10px;\n}\n.pr-1 {\n  padding-right: 10px;\n}\n.pb-1 {\n  padding-bottom: 10px;\n}\n.pl-1 {\n  padding-left: 10px;\n}\n.pt-2 {\n  padding-top: 20px;\n}\n.pr-2 {\n  padding-right: 20px;\n}\n.pb-2 {\n  padding-bottom: 20px;\n}\n.pl-2 {\n  padding-left: 20px;\n}\n.pv-1 {\n  padding-bottom: 10px;\n  padding-top: 10px;\n}\n.pv-2 {\n  padding-bottom: 20px;\n  padding-top: 20px;\n}\n.pv-3 {\n  padding-bottom: 30px;\n  padding-top: 30px;\n}\n.ph-1 {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n.ph-2 {\n  padding-left: 20px;\n  padding-right: 20px;\n}\n.ph-3 {\n  padding-left: 30px;\n  padding-right: 30px;\n}\n.mt-0 {\n  margin-top: 0 !important;\n}\n.mb-0 {\n  margin-bottom: 0 !important;\n}\n.mv-0 {\n  margin-bottom: 0 !important;\n  margin-top: 0 !important;\n}\n.pt-0 {\n  padding-top: 0 !important;\n}\n.pb-0 {\n  padding-bottom: 0 !important;\n}\n.pl-0 {\n  padding-left: 0 !important;\n}\n.pr-0 {\n  padding-right: 0 !important;\n}\n.pv-0 {\n  padding-bottom: 0 !important;\n  padding-top: 0 !important;\n}\n@-webkit-keyframes artificial {\n  from {\n    opacity: .99;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes artificial {\n  from {\n    opacity: .99;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes viewShowFromLeftEnter {\n  from {\n    -webkit-transform: translate3d(-100%, 0, 0);\n  }\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes viewShowFromLeftEnter {\n  from {\n    transform: translate3d(-100%, 0, 0);\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@-webkit-keyframes viewShowFromLeftLeave {\n  to {\n    opacity: .75;\n    -webkit-transform: translate3d(25%, 0, 0);\n  }\n}\n@keyframes viewShowFromLeftLeave {\n  to {\n    opacity: .75;\n    transform: translate3d(25%, 0, 0);\n  }\n}\n@-webkit-keyframes viewShowFromRightEnter {\n  from {\n    -webkit-transform: translate3d(100%, 0, 0);\n  }\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes viewShowFromRightEnter {\n  from {\n    transform: translate3d(100%, 0, 0);\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@-webkit-keyframes viewShowFromRightLeave {\n  to {\n    opacity: .75;\n    -webkit-transform: translate3d(-25%, 0, 0);\n  }\n}\n@keyframes viewShowFromRightLeave {\n  to {\n    opacity: .75;\n    transform: translate3d(-25%, 0, 0);\n  }\n}\n@-webkit-keyframes viewShowFromTopEnter {\n  from {\n    -webkit-transform: translate3d(0, -100%, 0);\n  }\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes viewShowFromTopEnter {\n  from {\n    transform: translate3d(0, -100%, 0);\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@-webkit-keyframes viewShowFromBottomEnter {\n  from {\n    -webkit-transform: translate3d(0, 100%, 0);\n  }\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes viewShowFromBottomEnter {\n  from {\n    transform: translate3d(0, 100%, 0);\n  }\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n}\n@-webkit-keyframes viewRevealFromLeftLeave {\n  from {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n  to {\n    -webkit-transform: translate3d(-100%, 0, 0);\n  }\n}\n@keyframes viewRevealFromLeftLeave {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(-100%, 0, 0);\n  }\n}\n@-webkit-keyframes viewRevealFromLeftEnter {\n  from {\n    opacity: .75;\n    -webkit-transform: translate3d(25%, 0, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes viewRevealFromLeftEnter {\n  from {\n    opacity: .75;\n    transform: translate3d(25%, 0, 0);\n  }\n  to {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n}\n@-webkit-keyframes viewRevealFromRightLeave {\n  from {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n  to {\n    -webkit-transform: translate3d(100%, 0, 0);\n  }\n}\n@keyframes viewRevealFromRightLeave {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(100%, 0, 0);\n  }\n}\n@-webkit-keyframes viewRevealFromRightEnter {\n  from {\n    opacity: .75;\n    -webkit-transform: translate3d(-25%, 0, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes viewRevealFromRightEnter {\n  from {\n    opacity: .75;\n    transform: translate3d(-25%, 0, 0);\n  }\n  to {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n}\n@-webkit-keyframes viewRevealFromTopLeave {\n  from {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n  to {\n    -webkit-transform: translate3d(0, -100%, 0);\n  }\n}\n@keyframes viewRevealFromTopLeave {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(0, -100%, 0);\n  }\n}\n@-webkit-keyframes viewRevealFromBottomLeave {\n  from {\n    -webkit-transform: translate3d(0, 0, 0);\n  }\n  to {\n    -webkit-transform: translate3d(0, 100%, 0);\n  }\n}\n@keyframes viewRevealFromBottomLeave {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(0, 100%, 0);\n  }\n}\n@-webkit-keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes fade {\n  to {\n    opacity: 0;\n  }\n}\n@keyframes fade {\n  to {\n    opacity: 0;\n  }\n}\n@-webkit-keyframes fadeExpand {\n  to {\n    opacity: 0;\n    -webkit-transform: scale(1.5);\n  }\n}\n@keyframes fadeExpand {\n  to {\n    opacity: 0;\n    transform: scale(1.5);\n  }\n}\n@-webkit-keyframes fadeContract {\n  to {\n    opacity: 0;\n    -webkit-transform: scale(0.35);\n  }\n}\n@keyframes fadeContract {\n  to {\n    opacity: 0;\n    transform: scale(0.35);\n  }\n}\n@-webkit-keyframes slideUp {\n  from {\n    -webkit-transform: translate3d(0, 100%, 0);\n  }\n  to {\n    -webkit-transform: none;\n  }\n}\n@keyframes slideUp {\n  from {\n    transform: translate3d(0, 100%, 0);\n  }\n  to {\n    transform: none;\n  }\n}\n@-webkit-keyframes spin {\n  to {\n    -webkit-transform: rotate(360deg);\n  }\n}\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes pulse {\n  50% {\n    opacity: .25;\n  }\n}\n@keyframes pulse {\n  50% {\n    opacity: .25;\n  }\n}\ninput::-webkit-input-placeholder {\n  line-height: normal;\n}\n.field-item > .item-inner {\n  -webkit-align-items: flex-start;\n  align-items: flex-start;\n}\n.field-label {\n  color: #666666;\n  width: 35%;\n}\n.field-control {\n  position: relative;\n  width: 65%;\n}\n.field {\n  background: none transparent;\n  border: 0 none;\n  box-shadow: none;\n  color: black;\n  display: inline-block;\n  line-height: 1;\n  outline: none;\n  min-height: 20px;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  -webkit-appearance: none;\n}\n.field::-moz-placeholder {\n  color: #c7c7cd;\n  opacity: 1;\n}\n.field:-ms-input-placeholder {\n  color: #c7c7cd;\n}\n.field::-webkit-input-placeholder {\n  color: #c7c7cd;\n}\ndiv.field {\n  -webkit-touch-callout: default;\n  -webkit-user-select: text;\n}\n.field.one-line {\n  overflow-x: auto;\n  white-space: nowrap;\n}\nlabel.item-content {\n  position: relative;\n}\nlabel.item-content:after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  content: \" \";\n  margin: -12px -15px;\n  padding: 12px 15px;\n}\n.field-note {\n  padding-left: 7px;\n  position: relative;\n}\n.field-note:after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  content: \" \";\n  margin: -12px -15px;\n  padding: 12px 15px;\n}\n.field-note-over {\n  position: absolute;\n  right: 15px;\n}\n.field-item-text-sm .field {\n  font-size: .9em;\n}\n.field-item-text-xs .field {\n  font-size: .8em;\n}\n.select-field {\n  background: none transparent;\n  border: 0 none;\n  box-shadow: none;\n  display: inline-block;\n  line-height: 1;\n  min-height: 20px;\n  margin: 0;\n  padding: 0;\n  color: black;\n  font-size: inherit;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  line-height: 1.4;\n  outline: none;\n  width: 100%;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n.select-field::-moz-placeholder {\n  color: #c7c7cd;\n  opacity: 1;\n}\n.select-field:-ms-input-placeholder {\n  color: #c7c7cd;\n}\n.select-field::-webkit-input-placeholder {\n  color: #c7c7cd;\n}\ndiv.select-field {\n  -webkit-touch-callout: default;\n  -webkit-user-select: text;\n}\n.select-field.one-line {\n  overflow-x: auto;\n  white-space: nowrap;\n}\n.select-field:-moz-focusring {\n  color: transparent;\n  text-shadow: 0 0 0 #000;\n}\n.select-field:focus + .select-field-indicator .select-field-indicator-arrow {\n  border-top-color: #666666;\n}\n.select-field-indicator,\n.select-field-indicator-arrow {\n  bottom: 0;\n  display: inline-block;\n  right: 0;\n  top: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.select-field-indicator {\n  border-bottom-right-radius: 6px;\n  border-top-right-radius: 6px;\n  background-color: white;\n  width: 1.5em;\n}\n.select-field-indicator-arrow {\n  top: 50%;\n}\n.select-field-indicator-arrow:before,\n.select-field-indicator-arrow:after {\n  width: 0;\n  height: 0;\n  border: 4px solid transparent;\n  content: \"\";\n  position: absolute;\n  right: 2px;\n}\n.select-field-indicator-arrow:before {\n  border-bottom-color: black;\n  border-top-width: 0;\n  margin-top: -6px;\n}\n.select-field-indicator-arrow:after {\n  border-top-color: black;\n  border-bottom-width: 0;\n  margin-bottom: -6px;\n}\n.g-row {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-left: -5px;\n  margin-right: -5px;\n}\n.g-col {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n.g-one-whole,\n.g-one-half,\n.g-one-quarter,\n.g-three-quarters,\n.g-one-third,\n.g-two-thirds,\n.g-one-fifth,\n.g-two-fifths,\n.g-three-fifths,\n.g-four-fifths,\n.g-one-sixth,\n.g-five-sixths {\n  -webkit-flex: 0;\n  -ms-flex: 0;\n  flex: 0;\n}\n.g-one-whole {\n  width: 100%;\n}\n.g-one-half,\n.g-two-quarters,\n.g-three-sixths {\n  width: 50%;\n}\n.g-one-quarter {\n  width: 25%;\n}\n.g-three-quarters {\n  width: 75%;\n}\n.g-one-third,\n.g-two-sixths {\n  width: 33.333%;\n}\n.g-two-thirds,\n.g-four-sixths {\n  width: 66.666%;\n}\n.g-one-fifth {\n  width: 20%;\n}\n.g-two-fifths {\n  width: 40%;\n}\n.g-three-fifths {\n  width: 60%;\n}\n.g-four-fifths {\n  width: 80%;\n}\n.g-one-sixth {\n  width: 16.666%;\n}\n.g-five-sixths {\n  width: 83.333%;\n}\n#app,\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n  background: #efeff4;\n  overflow: hidden;\n  position: fixed;\n}\n.app-wrapper {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: black;\n  overflow: hidden;\n  position: fixed;\n}\n.FlexLayout {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n.springy-scrolling {\n  position: relative;\n}\n.springy-scrolling:before,\n.springy-scrolling:after {\n  width: 1px;\n  height: 1px;\n  content: \"\";\n  position: absolute;\n}\n.springy-scrolling:before {\n  bottom: -1px;\n}\n.springy-scrolling:after {\n  top: -1px;\n}\n.view {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #efeff4;\n  overflow: hidden;\n  position: fixed;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.view-processing {\n  pointer-events: none;\n}\n.view-processing:after {\n  -webkit-animation: fadeIn 150ms;\n  -o-animation: fadeIn 150ms;\n  animation: fadeIn 150ms;\n  position: absolute;\n  top: 20px;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(255, 255, 255, 0.66);\n  content: \"\";\n  z-index: 2;\n}\n.is-native-app .view {\n  padding-top: 20px;\n}\n.is-native-app .view .Headerbar:not(.Subheader):before {\n  content: \"\";\n  display: block !important;\n  height: 20px;\n  left: 0;\n  position: absolute;\n  top: -20px;\n  width: 100%;\n}\n.is-native-app .view .Headerbar:not(.Subheader).default:before {\n  background-color: #f6f6f7;\n}\n.is-native-app .view .Headerbar:not(.Subheader).green:before {\n  background-color: #4cd964;\n}\n.is-native-app .view .Headerbar:not(.Subheader).primary:before {\n  background-color: #f44336;\n}\n.is-native-app .view .Headerbar:not(.Subheader).blue:before {\n  background-color: #007aff;\n}\n.is-native-app .view .Headerbar:not(.Subheader).light-blue:before {\n  background-color: #5ac8fa;\n}\n.is-native-app .view .Headerbar:not(.Subheader).yellow:before {\n  background-color: #ffcc00;\n}\n.is-native-app .view .Headerbar:not(.Subheader).orange:before {\n  background-color: #ff9500;\n}\n.is-native-app .view .Headerbar:not(.Subheader).red:before {\n  background-color: #f44336;\n}\n.is-native-app .view .Headerbar:not(.Subheader).pink:before {\n  background-color: #ff2d55;\n}\n.is-native-app .view .Headerbar:not(.Subheader).purple:before {\n  background-color: #5856d6;\n}\n.view-inner {\n  margin: 12px 15px;\n}\n.view-transition-none-enter {\n  -webkit-animation: artificial 10ms;\n  -o-animation: artificial 10ms;\n  animation: artificial 10ms;\n}\n.view-transition-none-leave {\n  -webkit-animation: fade 10ms;\n  -o-animation: fade 10ms;\n  animation: fade 10ms;\n}\n.view-transition-fade-enter {\n  -webkit-animation: artificial 10ms;\n  -o-animation: artificial 10ms;\n  animation: artificial 10ms;\n}\n.view-transition-fade-leave {\n  -webkit-animation: fade 380ms;\n  -o-animation: fade 380ms;\n  animation: fade 380ms;\n}\n.view-transition-fade-expand-enter {\n  -webkit-animation: artificial 10ms;\n  -o-animation: artificial 10ms;\n  animation: artificial 10ms;\n}\n.view-transition-fade-expand-leave {\n  -webkit-animation: fadeExpand 320ms;\n  -o-animation: fadeExpand 320ms;\n  animation: fadeExpand 320ms;\n}\n.view-transition-fade-contract-enter {\n  -webkit-animation: artificial 10ms;\n  -o-animation: artificial 10ms;\n  animation: artificial 10ms;\n}\n.view-transition-fade-contract-leave {\n  -webkit-animation: fadeContract 320ms;\n  -o-animation: fadeContract 320ms;\n  animation: fadeContract 320ms;\n}\n.view-transition-show-from-top-enter,\n.view-transition-show-from-right-enter,\n.view-transition-show-from-bottom-enter,\n.view-transition-show-from-left-enter {\n  z-index: 20;\n}\n.view-transition-show-from-top-leave,\n.view-transition-show-from-right-leave,\n.view-transition-show-from-bottom-leave,\n.view-transition-show-from-left-leave {\n  z-index: 10;\n}\n.view-transition-show-from-top-enter,\n.view-transition-show-from-top-leave,\n.view-transition-show-from-bottom-enter,\n.view-transition-show-from-bottom-leave {\n  -webkit-animation-duration: 380ms;\n  animation-duration: 380ms;\n  -webkit-animation-timing-function: cubic-bezier(0.77, 0, 0.175, 1);\n  animation-timing-function: cubic-bezier(0.77, 0, 0.175, 1);\n}\n.view-transition-show-from-left-enter,\n.view-transition-show-from-left-leave,\n.view-transition-show-from-right-enter,\n.view-transition-show-from-right-leave {\n  -webkit-animation-duration: 320ms;\n  animation-duration: 320ms;\n  -webkit-animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);\n  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n.view-transition-show-from-top-leave,\n.view-transition-show-from-bottom-leave {\n  -webkit-animation-name: artificial;\n  animation-name: artificial;\n}\n.view-transition-show-from-top-enter {\n  -webkit-animation-name: viewShowFromTopEnter;\n  animation-name: viewShowFromTopEnter;\n}\n.view-transition-show-from-right-enter {\n  -webkit-animation-name: viewShowFromRightEnter;\n  animation-name: viewShowFromRightEnter;\n}\n.view-transition-show-from-bottom-enter {\n  -webkit-animation-name: viewShowFromBottomEnter;\n  animation-name: viewShowFromBottomEnter;\n}\n.view-transition-show-from-left-enter {\n  -webkit-animation-name: viewShowFromLeftEnter;\n  animation-name: viewShowFromLeftEnter;\n}\n.view-transition-show-from-left-leave {\n  -webkit-animation-name: viewShowFromLeftLeave;\n  animation-name: viewShowFromLeftLeave;\n}\n.view-transition-show-from-right-leave {\n  -webkit-animation-name: viewShowFromRightLeave;\n  animation-name: viewShowFromRightLeave;\n}\n.view-transition-reveal-from-top-enter,\n.view-transition-reveal-from-right-enter,\n.view-transition-reveal-from-bottom-enter,\n.view-transition-reveal-from-left-enter {\n  z-index: 10;\n}\n.view-transition-reveal-from-top-leave,\n.view-transition-reveal-from-right-leave,\n.view-transition-reveal-from-bottom-leave,\n.view-transition-reveal-from-left-leave {\n  z-index: 20;\n}\n.view-transition-reveal-from-top-enter,\n.view-transition-reveal-from-top-leave,\n.view-transition-reveal-from-bottom-enter,\n.view-transition-reveal-from-bottom-leave {\n  -webkit-animation-duration: 380ms;\n  animation-duration: 380ms;\n  -webkit-animation-timing-function: cubic-bezier(0.77, 0, 0.175, 1);\n  animation-timing-function: cubic-bezier(0.77, 0, 0.175, 1);\n}\n.view-transition-reveal-from-left-enter,\n.view-transition-reveal-from-left-leave,\n.view-transition-reveal-from-right-enter,\n.view-transition-reveal-from-right-leave {\n  -webkit-animation-duration: 320ms;\n  animation-duration: 320ms;\n  -webkit-animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);\n  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n.view-transition-reveal-from-top-enter,\n.view-transition-reveal-from-bottom-enter {\n  -webkit-animation-name: artificial;\n  animation-name: artificial;\n}\n.view-transition-reveal-from-top-leave {\n  -webkit-animation-name: viewRevealFromTopLeave;\n  animation-name: viewRevealFromTopLeave;\n}\n.view-transition-reveal-from-right-leave {\n  -webkit-animation-name: viewRevealFromRightLeave;\n  animation-name: viewRevealFromRightLeave;\n}\n.view-transition-reveal-from-bottom-leave {\n  -webkit-animation-name: viewRevealFromBottomLeave;\n  animation-name: viewRevealFromBottomLeave;\n}\n.view-transition-reveal-from-left-leave {\n  -webkit-animation-name: viewRevealFromLeftLeave;\n  animation-name: viewRevealFromLeftLeave;\n}\n.view-transition-reveal-from-left-enter {\n  -webkit-animation-name: viewRevealFromLeftEnter;\n  animation-name: viewRevealFromLeftEnter;\n}\n.view-transition-reveal-from-right-enter {\n  -webkit-animation-name: viewRevealFromRightEnter;\n  animation-name: viewRevealFromRightEnter;\n}\n.statusbar {\n  width: 100%;\n  height: 20px;\n  background-color: #f6f6f7;\n}\n.alertbar {\n  background-color: #999999;\n  color: white;\n  font-size: 15px;\n  font-weight: 500;\n  height: 30px;\n  line-height: 30px;\n  position: relative;\n  text-align: center;\n}\n.alertbar.primary {\n  background-color: #f44336;\n}\n.alertbar.success {\n  background-color: #4cd964;\n}\n.alertbar.warning {\n  background-color: #ffcc00;\n}\n.alertbar.danger {\n  background-color: #e74c3c;\n}\n.alertbar:after {\n  -webkit-animation: pulse 2s linear infinite;\n  -o-animation: pulse 2s linear infinite;\n  animation: pulse 2s linear infinite;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: black;\n  content: \"\";\n  opacity: 0;\n  z-index: 1;\n}\n.alertbar-text {\n  position: relative;\n  z-index: 2;\n}\nbutton {\n  padding: 0;\n}\n.btn {\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n  border: 0 none;\n  display: inline-block;\n  font-weight: 500;\n  padding: 12px 15px;\n  position: relative;\n  outline: none;\n  text-align: center;\n  text-decoration: none;\n  -webkit-appearance: none;\n}\n.btn-link {\n  -webkit-box-shadow: none;\n  box-shadow: none;\n  border-color: transparent;\n  border-radius: 0;\n  color: #f44336;\n  cursor: pointer;\n}\n.btn-link,\n.btn-link:active,\n.btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n}\n.btn-link:hover,\n.btn-link:active,\n.btn-link:focus {\n  color: #f77066;\n  background-color: transparent;\n}\n.btn-default {\n  background-image: -webkit-linear-gradient(top, #eeeeee 0%, #dddddd 100%);\n  background-image: -o-linear-gradient(top, #eeeeee 0%, #dddddd 100%);\n  background-image: linear-gradient(to bottom, #eeeeee 0%, #dddddd 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffeeeeee', endColorstr='#ffdddddd', GradientType=0);\n  color: black;\n}\n.btn-default:hover,\n.btn-default:focus {\n  background-image: -webkit-linear-gradient(top, #f6f6f6 0%, #e6e6e6 100%);\n  background-image: -o-linear-gradient(top, #f6f6f6 0%, #e6e6e6 100%);\n  background-image: linear-gradient(to bottom, #f6f6f6 0%, #e6e6e6 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff6f6f6', endColorstr='#ffe6e6e6', GradientType=0);\n  color: black;\n}\n.btn-default:active,\n.btn-default.active {\n  background: #ddd;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.125);\n}\n.btn-primary {\n  background-image: -webkit-linear-gradient(top, #f55549 0%, #f33123 100%);\n  background-image: -o-linear-gradient(top, #f55549 0%, #f33123 100%);\n  background-image: linear-gradient(to bottom, #f55549 0%, #f33123 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff55549', endColorstr='#fff33123', GradientType=0);\n  background-color: #f44336;\n  color: white;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.18);\n}\n.btn-primary:hover,\n.btn-primary:focus {\n  background-image: -webkit-linear-gradient(top, #f6675d 0%, #f44336 100%);\n  background-image: -o-linear-gradient(top, #f6675d 0%, #f44336 100%);\n  background-image: linear-gradient(to bottom, #f6675d 0%, #f44336 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff6675d', endColorstr='#fff44336', GradientType=0);\n  background-color: #f55a4e;\n  color: white;\n  outline: none;\n  text-decoration: none;\n}\n.btn-primary:active {\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  background: #f32c1e;\n}\n.btn-success {\n  background-image: -webkit-linear-gradient(top, #5ddd73 0%, #3bd555 100%);\n  background-image: -o-linear-gradient(top, #5ddd73 0%, #3bd555 100%);\n  background-image: linear-gradient(to bottom, #5ddd73 0%, #3bd555 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5ddd73', endColorstr='#ff3bd555', GradientType=0);\n  background-color: #4cd964;\n  color: white;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.18);\n}\n.btn-success:hover,\n.btn-success:focus {\n  background-image: -webkit-linear-gradient(top, #6ee081 0%, #4cd964 100%);\n  background-image: -o-linear-gradient(top, #6ee081 0%, #4cd964 100%);\n  background-image: linear-gradient(to bottom, #6ee081 0%, #4cd964 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff6ee081', endColorstr='#ff4cd964', GradientType=0);\n  background-color: #61dd76;\n  color: white;\n  outline: none;\n  text-decoration: none;\n}\n.btn-success:active {\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  background: #37d552;\n}\n.btn-info {\n  background-image: -webkit-linear-gradient(top, #1485ff 0%, #0070eb 100%);\n  background-image: -o-linear-gradient(top, #1485ff 0%, #0070eb 100%);\n  background-image: linear-gradient(to bottom, #1485ff 0%, #0070eb 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff1485ff', endColorstr='#ff0070eb', GradientType=0);\n  background-color: #007aff;\n  color: white;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.18);\n}\n.btn-info:hover,\n.btn-info:focus {\n  background-image: -webkit-linear-gradient(top, #298fff 0%, #007aff 100%);\n  background-image: -o-linear-gradient(top, #298fff 0%, #007aff 100%);\n  background-image: linear-gradient(to bottom, #298fff 0%, #007aff 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff298fff', endColorstr='#ff007aff', GradientType=0);\n  background-color: #1a87ff;\n  color: white;\n  outline: none;\n  text-decoration: none;\n}\n.btn-info:active {\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  background: #006ee6;\n}\n.btn-warning {\n  background-image: -webkit-linear-gradient(top, #ffd014 0%, #ebbc00 100%);\n  background-image: -o-linear-gradient(top, #ffd014 0%, #ebbc00 100%);\n  background-image: linear-gradient(to bottom, #ffd014 0%, #ebbc00 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffd014', endColorstr='#ffebbc00', GradientType=0);\n  background-color: #ffcc00;\n  color: white;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.18);\n}\n.btn-warning:hover,\n.btn-warning:focus {\n  background-image: -webkit-linear-gradient(top, #ffd429 0%, #ffcc00 100%);\n  background-image: -o-linear-gradient(top, #ffd429 0%, #ffcc00 100%);\n  background-image: linear-gradient(to bottom, #ffd429 0%, #ffcc00 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffd429', endColorstr='#ffffcc00', GradientType=0);\n  background-color: #ffd11a;\n  color: white;\n  outline: none;\n  text-decoration: none;\n}\n.btn-warning:active {\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  background: #e6b800;\n}\n.btn-danger {\n  background-image: -webkit-linear-gradient(top, #e95d4e 0%, #e53b2a 100%);\n  background-image: -o-linear-gradient(top, #e95d4e 0%, #e53b2a 100%);\n  background-image: linear-gradient(to bottom, #e95d4e 0%, #e53b2a 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe95d4e', endColorstr='#ffe53b2a', GradientType=0);\n  background-color: #e74c3c;\n  color: white;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.18);\n}\n.btn-danger:hover,\n.btn-danger:focus {\n  background-image: -webkit-linear-gradient(top, #eb6d60 0%, #e74c3c 100%);\n  background-image: -o-linear-gradient(top, #eb6d60 0%, #e74c3c 100%);\n  background-image: linear-gradient(to bottom, #eb6d60 0%, #e74c3c 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffeb6d60', endColorstr='#ffe74c3c', GradientType=0);\n  background-color: #ea6153;\n  color: white;\n  outline: none;\n  text-decoration: none;\n}\n.btn-danger:active {\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  background: #e43725;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.panel-button {\n  border: 0 none;\n  font-weight: normal;\n  line-height: 1;\n  outline: none;\n  text-decoration: none;\n  -webkit-appearance: none;\n  background-color: white;\n  border: none;\n  color: black;\n  display: block;\n  margin-bottom: 34px;\n  height: 44px;\n  line-height: 44px;\n  padding: 0 15px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n}\n.panel-button:after,\n.panel-button:before {\n  width: 100%;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.17);\n  content: \" \";\n  left: 0;\n  position: absolute;\n}\n.panel-button:before {\n  top: -1px;\n}\n.panel-button:after {\n  bottom: -1px;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .panel-button:after,\n  .panel-button:before {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    -o-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n  .panel-button:before {\n    -webkit-transform-origin: 0 bottom;\n    -moz-transform-origin: 0 bottom;\n    -ms-transform-origin: 0 bottom;\n    transform-origin: 0 bottom;\n  }\n  .panel-button:after {\n    -webkit-transform-origin: 0 top;\n    -moz-transform-origin: 0 top;\n    -ms-transform-origin: 0 top;\n    transform-origin: 0 top;\n  }\n}\n.panel-button.muted {\n  color: #666666;\n}\n.panel-button.primary {\n  color: #f44336;\n  font-weight: 500;\n}\n.panel-button.info {\n  color: #007aff;\n}\n.panel-button.success {\n  color: #4cd964;\n}\n.panel-button.warning {\n  color: #ffcc00;\n}\n.panel-button.danger {\n  color: #e74c3c;\n}\n.panel-button + .panel-button {\n  margin-top: -17px;\n}\n.panel-button.Tappable-active {\n  background-color: #d9d9d9;\n}\n.panel-button.disabled,\n.panel-button[disabled] {\n  pointer-events: none;\n  opacity: .5;\n}\n.panel-button--first {\n  margin-top: 34px;\n}\n.loading-button-icon,\n.loading-button-text {\n  -webkit-transition: opacity 400ms;\n  -o-transition: opacity 400ms;\n  transition: opacity 400ms;\n}\n.loading-button-icon-wrapper {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  margin-left: -12px;\n  left: 50%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n}\n.loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n  -webkit-transition-delay: 200ms;\n  transition-delay: 200ms;\n  opacity: 0;\n}\n.loading-button-icon:before,\n.loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #f44336;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #f44336;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.default .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.default .loading-button-icon:before,\n.loading-button.default .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid black;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.default .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: black;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.muted .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.muted .loading-button-icon:before,\n.loading-button.muted .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #999999;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.muted .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #999999;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.primary .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.primary .loading-button-icon:before,\n.loading-button.primary .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #f44336;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.primary .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #f44336;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.info .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.info .loading-button-icon:before,\n.loading-button.info .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #007aff;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.info .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #007aff;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.success .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.success .loading-button-icon:before,\n.loading-button.success .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #4cd964;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.success .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #4cd964;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.warning .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.warning .loading-button-icon:before,\n.loading-button.warning .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #ffcc00;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.warning .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #ffcc00;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.danger .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.danger .loading-button-icon:before,\n.loading-button.danger .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid #e74c3c;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.danger .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: #e74c3c;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.inverted .loading-button-icon {\n  width: 24px;\n  height: 24px;\n  margin: auto;\n  position: relative;\n}\n.loading-button.inverted .loading-button-icon:before,\n.loading-button.inverted .loading-button-icon:after {\n  width: 24px;\n  height: 24px;\n  content: \"\";\n  border-radius: 50%;\n  border: 3px solid white;\n  left: 0;\n  opacity: .33;\n  position: absolute;\n  top: 0;\n}\n.loading-button.inverted .loading-button-icon:after {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: white;\n  display: inline-block;\n  opacity: 1;\n}\n.loading-button.is-loading .loading-button-icon {\n  opacity: 1;\n}\n.loading-button.is-loading .loading-button-text {\n  opacity: 0;\n}\n.action-buttons {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-flow: 'row nowrap';\n  -ms-flex-flow: 'row nowrap';\n  flex-flow: 'row nowrap';\n}\n.action-buttons + .action-buttons {\n  border-top: 1px solid #d1d1df;\n}\n.action-button-cell {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  border-left: 1px solid #d1d1df;\n  text-align: center;\n}\n.action-button-cell:first-child {\n  border-left: none;\n}\n.action-button {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-justify-content: center;\n  justify-content: center;\n  background: none transparent;\n  border: 0 none;\n  cursor: pointer;\n  min-height: 70px;\n  padding: 5px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n  -webkit-appearance: none;\n}\n.action-button.disabled,\n.action-button[disabled] {\n  pointer-events: none;\n}\n.action-button.disabled:before,\n.action-button[disabled]:before,\n.action-button.disabled > .action-button-label,\n.action-button[disabled] > .action-button-label {\n  color: #cccccc;\n}\n.action-button.inactive:before,\n.action-button.inactive > .action-button-label {\n  opacity: .4;\n}\n.action-button.Tappable-active {\n  background-color: #eeeeee;\n}\n.action-button:before {\n  color: #f44336;\n  display: inline-block;\n  font-size: 32px;\n  height: 32px;\n  line-height: 1;\n}\n.action-button-label {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-size: 15px;\n  font-weight: 500;\n}\n.action-buttons.special {\n  box-shadow: 0 0 0 1px #e6b800;\n}\n.action-buttons.special .action-button-cell {\n  border-color: #d9ad00;\n}\n.action-buttons.special .action-button {\n  background-color: #ffcc00;\n}\n.action-buttons.special .action-button-icon {\n  color: black;\n}\n.scan-button {\n  width: 100%;\n  height: 60px;\n  background-color: #f44336;\n  border: 0 none;\n  color: white;\n  display: block;\n  font-weight: 500;\n  position: relative;\n  outline: none;\n  text-align: center;\n  text-decoration: none;\n  -webkit-appearance: none;\n}\n.scan-button.loading,\n.scan-button.Tappable-active {\n  background-color: #ea1c0d;\n}\n.scan-button.loading .scan-button-icon,\n.scan-button.Tappable-active .scan-button-icon {\n  background-color: #fff8f7;\n  box-shadow: 0 0 0 4px #ea1c0d;\n}\n.scan-button.loading {\n  -webkit-transition: all 500ms cubic-bezier(0.68, -0.66, 0.265, 1.66);\n  -o-transition: all 500ms cubic-bezier(0.68, -0.66, 0.265, 1.66);\n  transition: all 500ms cubic-bezier(0.68, -0.66, 0.265, 1.66);\n  -webkit-transform: translateY(125%);\n  -ms-transform: translateY(125%);\n  -o-transform: translateY(125%);\n  transform: translateY(125%);\n}\n.scan-button[disabled],\n.scan-button.disabled {\n  background-color: #666666;\n  opacity: .2;\n  pointer-events: none;\n}\n.scan-button[disabled] .scan-button-icon,\n.scan-button.disabled .scan-button-icon {\n  box-shadow: 0 0 0 4px #666666;\n}\n.scan-button-icon {\n  display: inline-block;\n  vertical-align: middle;\n  width: 70px;\n  height: 70px;\n  background-color: #ffffff;\n  border-radius: 50%;\n  box-shadow: 0 0 0 4px #f44336;\n  color: black;\n  font-size: 32px;\n  left: 50%;\n  line-height: 70px;\n  margin-left: -35px;\n  margin-top: -35px;\n  position: absolute;\n  top: 50%;\n}\n.scan-button-icon > svg {\n  display: inline-block;\n  vertical-align: middle;\n  width: 32px;\n  height: 32px;\n  margin-top: -7px;\n}\n.scan-button-labels {\n  width: 100%;\n  height: 100%;\n  display: table;\n  table-layout: fixed;\n}\n.scan-button-label {\n  background: 0 0;\n  border: none;\n  display: table-cell;\n  padding: 0 15px;\n  vertical-align: middle;\n  text-align: center;\n}\n.scan-button-label-icon {\n  width: 70px;\n}\n.scan-button-label-left {\n  text-align: right;\n}\n.scan-button-label-right {\n  text-align: left;\n}\n.list-item {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  color: black;\n  line-height: 1;\n  position: relative;\n  z-index: 1;\n  padding-left: 15px;\n}\n.list-item:hover,\n.list-item:active,\n.list-item:focus {\n  color: black;\n  text-decoration: none;\n}\n.list-item.Tappable-active {\n  -webkit-transition: background-color 10ms linear 10ms;\n  -o-transition: background-color 10ms linear 10ms;\n  transition: background-color 10ms linear 10ms;\n  background-color: #d9d9d9;\n}\n.list-item.Tappable-inactive {\n  -webkit-transition: background-color 200ms;\n  -o-transition: background-color 200ms;\n  transition: background-color 200ms;\n}\n.list-item.is-tappable:after {\n  display: inline-block;\n  font-family: \"Ionicons\";\n  speak: none;\n  font-size: inherit;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  text-rendering: auto;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #cccccc;\n  content: \"\\f125\";\n  font-size: 16px;\n  -webkit-align-items: center;\n  align-items: center;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  height: 100%;\n  position: absolute;\n  right: 15px;\n  top: 0;\n}\n.item-inner {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: space-between;\n  justify-content: space-between;\n  position: relative;\n  min-height: 44px;\n  padding: 12px 15px 12px 0;\n  width: 100%;\n}\n.item-inner:after {\n  width: 100%;\n  height: 1px;\n  background-color: #bfbfc3;\n  bottom: -1px;\n  content: \" \";\n  left: 0;\n  position: absolute;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .item-inner:after {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    -o-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n    -webkit-transform-origin: 0 0;\n    -moz-transform-origin: 0 0;\n    -ms-transform-origin: 0 0;\n    transform-origin: 0 0;\n  }\n}\n.align-children-top > .item-inner {\n  -webkit-align-items: flex-start;\n  align-items: flex-start;\n}\n.align-children-bottom > .item-inner {\n  -webkit-align-items: flex-end;\n  align-items: flex-end;\n}\n.list-item:last-child .item-inner {\n  border-bottom: none;\n}\n.list-item.has-border-bottom .item-inner {\n  border-bottom: 1px solid #bfbfc3;\n}\n.list-item.has-border-top .item-inner {\n  border-top: 1px solid #bfbfc3;\n}\n.item-media + .item-inner {\n  margin-left: 15px;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .item-inner {\n    border-bottom-width: 0.5px;\n  }\n  .list-item.has-border-bottom .item-inner {\n    border-bottom-width: 0.5px;\n  }\n  .list-item.has-border-top .item-inner {\n    border-top-width: 0.5px;\n  }\n}\n.item-content {\n  -webkit-flex: 1 0 0;\n  -ms-flex: 1 0 0;\n  flex: 1 0 0;\n}\n.item-content.row-children {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.item-title {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-bottom: -1px;\n  padding-bottom: 1px;\n}\n.item-subtitle {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: #666666;\n  font-size: 85%;\n  font-weight: 300;\n  margin-bottom: -1px;\n  padding-bottom: 1px;\n}\n.center-align-left,\n.center-align-right {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  height: 100%;\n  position: absolute;\n  top: 0;\n}\n.center-align-left {\n  left: 15px;\n}\n.center-align-right {\n  right: 15px;\n}\n.item-note {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  white-space: nowrap;\n}\n.item-note.default {\n  color: #999;\n}\n.item-note.default .item-note-icon {\n  color: #ccc;\n}\n.item-note.primary {\n  color: #f44336;\n}\n.item-note-label {\n  white-space: nowrap;\n}\n.item-note-icon {\n  margin-left: 7.5px;\n}\n.item-note-icon:before {\n  font-size: 16px;\n}\n.item-media {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-wrap: nowrap;\n  -ms-flex-wrap: nowrap;\n  flex-wrap: nowrap;\n  -webkit-align-items: center;\n  align-items: center;\n  min-width: 29px;\n}\n.item-icon {\n  display: inline-block;\n  vertical-align: middle;\n  width: 29px;\n  height: 29px;\n  border-radius: 8px;\n  line-height: 29px;\n  text-align: center;\n}\n.item-icon:before {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  font-size: 24px;\n  height: 100%;\n}\n.item-icon.left {\n  left: 15px;\n}\n.item-icon.left.flush {\n  left: 0;\n}\n.item-icon.right {\n  right: 15px;\n}\n.item-icon.right.flush {\n  right: 0;\n}\n.item-icon.rounded {\n  border-radius: 8px;\n  background-color: #efeff4;\n}\n.item-icon.primary-inverted {\n  background-color: #f44336;\n  color: white;\n}\n.item-icon.primary {\n  color: #f44336;\n}\n.item-icon.default {\n  background-color: #efeff4;\n  color: black;\n}\n.item-icon.ion-load-a:before,\n.item-icon.ion-load-b:before,\n.item-icon.ion-load-c:before,\n.item-icon.ion-load-d:before {\n  -webkit-animation: spin 1s linear infinite;\n  -o-animation: spin 1s linear infinite;\n  animation: spin 1s linear infinite;\n}\n.list-avatar {\n  display: inline-block;\n  vertical-align: middle;\n  width: 40px;\n  height: 40px;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  -o-transform: translateY(-50%);\n  transform: translateY(-50%);\n  background-color: #b3b3b3;\n  border-radius: 50%;\n  color: white;\n  font-size: 24px;\n  line-height: 40px;\n  left: 15px;\n  position: absolute;\n  text-align: center;\n  top: 50%;\n}\n.list-avatar > img {\n  border-radius: 50%;\n  display: block;\n  height: auto;\n  max-width: 100%;\n}\n.list-header {\n  background-color: #efeff4;\n  color: #4d4d4d;\n  display: block;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 1.1;\n  margin: 0;\n  padding: 6px 15px;\n  position: relative;\n  text-transform: uppercase;\n  z-index: 1;\n}\n.list-header:after,\n.list-header:before {\n  width: 100%;\n  height: 1px;\n  background-color: #bfbfc3;\n  content: \" \";\n  left: 0;\n  position: absolute;\n}\n.list-header:before {\n  top: -1px;\n}\n.list-header:after {\n  bottom: -1px;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .list-header:after,\n  .list-header:before {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    -o-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n  .list-header:before {\n    -webkit-transform-origin: 0 bottom;\n    -moz-transform-origin: 0 bottom;\n    -ms-transform-origin: 0 bottom;\n    transform-origin: 0 bottom;\n  }\n  .list-header:after {\n    -webkit-transform-origin: 0 top;\n    -moz-transform-origin: 0 top;\n    -ms-transform-origin: 0 top;\n    transform-origin: 0 top;\n  }\n}\n.loading-overlay {\n  background-color: rgba(0, 0, 0, 0.66);\n  bottom: 0;\n  left: 0;\n  overflow: hidden;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 11;\n}\n.loading-spinner,\n.loading-spinner-indicator {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  border: 10px solid rgba(255, 255, 255, 0.5);\n  left: 50%;\n  margin-left: -50px;\n  margin-top: -50px;\n  position: absolute;\n  top: 50%;\n}\n.loading-spinner-indicator {\n  -webkit-animation: spin 500ms linear infinite;\n  -o-animation: spin 500ms linear infinite;\n  animation: spin 500ms linear infinite;\n  border-color: transparent;\n  border-top-color: white;\n}\n.Footerbar {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  color: #222222;\n  height: 44px;\n  margin: 0;\n  position: relative;\n  z-index: 3;\n}\n.Footerbar.default {\n  position: relative;\n  background-color: #f6f6f7;\n}\n.Footerbar.default:after {\n  width: 100%;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.3);\n  top: -1px;\n  content: \" \";\n  left: 0;\n  position: absolute;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .Footerbar.default:after {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    -o-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n    -webkit-transform-origin: 0 0;\n    -moz-transform-origin: 0 0;\n    -ms-transform-origin: 0 0;\n    transform-origin: 0 0;\n  }\n}\n.Footerbar.green,\n.Footerbar.blue,\n.Footerbar.primary,\n.Footerbar.light-blue,\n.Footerbar.yellow,\n.Footerbar.orange,\n.Footerbar.red,\n.Footerbar.pink,\n.Footerbar.purple {\n  color: white;\n}\n.Footerbar.green:after,\n.Footerbar.blue:after,\n.Footerbar.primary:after,\n.Footerbar.light-blue:after,\n.Footerbar.yellow:after,\n.Footerbar.orange:after,\n.Footerbar.red:after,\n.Footerbar.pink:after,\n.Footerbar.purple:after {\n  display: none;\n}\n.Footerbar.green .Footerbar-button,\n.Footerbar.blue .Footerbar-button,\n.Footerbar.primary .Footerbar-button,\n.Footerbar.light-blue .Footerbar-button,\n.Footerbar.yellow .Footerbar-button,\n.Footerbar.orange .Footerbar-button,\n.Footerbar.red .Footerbar-button,\n.Footerbar.pink .Footerbar-button,\n.Footerbar.purple .Footerbar-button {\n  color: white;\n}\n.Footerbar.green .Footerbar-button.disabled,\n.Footerbar.blue .Footerbar-button.disabled,\n.Footerbar.primary .Footerbar-button.disabled,\n.Footerbar.light-blue .Footerbar-button.disabled,\n.Footerbar.yellow .Footerbar-button.disabled,\n.Footerbar.orange .Footerbar-button.disabled,\n.Footerbar.red .Footerbar-button.disabled,\n.Footerbar.pink .Footerbar-button.disabled,\n.Footerbar.purple .Footerbar-button.disabled,\n.Footerbar.green .Footerbar-button[disabled],\n.Footerbar.blue .Footerbar-button[disabled],\n.Footerbar.primary .Footerbar-button[disabled],\n.Footerbar.light-blue .Footerbar-button[disabled],\n.Footerbar.yellow .Footerbar-button[disabled],\n.Footerbar.orange .Footerbar-button[disabled],\n.Footerbar.red .Footerbar-button[disabled],\n.Footerbar.pink .Footerbar-button[disabled],\n.Footerbar.purple .Footerbar-button[disabled] {\n  color: rgba(255, 255, 255, 0.4);\n}\n.Footerbar.green .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.blue .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.primary .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.light-blue .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.yellow .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.orange .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.red .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.pink .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.purple .Footerbar-button > .Footerbar-button-icon,\n.Footerbar.green .Footerbar-button > .Footerbar-button-label,\n.Footerbar.blue .Footerbar-button > .Footerbar-button-label,\n.Footerbar.primary .Footerbar-button > .Footerbar-button-label,\n.Footerbar.light-blue .Footerbar-button > .Footerbar-button-label,\n.Footerbar.yellow .Footerbar-button > .Footerbar-button-label,\n.Footerbar.orange .Footerbar-button > .Footerbar-button-label,\n.Footerbar.red .Footerbar-button > .Footerbar-button-label,\n.Footerbar.pink .Footerbar-button > .Footerbar-button-label,\n.Footerbar.purple .Footerbar-button > .Footerbar-button-label {\n  color: inherit;\n}\n.Footerbar.primary {\n  background-color: #f44336;\n}\n.Footerbar.green {\n  background-color: #4cd964;\n}\n.Footerbar.blue {\n  background-color: #007aff;\n}\n.Footerbar.light-blue {\n  background-color: #5ac8fa;\n}\n.Footerbar.yellow {\n  background-color: #ffcc00;\n}\n.Footerbar.orange {\n  background-color: #ff9500;\n}\n.Footerbar.red {\n  background-color: #f44336;\n}\n.Footerbar.pink {\n  background-color: #ff2d55;\n}\n.Footerbar.purple {\n  background-color: #5856d6;\n}\n.Footerbar.yellow {\n  color: #222222;\n}\n.Footerbar.yellow .Footerbar-button {\n  color: rgba(0, 0, 0, 0.8);\n}\n.Footerbar.yellow .Footerbar-button.disabled,\n.Footerbar.yellow .Footerbar-button[disabled] {\n  color: rgba(0, 0, 0, 0.4);\n}\n.Footerbar-button {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-flow: column nowrap;\n  -ms-flex-flow: column nowrap;\n  flex-flow: column nowrap;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  background: none transparent;\n  border: 0 none;\n  color: #f44336;\n  cursor: pointer;\n  padding: 0 5px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n  -webkit-appearance: none;\n}\n.Footerbar-button.disabled,\n.Footerbar-button[disabled] {\n  pointer-events: none;\n}\n.Footerbar-button.disabled:before,\n.Footerbar-button[disabled]:before,\n.Footerbar-button.disabled > .Footerbar-button-label,\n.Footerbar-button[disabled] > .Footerbar-button-label {\n  color: #cccccc;\n}\n.Footerbar-button.Tappable-active {\n  background-color: #eeeeee;\n}\n.Footerbar-button:before {\n  color: inherit;\n  display: inline-block;\n  font-size: 32px;\n  height: 32px;\n  line-height: 1;\n}\n.Footerbar-button.selectable {\n  color: #666666;\n}\n.Footerbar-button.selected {\n  color: #007aff;\n}\n.Footerbar-button-label {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: black;\n  font-size: 13px;\n}\n.Headerbar {\n  color: #222222;\n  height: 44px;\n  line-height: 44px;\n  margin: 0;\n  position: relative;\n  z-index: 3;\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n}\n.Headerbar.default {\n  position: relative;\n  background-color: #f6f6f7;\n}\n.Headerbar.default:after {\n  width: 100%;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.3);\n  bottom: -1px;\n  content: \" \";\n  left: 0;\n  position: absolute;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .Headerbar.default:after {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    -o-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n    -webkit-transform-origin: 0 0;\n    -moz-transform-origin: 0 0;\n    -ms-transform-origin: 0 0;\n    transform-origin: 0 0;\n  }\n}\n.Headerbar.transparent,\n.Headerbar.green,\n.Headerbar.blue,\n.Headerbar.primary,\n.Headerbar.light-blue,\n.Headerbar.yellow,\n.Headerbar.orange,\n.Headerbar.red,\n.Headerbar.pink,\n.Headerbar.purple {\n  color: white;\n}\n.Headerbar.transparent:after,\n.Headerbar.green:after,\n.Headerbar.blue:after,\n.Headerbar.primary:after,\n.Headerbar.light-blue:after,\n.Headerbar.yellow:after,\n.Headerbar.orange:after,\n.Headerbar.red:after,\n.Headerbar.pink:after,\n.Headerbar.purple:after {\n  display: none;\n}\n.Headerbar.transparent .Headerbar-button,\n.Headerbar.green .Headerbar-button,\n.Headerbar.blue .Headerbar-button,\n.Headerbar.primary .Headerbar-button,\n.Headerbar.light-blue .Headerbar-button,\n.Headerbar.yellow .Headerbar-button,\n.Headerbar.orange .Headerbar-button,\n.Headerbar.red .Headerbar-button,\n.Headerbar.pink .Headerbar-button,\n.Headerbar.purple .Headerbar-button {\n  color: white;\n}\n.Headerbar.transparent .Headerbar-button.disabled,\n.Headerbar.green .Headerbar-button.disabled,\n.Headerbar.blue .Headerbar-button.disabled,\n.Headerbar.primary .Headerbar-button.disabled,\n.Headerbar.light-blue .Headerbar-button.disabled,\n.Headerbar.yellow .Headerbar-button.disabled,\n.Headerbar.orange .Headerbar-button.disabled,\n.Headerbar.red .Headerbar-button.disabled,\n.Headerbar.pink .Headerbar-button.disabled,\n.Headerbar.purple .Headerbar-button.disabled,\n.Headerbar.transparent .Headerbar-button[disabled],\n.Headerbar.green .Headerbar-button[disabled],\n.Headerbar.blue .Headerbar-button[disabled],\n.Headerbar.primary .Headerbar-button[disabled],\n.Headerbar.light-blue .Headerbar-button[disabled],\n.Headerbar.yellow .Headerbar-button[disabled],\n.Headerbar.orange .Headerbar-button[disabled],\n.Headerbar.red .Headerbar-button[disabled],\n.Headerbar.pink .Headerbar-button[disabled],\n.Headerbar.purple .Headerbar-button[disabled] {\n  color: rgba(255, 255, 255, 0.4);\n}\n.Headerbar.green {\n  background-color: #4cd964;\n}\n.Headerbar.blue {\n  background-color: #007aff;\n}\n.Headerbar.primary {\n  background-color: #f44336;\n}\n.Headerbar.light-blue {\n  background-color: #5ac8fa;\n}\n.Headerbar.yellow {\n  background-color: #ffcc00;\n}\n.Headerbar.orange {\n  background-color: #ff9500;\n}\n.Headerbar.red {\n  background-color: #f44336;\n}\n.Headerbar.pink {\n  background-color: #ff2d55;\n}\n.Headerbar.purple {\n  background-color: #5856d6;\n}\n.Headerbar.transparent {\n  background: none;\n}\n.Headerbar.yellow {\n  color: #222222;\n}\n.Headerbar.yellow .Headerbar-button {\n  color: rgba(0, 0, 0, 0.8);\n}\n.Headerbar.yellow .Headerbar-button.disabled,\n.Headerbar.yellow .Headerbar-button[disabled] {\n  color: rgba(0, 0, 0, 0.4);\n}\n.Headerbar-button {\n  background: none transparent;\n  border: 0 none;\n  color: #f44336;\n  cursor: pointer;\n  left: 0;\n  line-height: 44px;\n  height: 44px;\n  padding-left: 10px;\n  padding-right: 10px;\n  position: absolute;\n  text-align: center;\n  text-decoration: none;\n  top: 0;\n  -webkit-appearance: none;\n  z-index: 2;\n}\n.Headerbar-button.is-primary {\n  font-weight: 500;\n}\n.Headerbar-button.right {\n  left: auto;\n  right: 0;\n}\n.Headerbar-button:hover {\n  color: #f55a4e;\n}\n.Headerbar-button:active,\n.Headerbar-button:focus,\n.Headerbar-button.Tappable-active {\n  color: #ea1c0d;\n  outline: none;\n  -webkit-appearance: none;\n}\n.Headerbar-button.disabled,\n.Headerbar-button[disabled] {\n  color: #cccccc;\n  pointer-events: none;\n}\n.Headerbar-button:before {\n  font-size: 24px;\n  margin-right: 5px;\n  position: relative;\n  top: 3px;\n}\n.Headerbar-label {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-weight: 500;\n  line-height: 44px;\n  height: 44px;\n  min-width: 44px;\n  padding-left: 10px;\n  padding-right: 10px;\n  position: absolute;\n  text-align: center;\n  width: 100%;\n}\n.Headerbar > .Toggle {\n  margin: 8px;\n}\n.Subheader > .Toggle {\n  margin: 0 8px;\n}\n.Headerbar-form {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  line-height: 1;\n  padding: 8px 0;\n}\n.Headerbar + .Headerbar-form {\n  padding-top: 0;\n}\n.Headerbar-form-field {\n  padding: 0 8px;\n  position: relative;\n}\n.Headerbar-form-field:only-child,\n.Headerbar-form-field.is-primary {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n}\n.Headerbar-form-field + .Headerbar-form-field {\n  padding-left: 0;\n}\n.Headerbar-form-input {\n  -webkit-transition: background-color 200ms linear;\n  -o-transition: background-color 200ms linear;\n  transition: background-color 200ms linear;\n  background: rgba(0, 0, 0, 0.06);\n  border: 0;\n  border-radius: 5px;\n  color: black;\n  font-size: 15px;\n  height: 28px;\n  line-height: normal;\n  margin: 0;\n  outline: none;\n  padding: 8px 16px;\n  width: 100%;\n  -webkit-appearance: none;\n}\n.Headerbar-form-input::-moz-placeholder {\n  color: #999999;\n  opacity: 1;\n}\n.Headerbar-form-input:-ms-input-placeholder {\n  color: #999999;\n}\n.Headerbar-form-input::-webkit-input-placeholder {\n  color: #999999;\n}\n.Headerbar-form-input:active {\n  background: rgba(0, 0, 0, 0.12);\n}\n/* helper mixin */\n/* actual styles */\n.Headerbar-form-icon .Headerbar-form-input {\n  padding-left: 24px;\n}\n.Headerbar-form-icon:before {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  color: #999999;\n  font-size: 16px;\n  height: 100%;\n  padding: 0 8px;\n  position: absolute;\n  left: 8px;\n  right: auto;\n  top: 0;\n  pointer-events: none;\n}\n.Headerbar-form-clear {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  align-items: center;\n  color: #999999;\n  font-size: 16px;\n  height: 100%;\n  padding: 0 8px;\n  position: absolute;\n  left: auto;\n  right: 8px;\n  top: 0;\n}\n.Headerbar-form-clear.Tappable-active {\n  color: #999999;\n}\n.Keypad {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-flow: row wrap;\n  -ms-flex-flow: row wrap;\n  flex-flow: row wrap;\n  -webkit-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  -webkit-transition: -webkit-transform 200ms cubic-bezier(0.77, 0, 0.175, 1);\n  -moz-transition: -moz-transform 200ms cubic-bezier(0.77, 0, 0.175, 1);\n  -o-transition: -o-transform 200ms cubic-bezier(0.77, 0, 0.175, 1);\n  transition: transform 200ms cubic-bezier(0.77, 0, 0.175, 1);\n  bottom: 0;\n  font-size: 90%;\n  height: 40%;\n  left: 0;\n  right: 0;\n  position: fixed;\n}\n@media (min-height: 569px) {\n  .Keypad {\n    font-size: 100%;\n    height: 33.33%;\n  }\n}\n.Keypad.is-stowed {\n  -webkit-transform: translate3d(0, 100%, 0);\n  transform: translate3d(0, 100%, 0);\n}\n.Keypad-cell {\n  width: 33.33%;\n  height: 25%;\n  padding-top: 1px;\n  padding-left: 1px;\n}\n.Keypad-cell:nth-child(3n+1) {\n  padding-left: 0;\n}\n.Keypad-button {\n  width: 100%;\n  height: 100%;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  line-height: 1;\n  position: relative;\n  text-align: center;\n  border: none;\n  background: none;\n  outline: none;\n  -webkit-appearance: none;\n}\n.Keypad-button.is-disabled {\n  pointer-events: none;\n}\n.Keypad-button.is-disabled .Keypad-button-primary-label,\n.Keypad-button.is-disabled .Keypad-button-secondary-label,\n.Keypad-button.is-disabled .Keypad-button-icon {\n  opacity: .3;\n}\n.Keypad-button-primary-label {\n  font-size: 1.4em;\n}\n.Keypad-button-secondary-label {\n  font-size: .8em;\n}\n.Keypad-button-icon {\n  display: block;\n  height: 35%;\n  width: 100%;\n}\n.Keypad-button-icon > svg {\n  max-height: 100%;\n  max-width: 100%;\n}\n.Keypad--default .Keypad-button {\n  background-color: #e0e0ea;\n  color: black;\n}\n.Keypad--default .Keypad-button.Tappable-active {\n  background-color: #d1d1df;\n}\n.Keypad--default .Keypad-button.is-auxiliary {\n  background-color: #c2c2d5;\n}\n.Keypad--default .Keypad-button.is-auxiliary.Tappable-active {\n  background-color: #b3b3ca;\n}\n.Keypad--black-translucent .Keypad-button {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: white;\n}\n.Keypad--black-translucent .Keypad-button.Tappable-active {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.Keypad--black-translucent .Keypad-button.is-auxiliary {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n.Keypad--black-translucent .Keypad-button.is-auxiliary.Tappable-active {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.Keypad--white-translucent .Keypad-button {\n  background-color: rgba(255, 255, 255, 0.45);\n  color: black;\n}\n.Keypad--white-translucent .Keypad-button.Tappable-active {\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.Keypad--white-translucent .Keypad-button.is-auxiliary {\n  background-color: rgba(255, 255, 255, 0.25);\n}\n.Keypad--white-translucent .Keypad-button.is-auxiliary.Tappable-active {\n  background-color: rgba(255, 255, 255, 0.15);\n}\n.Modal {\n  -webkit-transition: all 300ms;\n  -o-transition: all 300ms;\n  transition: all 300ms;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  position: fixed;\n  opacity: 0;\n  visibility: hidden;\n  z-index: 1000;\n}\n.Modal.visible {\n  visibility: visible;\n  opacity: 1;\n}\n.Modal-dialog {\n  background-color: rgba(255, 255, 255, 0.95);\n  border-radius: 8px;\n  padding: 20px;\n  position: absolute;\n  z-index: 1200;\n}\n.Modal-dialog.default {\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  -o-transform: translateY(-50%);\n  transform: translateY(-50%);\n  margin-left: -135px;\n  left: 50%;\n  top: 50%;\n  width: 270px;\n}\n.Modal-backdrop {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: black;\n  opacity: .33;\n  pointer-events: none;\n  position: fixed;\n  z-index: 1100;\n}\n.Modal-header {\n  font-weight: 500;\n}\n.Modal-text {\n  font-size: 15px;\n}\n.Modal-icon {\n  width: 46px;\n  height: 46px;\n  display: inline-block;\n  line-height: 46px;\n  margin-bottom: 5px;\n}\n.Modal-icon:before {\n  font-size: 46px;\n}\n.Modal-icon.muted {\n  color: #999999;\n}\n.Modal-icon.primary {\n  color: #f44336;\n}\n.Modal-icon.success {\n  color: #4cd964;\n}\n.Modal-icon.warning {\n  color: #ffcc00;\n}\n.Modal-icon.danger {\n  color: #e74c3c;\n}\n.Modal-loading {\n  text-align: center;\n}\n.Modal-loading.Modal-dialog {\n  -webkit-transform: none;\n  -ms-transform: none;\n  -o-transform: none;\n  transform: none;\n  border-radius: 16px;\n  left: 50%;\n  margin: -60px 0 0 -60px;\n  padding: 15px;\n  top: 50%;\n  width: 120px;\n}\n.Modal-loading .Modal-icon {\n  -webkit-animation: spin 1s linear infinite;\n  -o-animation: spin 1s linear infinite;\n  animation: spin 1s linear infinite;\n}\n.Modal-actions {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  border-top: 1px solid #d1d1df;\n  margin: 20px -20px -20px;\n}\n.Modal-action {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  color: #f44336;\n  padding: 10px;\n  text-align: center;\n}\n.Modal-action + .Modal-action {\n  border-left: 1px solid #d1d1df;\n}\n.Modal-action:first-child {\n  border-bottom-left-radius: 8px;\n}\n.Modal-action:last-child {\n  border-bottom-right-radius: 8px;\n}\n.Modal-action.Tappable-active {\n  background-color: #efeff4;\n}\n.Modal-action-primary {\n  font-weight: 500;\n}\n.panel {\n  position: relative;\n  background-color: white;\n  margin-bottom: 34px;\n}\n.panel:after,\n.panel:before {\n  width: 100%;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.17);\n  content: \" \";\n  left: 0;\n  position: absolute;\n}\n.panel:before {\n  top: -1px;\n}\n.panel:after {\n  bottom: -1px;\n}\n@media (-webkit-min-device-pixel-ratio: 2) {\n  .panel:after,\n  .panel:before {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    -o-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n  .panel:before {\n    -webkit-transform-origin: 0 bottom;\n    -moz-transform-origin: 0 bottom;\n    -ms-transform-origin: 0 bottom;\n    transform-origin: 0 bottom;\n  }\n  .panel:after {\n    -webkit-transform-origin: 0 top;\n    -moz-transform-origin: 0 top;\n    -ms-transform-origin: 0 top;\n    transform-origin: 0 top;\n  }\n}\n.view-inner > .panel {\n  border-radius: 8px;\n  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.06), 0 0 0 1px rgba(0, 0, 0, 0.06);\n}\n.panel--first {\n  margin-top: 34px;\n}\n.panel-header {\n  color: #4d4d4d;\n  font-size: 80%;\n  line-height: 1;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n  margin-top: 34px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.panel-info {\n  color: #4d4d4d;\n  font-size: 80%;\n  line-height: 1.1;\n  margin-bottom: 34px;\n  margin-top: -17px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.panel-inner {\n  padding: 12px 15px;\n}\n.panel-inner + .panel-inner {\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n}\n.panel-inner.is-first {\n  border-top-right-radius: 8px;\n  border-top-left-radius: 8px;\n}\n.panel-inner.is-last {\n  border-bottom-right-radius: 8px;\n  border-bottom-left-radius: 8px;\n}\n.Passcode {\n  margin: 0 auto;\n  max-width: 190px;\n  padding-top: 20%;\n  text-align: center;\n  width: 70%;\n}\n.Passcode-fields {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.Passcode-field {\n  -webkit-flex: 1 0 0;\n  -ms-flex: 1 0 0;\n  flex: 1 0 0;\n  margin: 4px;\n  position: relative;\n}\n.Passcode-input {\n  background: none;\n  border: none;\n  border-radius: 0;\n  box-shadow: inset 0 -4px 0 currentColor;\n  bottom: 0;\n  height: 60px;\n  left: 4px;\n  right: 4px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n}\n.Passcode-input:after {\n  width: 16px;\n  height: 16px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  -o-transform: translateY(-50%);\n  transform: translateY(-50%);\n  background-color: currentColor;\n  border-radius: 50%;\n  content: \"\";\n  display: none;\n  margin: 0 auto;\n  top: 50%;\n}\n.Passcode-input,\n.Passcode-input:hover,\n.Passcode-input:active,\n.Passcode-input:focus {\n  outline: none;\n  -webkit-appearance: none;\n}\n.Passcode-input.has-value {\n  box-shadow: none;\n}\n.Passcode-input.has-value:after {\n  display: block;\n}\n.Toggle {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  font-size: 13px;\n}\n.Toggle-item {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  background-color: white;\n  border: none;\n  box-shadow: 0 0 0 1px #f44336;\n  color: #f44336;\n  cursor: pointer;\n  display: table-cell;\n  line-height: 29px;\n  text-align: center;\n}\n.Toggle-item:first-child {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.Toggle-item:last-child {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.Toggle-item.Tappable-active {\n  background-color: #eeeeee;\n}\n.Toggle > .Toggle-item,\n.Toggle.blue > .Toggle-item,\n.Toggle.primary > .Toggle-item {\n  box-shadow: 0 0 0 1px #f44336;\n  color: #f44336;\n}\n.Toggle > .Toggle-item.active,\n.Toggle.blue > .Toggle-item.active,\n.Toggle.primary > .Toggle-item.active {\n  background-color: #f44336;\n  color: white;\n}\n.Toggle.muted > .Toggle-item {\n  box-shadow: 0 0 0 1px #999999;\n  color: #999999;\n}\n.Toggle.muted > .Toggle-item.active {\n  background-color: #999999;\n  color: white;\n}\n.Toggle.green > .Toggle-item {\n  box-shadow: 0 0 0 1px #4cd964;\n  color: #4cd964;\n}\n.Toggle.green > .Toggle-item.active {\n  background-color: #4cd964;\n  color: white;\n}\n.Toggle.light-blue > .Toggle-item {\n  box-shadow: 0 0 0 1px #5ac8fa;\n  color: #5ac8fa;\n}\n.Toggle.light-blue > .Toggle-item.active {\n  background-color: #5ac8fa;\n  color: white;\n}\n.Toggle.yellow > .Toggle-item {\n  box-shadow: 0 0 0 1px #ffcc00;\n  color: #ffcc00;\n}\n.Toggle.yellow > .Toggle-item.active {\n  background-color: #ffcc00;\n  color: white;\n}\n.Toggle.orange > .Toggle-item {\n  box-shadow: 0 0 0 1px #ff9500;\n  color: #ff9500;\n}\n.Toggle.orange > .Toggle-item.active {\n  background-color: #ff9500;\n  color: white;\n}\n.Toggle.red > .Toggle-item {\n  box-shadow: 0 0 0 1px #f44336;\n  color: #f44336;\n}\n.Toggle.red > .Toggle-item.active {\n  background-color: #f44336;\n  color: white;\n}\n.Toggle.pink > .Toggle-item {\n  box-shadow: 0 0 0 1px #ff2d55;\n  color: #ff2d55;\n}\n.Toggle.pink > .Toggle-item.active {\n  background-color: #ff2d55;\n  color: white;\n}\n.Toggle.purple > .Toggle-item {\n  box-shadow: 0 0 0 1px #5856d6;\n  color: #5856d6;\n}\n.Toggle.purple > .Toggle-item.active {\n  background-color: #5856d6;\n  color: white;\n}\n/* \n *\n * material-ui \n *\n */\n/*! normalize.css v3.0.2 | MIT License | git.io/normalize */\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS text size adjust after orientation change, without disabling\n *    user zoom.\n */\nhtml {\n  font-family: sans-serif;\n  /* 1 */\n  -ms-text-size-adjust: 100%;\n  /* 2 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n}\n/**\n * Remove default margin.\n */\nbody {\n  margin: 0;\n}\n/* HTML5 display definitions\n   ========================================================================== */\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  /* 1 */\n  vertical-align: baseline;\n  /* 2 */\n}\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.\n */\n[hidden],\ntemplate {\n  display: none;\n}\n/* Links\n   ========================================================================== */\n/**\n * Remove the gray background color from active links in IE 10.\n */\na {\n  background-color: transparent;\n}\n/**\n * Improve readability when focused and also mouse hovered in all browsers.\n */\na:active,\na:hover {\n  outline: 0;\n}\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\nb,\nstrong {\n  font-weight: bold;\n}\n/**\n * Address styling not present in Safari and Chrome.\n */\ndfn {\n  font-style: italic;\n}\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n/**\n * Address styling not present in IE 8/9.\n */\nmark {\n  background: #ff0;\n  color: #000;\n}\n/**\n * Address inconsistent and variable font size in all browsers.\n */\nsmall {\n  font-size: 80%;\n}\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsup {\n  top: -0.5em;\n}\nsub {\n  bottom: -0.25em;\n}\n/* Embedded content\n   ========================================================================== */\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\nimg {\n  border: 0;\n}\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\nsvg:not(:root) {\n  overflow: hidden;\n}\n/* Grouping content\n   ========================================================================== */\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\nfigure {\n  margin: 1em 40px;\n}\n/**\n * Address differences between Firefox and other browsers.\n */\nhr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n/**\n * Contain overflow in all browsers.\n */\npre {\n  overflow: auto;\n}\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n/* Forms\n   ========================================================================== */\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n  margin: 0;\n  /* 3 */\n}\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\nbutton {\n  overflow: visible;\n}\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\nbutton,\nselect {\n  text-transform: none;\n}\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  /* 2 */\n  cursor: pointer;\n  /* 3 */\n}\n/**\n * Re-set default cursor for disabled elements.\n *\n * Input types do not display default cursor if element contains styling\n * that overrides cursor.\n */\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default !important;\n}\n/**\n * Remove inner padding and border in Firefox 4+.\n */\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\ninput {\n  line-height: normal;\n}\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome\n *    (include `-moz` to future-proof).\n */\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  -moz-box-sizing: content-box;\n  -webkit-box-sizing: content-box;\n  /* 2 */\n  box-sizing: content-box;\n}\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n/**\n * Define consistent border, margin, and padding.\n */\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\nlegend {\n  border: 0;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\ntextarea {\n  overflow: auto;\n}\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\noptgroup {\n  font-weight: bold;\n}\n/* Tables\n   ========================================================================== */\n/**\n * Remove most spacing between table cells.\n */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ntd,\nth {\n  padding: 0;\n}\n/*------------------------------------*\n  RESET\n*------------------------------------*/\nbody,\ndiv,\ndl,\ndt,\ndd,\nul,\nol,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\npre,\nform,\nfieldset,\ninput,\ntextarea,\np,\nblockquote,\nth,\ntd {\n  margin: 0;\n  padding: 0;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\nfieldset,\nimg {\n  border: 0;\n}\naddress,\ncaption,\ncite,\ndfn,\nth,\nvar {\n  font-style: normal;\n  font-weight: normal;\n}\ncaption,\nth {\n  text-align: left;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: 100%;\n  font-weight: normal;\n}\nq:before,\nq:after {\n  content: '';\n}\nabbr,\nacronym {\n  border: 0;\n}\n.no-wrap {\n  white-space: nowrap;\n}\n* {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n*:before,\n*:after {\n  box-sizing: border-box;\n}\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n}\nhtml {\n  -webkit-font-smoothing: antialiased;\n  color: rgba(0, 0, 0, 0.87);\n  font-family: 'Roboto', sans-serif;\n  background-color: #ffffff;\n}\nhr {\n  border: none;\n  border-bottom: solid 1px #e0e0e0;\n}\n.mui-text-full-black {\n  color: #000000;\n}\n.mui-text-dark-black {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-text-light-black {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mui-text-min-black {\n  color: rgba(0, 0, 0, 0.26);\n}\n.mui-text-full-white {\n  color: #ffffff;\n}\n.mui-text-dark-white {\n  color: rgba(255, 255, 255, 0.87);\n}\n.mui-text-light-white {\n  color: rgba(255, 255, 255, 0.54);\n}\n.mui-font-weight-light {\n  font-weight: 300;\n}\n.mui-font-weight-normal {\n  font-weight: 400;\n}\n.mui-font-weight-medium {\n  font-weight: 500;\n}\n/* Type Styles */\n.mui-font-style-display-4 {\n  font-size: 112px;\n  line-height: 128px;\n  letter-spacing: -7px;\n  padding-top: 17px;\n  margin-bottom: 15px;\n  font-weight: 300;\n  color: rgba(0, 0, 0, 0.54);\n}\n.mui-font-style-display-3 {\n  font-size: 56px;\n  line-height: 64px;\n  letter-spacing: -2px;\n  padding-top: 8px;\n  margin-bottom: 28px;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.54);\n}\n.mui-font-style-display-2 {\n  font-size: 45px;\n  line-height: 48px;\n  margin-bottom: 11px;\n  letter-spacing: -1px;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.54);\n}\n.mui-font-style-display-1 {\n  font-size: 34px;\n  line-height: 40px;\n  padding-top: 8px;\n  margin-bottom: 12px;\n  letter-spacing: -1px;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.54);\n}\n.mui-font-style-headline {\n  font-size: 24px;\n  line-height: 32px;\n  padding-top: 16px;\n  margin-bottom: 12px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-title {\n  font-size: 20px;\n  line-height: 28px;\n  padding-top: 19px;\n  margin-bottom: 13px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-subhead-2 {\n  font-size: 15px;\n  line-height: 28px;\n  padding-top: 2px;\n  margin-bottom: 10px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-subhead-1 {\n  font-size: 15px;\n  line-height: 28px;\n  padding-top: 2px;\n  margin-bottom: 10px;\n  letter-spacing: 0;\n  font-weight: 400;\n  line-height: 24px;\n  padding-top: 3px;\n  margin-bottom: 13px;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-body-2 {\n  font-size: 13px;\n  line-height: 24px;\n  padding-top: 4px;\n  margin-bottom: 12px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-body-1 {\n  font-size: 13px;\n  line-height: 20px;\n  padding-top: 6px;\n  margin-bottom: 14px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-caption {\n  font-size: 12px;\n  line-height: 20px;\n  padding-top: 6px;\n  margin-bottom: 14px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.54);\n}\n.mui-font-style-menu {\n  font-size: 13px;\n  line-height: 20px;\n  padding-top: 6px;\n  margin-bottom: 14px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-font-style-button {\n  font-size: 14px;\n  line-height: 20px;\n  padding-top: 5px;\n  margin-bottom: 15px;\n  letter-spacing: 0;\n  text-transform: uppercase;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\n/* General HTML Typography */\nbody {\n  font-size: 13px;\n  line-height: 20px;\n}\nh1 {\n  font-size: 45px;\n  line-height: 48px;\n  margin-bottom: 11px;\n  letter-spacing: -1px;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.54);\n}\nh2 {\n  font-size: 34px;\n  line-height: 40px;\n  padding-top: 8px;\n  margin-bottom: 12px;\n  letter-spacing: -1px;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.54);\n}\nh3 {\n  font-size: 24px;\n  line-height: 32px;\n  padding-top: 16px;\n  margin-bottom: 12px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.87);\n}\nh4 {\n  font-size: 20px;\n  line-height: 28px;\n  padding-top: 19px;\n  margin-bottom: 13px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\nh5 {\n  font-size: 15px;\n  line-height: 28px;\n  padding-top: 2px;\n  margin-bottom: 10px;\n  letter-spacing: 0;\n  font-weight: 400;\n  line-height: 24px;\n  padding-top: 3px;\n  margin-bottom: 13px;\n  color: rgba(0, 0, 0, 0.87);\n}\nh6 {\n  font-size: 13px;\n  line-height: 24px;\n  padding-top: 4px;\n  margin-bottom: 12px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\np {\n  font-size: 13px;\n  line-height: 20px;\n  padding-top: 6px;\n  margin-bottom: 14px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.87);\n}\nhr {\n  margin-top: 0;\n  margin-bottom: 18px;\n}\n.mui-predefined-layout-1 .mui-app-content-canvas {\n  padding-top: 64px;\n}\n.mui-predefined-layout-1 .mui-app-bar {\n  position: fixed;\n  height: 64px;\n}\n.mui-key-width-1 {\n  width: 64px;\n}\n.mui-key-width-2 {\n  width: 128px;\n}\n.mui-key-width-3 {\n  width: 192px;\n}\n.mui-key-width-4 {\n  width: 256px;\n}\n.mui-key-width-5 {\n  width: 320px;\n}\n.mui-key-width-6 {\n  width: 384px;\n}\n.mui-key-width-7 {\n  width: 448px;\n}\n.mui-key-width-8 {\n  width: 512px;\n}\n.mui-key-width-9 {\n  width: 576px;\n}\n.mui-key-width-10 {\n  width: 640px;\n}\n.mui-key-height-1 {\n  height: 64px;\n}\n.mui-key-height-2 {\n  height: 128px;\n}\n.mui-key-height-3 {\n  height: 192px;\n}\n.mui-key-height-4 {\n  height: 256px;\n}\n.mui-key-height-5 {\n  height: 320px;\n}\n.mui-key-height-6 {\n  height: 384px;\n}\n.mui-key-height-7 {\n  height: 448px;\n}\n.mui-key-height-8 {\n  height: 512px;\n}\n.mui-key-height-9 {\n  height: 576px;\n}\n.mui-key-height-10 {\n  height: 640px;\n}\n.mui-app-bar {\n  width: 100%;\n  min-height: 64px;\n  background-color: #00bcd4;\n  z-index: 5;\n}\n.mui-app-bar .mui-paper-container {\n  padding-left: 24px;\n  padding-right: 24px;\n}\n.mui-app-bar .mui-icon-button {\n  margin-top: 8px;\n}\n.mui-app-bar .mui-icon-button * {\n  fill: rgba(255, 255, 255, 0.87);\n  color: rgba(255, 255, 255, 0.87);\n}\n.mui-app-bar .mui-app-bar-title {\n  font-size: 24px;\n  line-height: 32px;\n  padding-top: 16px;\n  margin-bottom: 12px;\n  letter-spacing: 0;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.87);\n  color: rgba(255, 255, 255, 0.87);\n  padding-top: 0;\n  line-height: 64px;\n  float: left;\n}\n.mui-app-bar .mui-app-bar-navigation-icon-button {\n  float: left;\n  margin-right: 8px;\n  margin-left: -16px;\n}\n.mui-card {\n  background-color: #ffffff;\n  padding: 24px;\n}\n.mui-card .mui-card-toolbar {\n  margin-top: -24px;\n  margin-left: -24px;\n  margin-right: -24px;\n  margin-bottom: 24px;\n  line-height: 56px;\n  height: 56px;\n  padding-left: 24px;\n  padding-right: 24px;\n  font-size: 13px;\n  line-height: 20px;\n  padding-top: 6px;\n  margin-bottom: 14px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-checkbox .mui-checkbox-icon {\n  height: 24px;\n  width: 24px;\n  margin-right: 16px;\n}\n.mui-checkbox .mui-checkbox-icon .mui-checkbox-check {\n  position: absolute;\n  opacity: 0;\n  transform: scale(0);\n  transform-origin: 50% 50%;\n  transition: opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms;\n}\n.mui-checkbox .mui-checkbox-icon .mui-checkbox-check * {\n  fill: #00bcd4;\n}\n.mui-checkbox .mui-checkbox-icon .mui-checkbox-box {\n  position: absolute;\n}\n.mui-checkbox .mui-checkbox-icon .mui-checkbox-box * {\n  fill: rgba(0, 0, 0, 0.87);\n  transition: all 2s cubic-bezier(0.23, 1, 0.32, 1) 200ms;\n}\n.mui-checkbox.mui-is-switched .mui-checkbox-icon .mui-checkbox-check {\n  transition: all 0.45s cubic-bezier(0.23, 1, 0.32, 1) 0s;\n  opacity: 1;\n  transform: scale(1);\n  transform-origin: 50% 50%;\n  transition: opacity 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 800ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-checkbox.mui-is-switched .mui-checkbox-icon .mui-checkbox-box {\n  transition: all 100s cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-checkbox.mui-is-switched .mui-checkbox-icon .mui-checkbox-box * {\n  fill: #00bcd4;\n}\n.mui-checkbox.mui-is-disabled .mui-checkbox-icon .mui-checkbox-check *,\n.mui-checkbox.mui-is-disabled .mui-checkbox-icon .mui-checkbox-box * {\n  fill: rgba(0, 0, 0, 0.3);\n}\n.mui-checkbox.mui-is-required .mui-checkbox-icon .mui-checkbox-box * {\n  fill: #00bcd4;\n}\n.mui-date-picker-calendar {\n  font-size: 12px;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title {\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.5);\n  line-height: 12px;\n  padding: 0 14px;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:before,\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  clear: both;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:before,\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  clear: both;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:before,\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  clear: both;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:before,\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title:after {\n  clear: both;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-week-title-day {\n  list-style: none;\n  float: left;\n  width: 32px;\n  text-align: center;\n  margin: 0 2px;\n}\n.mui-date-picker-calendar .mui-date-picker-calendar-container {\n  transition: height 150ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-date-picker-calendar.mui-is-4week .mui-date-picker-calendar-container {\n  height: 228px;\n}\n.mui-date-picker-calendar.mui-is-5week .mui-date-picker-calendar-container {\n  height: 268px;\n}\n.mui-date-picker-calendar.mui-is-6week .mui-date-picker-calendar-container {\n  height: 308px;\n}\n.mui-is-landscape .mui-date-picker-calendar:before,\n.mui-is-landscape .mui-date-picker-calendar:after {\n  content: \" \";\n  display: table;\n}\n.mui-is-landscape .mui-date-picker-calendar:after {\n  clear: both;\n}\n.mui-is-landscape .mui-date-picker-calendar:before,\n.mui-is-landscape .mui-date-picker-calendar:after {\n  content: \" \";\n  display: table;\n}\n.mui-is-landscape .mui-date-picker-calendar:after {\n  clear: both;\n}\n.mui-is-landscape .mui-date-picker-calendar:before,\n.mui-is-landscape .mui-date-picker-calendar:after {\n  content: \" \";\n  display: table;\n}\n.mui-is-landscape .mui-date-picker-calendar:after {\n  clear: both;\n}\n.mui-is-landscape .mui-date-picker-calendar:before,\n.mui-is-landscape .mui-date-picker-calendar:after {\n  content: \" \";\n  display: table;\n}\n.mui-is-landscape .mui-date-picker-calendar:after {\n  clear: both;\n}\n.mui-is-landscape .mui-date-picker-calendar-date-display {\n  width: 280px;\n  height: 100%;\n  float: left;\n}\n.mui-is-landscape .mui-date-picker-calendar-container {\n  width: 280px;\n  float: right;\n}\n.mui-date-picker-calendar-month {\n  line-height: 32px;\n  text-align: center;\n  padding: 8px 14px 0 14px;\n  background-color: #ffffff;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:before,\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  clear: both;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:before,\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  clear: both;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:before,\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  clear: both;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:before,\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  content: \" \";\n  display: table;\n}\n.mui-date-picker-calendar-month .mui-date-picker-calendar-month-week:after {\n  clear: both;\n}\n.mui-date-picker-calendar-toolbar {\n  height: 48px;\n  position: relative;\n}\n.mui-date-picker-calendar-toolbar .mui-date-picker-calendar-toolbar-title {\n  line-height: 48px;\n  font-size: 14px;\n  text-align: center;\n  font-weight: 500;\n}\n.mui-date-picker-calendar-toolbar .mui-date-picker-calendar-toolbar-button-left {\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n.mui-date-picker-calendar-toolbar .mui-date-picker-calendar-toolbar-button-right {\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.mui-date-picker-date-display {\n  text-align: center;\n  position: relative;\n}\n.mui-date-picker-date-display .mui-date-picker-date-display-dow {\n  font-size: 13px;\n  height: 32px;\n  line-height: 32px;\n  background-color: #0097a7;\n  color: #ffffff;\n  border-radius: 2px 2px 0 0;\n}\n.mui-date-picker-date-display .mui-date-picker-date-display-date {\n  padding: 16px 0;\n  background-color: #00bcd4;\n  color: #ffffff;\n}\n.mui-date-picker-date-display .mui-date-picker-date-display-month,\n.mui-date-picker-date-display .mui-date-picker-date-display-year {\n  font-size: 22px;\n  line-height: 24px;\n  height: 24px;\n  text-transform: uppercase;\n}\n.mui-date-picker-date-display .mui-date-picker-date-display-day {\n  margin: 6px 0;\n  line-height: 58px;\n  height: 58px;\n  font-size: 58px;\n}\n.mui-date-picker-date-display .mui-date-picker-date-display-year {\n  color: rgba(255, 255, 255, 0.7);\n}\n.mui-is-landscape .mui-date-picker-date-display * {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-is-landscape .mui-date-picker-date-display-dow {\n  border-radius: 2px 0 0 0;\n}\n.mui-is-landscape .mui-date-picker-date-display-date {\n  padding: 24px 0;\n}\n.mui-is-landscape .mui-date-picker-date-display-day {\n  font-size: 76px;\n  line-height: 76px;\n  height: 76px;\n}\n.mui-is-landscape .mui-date-picker-date-display-month,\n.mui-is-landscape .mui-date-picker-date-display-year {\n  font-size: 26px;\n  line-height: 26px;\n  height: 26px;\n}\n.mui-is-landscape .mui-is-5week .mui-date-picker-date-display-date {\n  padding: 30px 0;\n}\n.mui-is-landscape .mui-is-5week .mui-date-picker-date-display-day {\n  margin: 24px 0;\n}\n.mui-is-landscape .mui-is-6week .mui-date-picker-date-display-date {\n  padding: 50px 0;\n}\n.mui-is-landscape .mui-is-6week .mui-date-picker-date-display-day {\n  margin: 24px 0;\n}\n.mui-date-picker-dialog {\n  font-size: 14px;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-date-picker-dialog .mui-date-picker-dialog-window.mui-dialog-window-contents {\n  width: 280px;\n}\n.mui-is-landscape .mui-date-picker-dialog-window.mui-dialog-window-contents {\n  width: 560px;\n}\n.mui-date-picker-day-button {\n  position: relative;\n  float: left;\n  width: 36px;\n  padding: 4px 2px;\n}\n.mui-date-picker-day-button .mui-date-picker-day-button-select {\n  position: absolute;\n  background-color: #0097a7;\n  height: 32px;\n  width: 32px;\n  opacity: 0;\n  border-radius: 50%;\n  transform: scale(0);\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-date-picker-day-button .mui-date-picker-day-button-label {\n  position: relative;\n}\n.mui-date-picker-day-button.mui-is-selected .mui-date-picker-day-button-label {\n  color: #ffffff;\n}\n.mui-date-picker-day-button.mui-is-selected .mui-date-picker-day-button-select {\n  opacity: 1;\n  transform: scale(1);\n}\n.mui-date-picker-day-button.mui-is-current-date {\n  color: #00bcd4;\n}\n.mui-dialog-window {\n  position: fixed;\n  z-index: 10;\n  top: 0px;\n  left: -10000px;\n  width: 100%;\n  height: 100%;\n  transition: left 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms;\n}\n.mui-dialog-window .mui-dialog-window-contents {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  position: relative;\n  width: 75%;\n  max-width: 768px;\n  margin: 0 auto;\n  z-index: 10;\n  background: #ffffff;\n  opacity: 0;\n}\n.mui-dialog-window .mui-dialog-window-actions {\n  padding: 8px;\n  margin-bottom: 8px;\n  width: 100%;\n  text-align: right;\n}\n.mui-dialog-window .mui-dialog-window-actions .mui-dialog-window-action {\n  margin-right: 8px;\n}\n.mui-dialog-window.mui-is-shown {\n  left: 0px;\n  transition: left 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-dialog-window.mui-is-shown .mui-dialog-window-contents {\n  opacity: 1;\n  top: 0px;\n  transform: translate3d(0, 64px, 0);\n}\n.mui-dialog .mui-dialog-title {\n  padding: 24px 24px 0 24px;\n  margin-bottom: 0;\n}\n.mui-dialog .mui-dialog-content {\n  padding: 24px;\n}\n.mui-drop-down-icon {\n  display: inline-block;\n  width: 48px !important;\n  position: relative;\n  height: 56px;\n  font-size: 15px;\n  cursor: pointer;\n}\n.mui-drop-down-icon.mui-open .mui-icon-highlight {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.mui-drop-down-icon.mui-open .mui-menu-control .mui-menu-control-bg,\n.mui-drop-down-icon.mui-open .mui-menu-control:hover .mui-menu-control-bg {\n  opacity: 0;\n}\n.mui-drop-down-icon.mui-open .mui-menu-control .mui-menu-label,\n.mui-drop-down-icon.mui-open .mui-menu-control:hover .mui-menu-label {\n  top: 28px;\n  opacity: 0;\n}\n.mui-drop-down-icon.mui-open .mui-menu {\n  opacity: 1;\n}\n.mui-drop-down-icon .mui-menu {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  right: -14px !important;\n  top: 9px !important;\n}\n.mui-drop-down-icon .mui-menu .mui-menu-item {\n  padding-right: 56px;\n  height: 32px;\n  line-height: 32px;\n}\n.mui-drop-down-menu {\n  position: relative;\n  display: inline-block;\n  height: 56px;\n  font-size: 15px;\n}\n.mui-drop-down-menu * {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-drop-down-menu.mui-open .mui-menu-control .mui-menu-control-bg,\n.mui-drop-down-menu.mui-open .mui-menu-control:hover .mui-menu-control-bg {\n  opacity: 0;\n}\n.mui-drop-down-menu.mui-open .mui-menu-control .mui-menu-label,\n.mui-drop-down-menu.mui-open .mui-menu-control:hover .mui-menu-label {\n  top: 28px;\n  opacity: 0;\n}\n.mui-drop-down-menu.mui-open .mui-menu {\n  opacity: 1;\n}\n.mui-drop-down-menu .mui-menu-control {\n  cursor: pointer;\n  height: 100%;\n}\n.mui-drop-down-menu .mui-menu-control:before,\n.mui-drop-down-menu .mui-menu-control:after {\n  content: \" \";\n  display: table;\n}\n.mui-drop-down-menu .mui-menu-control:after {\n  clear: both;\n}\n.mui-drop-down-menu .mui-menu-control:before,\n.mui-drop-down-menu .mui-menu-control:after {\n  content: \" \";\n  display: table;\n}\n.mui-drop-down-menu .mui-menu-control:after {\n  clear: both;\n}\n.mui-drop-down-menu .mui-menu-control:before,\n.mui-drop-down-menu .mui-menu-control:after {\n  content: \" \";\n  display: table;\n}\n.mui-drop-down-menu .mui-menu-control:after {\n  clear: both;\n}\n.mui-drop-down-menu .mui-menu-control:before,\n.mui-drop-down-menu .mui-menu-control:after {\n  content: \" \";\n  display: table;\n}\n.mui-drop-down-menu .mui-menu-control:after {\n  clear: both;\n}\n.mui-drop-down-menu .mui-menu-control .mui-menu-control-bg {\n  background-color: #d8383b;\n  height: 100%;\n  width: 100%;\n  opacity: 0;\n}\n.mui-drop-down-menu .mui-menu-control:hover .mui-menu-control-bg {\n  opacity: 1;\n}\n.mui-drop-down-menu .mui-menu-control .mui-menu-label {\n  line-height: 56px;\n  position: absolute;\n  padding-left: 24px;\n  top: 0;\n  opacity: 1;\n}\n.mui-drop-down-menu .mui-menu-control .mui-menu-drop-down-icon {\n  position: absolute;\n  top: 16px;\n  right: 16px;\n}\n.mui-drop-down-menu .mui-menu-control .mui-menu-drop-down-icon * {\n  fill: rgba(0, 0, 0, 0.26);\n}\n.mui-drop-down-menu .mui-menu-control .mui-menu-control-underline {\n  border-top: solid 1px #e0e0e0;\n  margin: 0 24px;\n}\n.mui-drop-down-menu .mui-menu .mui-menu-item {\n  padding-right: 48px;\n  height: 32px;\n  line-height: 32px;\n  white-space: nowrap;\n}\n.mui-enhanced-button {\n  border: 0;\n  background: none;\n}\n.mui-enhanced-button:focus {\n  outline: none;\n}\n.mui-enhanced-button.mui-is-link-button {\n  display: inline-block;\n  cursor: pointer;\n  text-decoration: none;\n}\n.mui-enhanced-button.mui-is-link-button:hover {\n  text-decoration: none;\n}\n.mui-enhanced-button.mui-is-link-button.mui-is-disabled {\n  cursor: default;\n}\n.mui-enhanced-switch {\n  position: relative;\n  cursor: pointer;\n  overflow: visible;\n  display: table;\n  height: auto;\n  width: 100%;\n}\n.mui-enhanced-switch .mui-enhanced-switch-input {\n  position: absolute;\n  cursor: pointer;\n  pointer-events: all;\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  left: 0;\n}\n.mui-enhanced-switch .mui-enhanced-switch-wrap {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  float: left;\n  position: relative;\n  display: table-column;\n}\n.mui-enhanced-switch .mui-enhanced-switch-wrap .mui-touch-ripple,\n.mui-enhanced-switch .mui-enhanced-switch-wrap .mui-focus-ripple-inner {\n  width: 200%;\n  height: 200%;\n  top: -12px;\n  left: -12px;\n}\n.mui-enhanced-switch .mui-switch-label {\n  float: left;\n  position: relative;\n  display: table-column;\n  width: calc(100% - 60px);\n  line-height: 24px;\n}\n.mui-enhanced-switch.mui-is-switched .mui-focus-ripple-inner,\n.mui-enhanced-switch.mui-is-switched .mui-ripple-circle-inner {\n  background-color: rgba(0, 188, 212, 0.2);\n}\n.mui-enhanced-textarea .mui-enhanced-textarea-shadow,\n.mui-enhanced-textarea .mui-enhanced-textarea-input {\n  width: 100%;\n  resize: none;\n}\n.mui-enhanced-textarea .mui-enhanced-textarea-input {\n  overflow: hidden;\n}\n.mui-enhanced-textarea .mui-enhanced-textarea-shadow {\n  transform: scale(0);\n  position: absolute;\n}\n.mui-flat-button {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  font-size: 14px;\n  line-height: 20px;\n  padding-top: 5px;\n  margin-bottom: 15px;\n  letter-spacing: 0;\n  text-transform: uppercase;\n  font-weight: 500;\n  border-radius: 2px;\n  user-select: none;\n  position: relative;\n  overflow: hidden;\n  background-color: #ffffff;\n  color: rgba(0, 0, 0, 0.87);\n  line-height: 36px;\n  min-width: 88px;\n  padding: 0;\n  margin: 0;\n  transform: translate3d(0, 0, 0);\n}\n.mui-flat-button .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.mui-flat-button .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(0, 0, 0, 0.07);\n}\n.mui-flat-button .mui-flat-button-label {\n  position: relative;\n  padding: 0 16px;\n}\n.mui-flat-button:hover,\n.mui-flat-button.mui-is-keyboard-focused {\n  background-color: #e6e6e6;\n}\n.mui-flat-button.mui-is-disabled {\n  color: rgba(0, 0, 0, 0.3);\n}\n.mui-flat-button.mui-is-disabled:hover {\n  background-color: inherit;\n}\n.mui-flat-button.mui-is-primary {\n  color: #ff4081;\n}\n.mui-flat-button.mui-is-primary:hover,\n.mui-flat-button.mui-is-primary.mui-is-keyboard-focused {\n  background-color: #ffe3ed;\n}\n.mui-flat-button.mui-is-primary .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(255, 64, 129, 0.2);\n}\n.mui-flat-button.mui-is-primary .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(255, 64, 129, 0.2);\n}\n.mui-flat-button.mui-is-secondary {\n  color: #00bcd4;\n}\n.mui-flat-button.mui-is-secondary:hover,\n.mui-flat-button.mui-is-secondary.mui-is-keyboard-focused {\n  background-color: #defbff;\n}\n.mui-flat-button.mui-is-secondary .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(0, 188, 212, 0.2);\n}\n.mui-flat-button.mui-is-secondary .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(0, 188, 212, 0.2);\n}\n.mui-floating-action-button {\n  display: inline-block;\n}\n.mui-floating-action-button,\n.mui-floating-action-button * {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-floating-action-button .mui-floating-action-button-container {\n  position: relative;\n  height: 56px;\n  width: 56px;\n  padding: 0;\n  overflow: hidden;\n  background-color: #ff4081;\n  border-radius: 50%;\n  transform: translate3d(0, 0, 0);\n}\n.mui-floating-action-button .mui-floating-action-button-container.mui-is-disabled {\n  background-color: #e6e6e6;\n}\n.mui-floating-action-button .mui-floating-action-button-container.mui-is-disabled .mui-floating-action-button-icon {\n  color: rgba(0, 0, 0, 0.3);\n}\n.mui-floating-action-button .mui-floating-action-button-container.mui-is-disabled:hover {\n  background-color: #e6e6e6;\n}\n.mui-floating-action-button .mui-floating-action-button-container:hover,\n.mui-floating-action-button .mui-floating-action-button-container.mui-is-keyboard-focused {\n  background-color: #f30053;\n}\n.mui-floating-action-button .mui-floating-action-button-icon {\n  line-height: 56px;\n  color: #ffffff;\n  fill: #ffffff;\n}\n.mui-floating-action-button .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(255, 255, 255, 0.5);\n}\n.mui-floating-action-button .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(255, 255, 255, 0.5);\n}\n.mui-floating-action-button.mui-is-mini .mui-floating-action-button-container {\n  height: 40px;\n  width: 40px;\n}\n.mui-floating-action-button.mui-is-mini .mui-floating-action-button-icon {\n  line-height: 40px;\n}\n.mui-floating-action-button.mui-is-secondary .mui-floating-action-button-container {\n  background-color: #00bcd4;\n}\n.mui-floating-action-button.mui-is-secondary .mui-floating-action-button-container:hover,\n.mui-floating-action-button.mui-is-secondary .mui-floating-action-button-container.mui-is-keyboard-focused {\n  background-color: #00aac0;\n}\n.mui-floating-action-button.mui-is-secondary .mui-floating-action-button-icon {\n  color: #ffffff;\n}\n.mui-floating-action-button.mui-is-secondary .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.mui-floating-action-button.mui-is-secondary .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.mui-font-icon {\n  position: relative;\n  font-size: 24px;\n  display: inline-block;\n  user-select: none;\n}\n.mui-icon-button {\n  position: relative;\n  padding: 12px;\n  width: 48px;\n  height: 48px;\n}\n.mui-icon-button * {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-icon-button .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 0px 0px 1px rgba(0, 0, 0, 0.1);\n  border: solid 6px rgba(0, 0, 0, 0);\n  background-clip: padding-box;\n  animation: icon-button-focus-ripple-pulsate 1.5s ease 0s infinite;\n}\n@keyframes icon-button-focus-ripple-pulsate {\n  0%,\n  100% {\n    transform: scale(0.75);\n  }\n  50% {\n    transform: scale(1);\n  }\n}\n.mui-icon-button .mui-icon-button-tooltip {\n  margin-top: 52px;\n}\n.mui-icon-button.mui-is-disabled * {\n  color: rgba(191, 191, 191, 0.87);\n  fill: rgba(191, 191, 191, 0.87);\n}\n.mui-dark-theme .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(255, 255, 255, 0.3);\n}\n.mui-dark-theme .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(255, 255, 255, 0.3);\n  box-shadow: 0px 0px 0px 1px rgba(255, 255, 255, 0.3);\n}\n.mui-ink-bar {\n  bottom: 0;\n  display: block;\n  background-color: yellow;\n  height: 2px;\n  margin-top: -2px;\n  position: relative;\n  transition: left 1s cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-input {\n  position: relative;\n  margin-top: 24px;\n  margin-bottom: 48px;\n}\n.mui-input input,\n.mui-input textarea {\n  background-color: transparent;\n  font-size: 16px;\n  border: 0;\n  outline: none;\n  border-bottom: 1px solid lightgray;\n  padding: 0;\n  box-sizing: border-box;\n  padding-bottom: 14px;\n}\n.mui-input input[type='text'],\n.mui-input textarea[type='text'],\n.mui-input input[type='password'],\n.mui-input textarea[type='password'],\n.mui-input input[type='email'],\n.mui-input textarea[type='email'] {\n  display: block;\n  width: 320px;\n}\n.mui-input input:focus,\n.mui-input textarea:focus,\n.mui-input input.mui-is-not-empty,\n.mui-input textarea.mui-is-not-empty,\n.mui-input input:disabled[value]:not([value=\"\"]),\n.mui-input textarea:disabled[value]:not([value=\"\"]) {\n  outline: none;\n  box-shadow: none;\n}\n.mui-input input:focus ~ .mui-input-placeholder,\n.mui-input textarea:focus ~ .mui-input-placeholder,\n.mui-input input.mui-is-not-empty ~ .mui-input-placeholder,\n.mui-input textarea.mui-is-not-empty ~ .mui-input-placeholder,\n.mui-input input:disabled[value]:not([value=\"\"]) ~ .mui-input-placeholder,\n.mui-input textarea:disabled[value]:not([value=\"\"]) ~ .mui-input-placeholder {\n  color: blue;\n  font-size: 13px !important;\n  font-weight: 300;\n  top: -32px;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-input input:focus ~ .mui-input-highlight,\n.mui-input textarea:focus ~ .mui-input-highlight,\n.mui-input input.mui-is-not-empty ~ .mui-input-highlight,\n.mui-input textarea.mui-is-not-empty ~ .mui-input-highlight,\n.mui-input input:disabled[value]:not([value=\"\"]) ~ .mui-input-highlight,\n.mui-input textarea:disabled[value]:not([value=\"\"]) ~ .mui-input-highlight {\n  width: 0;\n  background-color: blue;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-input input:focus ~ .mui-input-bar::before,\n.mui-input textarea:focus ~ .mui-input-bar::before,\n.mui-input input.mui-is-not-empty ~ .mui-input-bar::before,\n.mui-input textarea.mui-is-not-empty ~ .mui-input-bar::before,\n.mui-input input:disabled[value]:not([value=\"\"]) ~ .mui-input-bar::before,\n.mui-input textarea:disabled[value]:not([value=\"\"]) ~ .mui-input-bar::before,\n.mui-input input:focus ~ .mui-input-bar::after,\n.mui-input textarea:focus ~ .mui-input-bar::after,\n.mui-input input.mui-is-not-empty ~ .mui-input-bar::after,\n.mui-input textarea.mui-is-not-empty ~ .mui-input-bar::after,\n.mui-input input:disabled[value]:not([value=\"\"]) ~ .mui-input-bar::after,\n.mui-input textarea:disabled[value]:not([value=\"\"]) ~ .mui-input-bar::after {\n  background-color: blue;\n  width: 50%;\n}\n.mui-input input:focus ~ .mui-input-description,\n.mui-input textarea:focus ~ .mui-input-description,\n.mui-input input.mui-is-not-empty ~ .mui-input-description,\n.mui-input textarea.mui-is-not-empty ~ .mui-input-description,\n.mui-input input:disabled[value]:not([value=\"\"]) ~ .mui-input-description,\n.mui-input textarea:disabled[value]:not([value=\"\"]) ~ .mui-input-description {\n  display: block;\n}\n.mui-input input:not(:focus).mui-is-not-empty + .mui-input-placeholder,\n.mui-input textarea:not(:focus).mui-is-not-empty + .mui-input-placeholder,\n.mui-input input:disabled[value]:not([value=\"\"]) + .mui-input-placeholder,\n.mui-input textarea:disabled[value]:not([value=\"\"]) + .mui-input-placeholder {\n  color: gray;\n}\n.mui-input input:not(:focus).mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input textarea:not(:focus).mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input input:disabled[value]:not([value=\"\"]) + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input textarea:disabled[value]:not([value=\"\"]) + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input input:not(:focus).mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after,\n.mui-input textarea:not(:focus).mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after,\n.mui-input input:disabled[value]:not([value=\"\"]) + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after,\n.mui-input textarea:disabled[value]:not([value=\"\"]) + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after {\n  width: 0;\n}\n.mui-input input:not(:focus).mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description,\n.mui-input textarea:not(:focus).mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description,\n.mui-input input:disabled[value]:not([value=\"\"]) + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description,\n.mui-input textarea:disabled[value]:not([value=\"\"]) + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description {\n  display: none;\n}\n.mui-input input + .mui-input-placeholder,\n.mui-input textarea + .mui-input-placeholder {\n  font-size: 16px;\n  color: gray;\n  position: absolute;\n  top: -4px;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-input .mui-input-highlight {\n  content: '';\n  position: absolute;\n  background-color: transparent;\n  opacity: 0.25;\n  height: 19px;\n  top: -3px;\n  width: 160px;\n  z-index: -1;\n}\n.mui-input .mui-input-bar {\n  position: relative;\n  display: block;\n  width: 320px;\n}\n.mui-input .mui-input-bar::before,\n.mui-input .mui-input-bar::after {\n  content: '';\n  height: 2px;\n  top: -2px;\n  width: 0;\n  position: absolute;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-input .mui-input-bar::before {\n  left: 50%;\n}\n.mui-input .mui-input-bar::after {\n  right: 50%;\n}\n.mui-input .mui-input-description {\n  display: none;\n  color: blue;\n  position: absolute;\n}\n.mui-input .mui-input-error {\n  display: none;\n  color: red;\n  position: absolute;\n}\n.mui-input.mui-error input:focus + .mui-input-placeholder,\n.mui-input.mui-error textarea:focus + .mui-input-placeholder,\n.mui-input.mui-error input.mui-is-not-empty + .mui-input-placeholder,\n.mui-input.mui-error textarea.mui-is-not-empty + .mui-input-placeholder {\n  color: red;\n}\n.mui-input.mui-error input:focus + .mui-input-placeholder + .mui-input-highlight,\n.mui-input.mui-error textarea:focus + .mui-input-placeholder + .mui-input-highlight,\n.mui-input.mui-error input.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight,\n.mui-input.mui-error textarea.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight {\n  width: 0;\n  background-color: red;\n}\n.mui-input.mui-error input:focus + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input.mui-error textarea:focus + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input.mui-error input.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input.mui-error textarea.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::before,\n.mui-input.mui-error input:focus + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after,\n.mui-input.mui-error textarea:focus + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after,\n.mui-input.mui-error input.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after,\n.mui-input.mui-error textarea.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar::after {\n  background-color: red;\n}\n.mui-input.mui-error input:focus + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description,\n.mui-input.mui-error textarea:focus + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description,\n.mui-input.mui-error input.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description,\n.mui-input.mui-error textarea.mui-is-not-empty + .mui-input-placeholder + .mui-input-highlight + .mui-input-bar + .mui-input-description {\n  display: none;\n}\n.mui-input.mui-error .mui-input-error {\n  display: block;\n}\n.mui-input.mui-floating {\n  margin-top: 24px;\n}\n.mui-input.mui-floating input:focus + .mui-input-placeholder,\n.mui-input.mui-floating textarea:focus + .mui-input-placeholder {\n  display: block;\n  color: gray;\n  font-size: 16px !important;\n  font-weight: 400;\n  top: -4px;\n}\n.mui-input.mui-floating input:focus.mui-is-not-empty + .mui-input-placeholder,\n.mui-input.mui-floating textarea:focus.mui-is-not-empty + .mui-input-placeholder {\n  display: none;\n}\n.mui-input.mui-floating input.mui-is-not-empty + .mui-input-placeholder,\n.mui-input.mui-floating textarea.mui-is-not-empty + .mui-input-placeholder {\n  display: none;\n}\n.mui-input.mui-disabled {\n  opacity: 0.4;\n}\n.mui-input::-webkit-input-placeholder {\n  position: absolute !important;\n  top: -20px !important;\n}\n.mui-left-nav .mui-left-nav-menu {\n  height: 100%;\n  position: fixed;\n  width: 256px;\n  background-color: #d8383b;\n  z-index: 10;\n  left: 0px;\n  top: 0px;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-left-nav .mui-left-nav-menu .mui-menu .mui-menu-item {\n  height: 48px;\n  line-height: 48px;\n}\n.mui-left-nav .mui-left-nav-menu .mui-menu a.mui-menu-item {\n  display: block;\n  text-decoration: none;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-left-nav.mui-closed .mui-left-nav-menu {\n  transform: translate3d(-266px, 0, 0);\n}\n.mui-menu {\n  background-color: #d8383b;\n}\n.mui-menu * {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-menu.mui-menu-hideable {\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  z-index: 1;\n}\n.mui-menu.mui-menu-hideable .mui-paper-container {\n  overflow: hidden;\n  padding: 0;\n}\n.mui-menu.mui-menu-hideable.mui-visible > .mui-paper-container {\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n.mui-menu .mui-paper-container {\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n.mui-menu .mui-subheader {\n  padding-left: 24px;\n  padding-right: 24px;\n}\n.mui-menu .mui-nested-menu-item {\n  position: relative;\n}\n.mui-menu .mui-nested-menu-item.mui-is-disabled {\n  color: rgba(0, 0, 0, 0.3);\n  cursor: default;\n}\n.mui-menu .mui-nested-menu-item.mui-open > .mui-menu {\n  opacity: 1;\n}\n.mui-menu-item {\n  cursor: pointer;\n  line-height: 48px;\n  padding-left: 24px;\n  padding-right: 24px;\n  background-color: rgba(0, 0, 0, 0);\n}\n.mui-menu-item * {\n  user-select: none;\n}\n.mui-menu-item:hover:not(.mui-is-disabled) {\n  background-color: rgba(0, 0, 0, 0.035);\n}\n.mui-menu-item .mui-menu-item-number {\n  float: right;\n  width: 24px;\n  text-align: center;\n}\n.mui-menu-item .mui-menu-item-attribute {\n  float: right;\n}\n.mui-menu-item .mui-menu-item-icon-right {\n  line-height: 48px;\n  float: right;\n}\n.mui-menu-item .mui-menu-item-icon {\n  float: left;\n  line-height: 48px;\n  margin-right: 24px;\n}\n.mui-menu-item .mui-menu-item-data {\n  display: block;\n  padding-left: 48px;\n  line-height: 32px;\n  height: 32px;\n  vertical-align: top;\n  top: -12px;\n  position: relative;\n  font-weight: 300;\n}\n.mui-menu-item .muidocs-icon-custom-arrow-drop-right {\n  margin-right: -8px;\n  color: rgba(0, 0, 0, 0.26);\n}\n.mui-menu-item .mui-toggle {\n  margin-top: 12px;\n  float: right;\n  width: 42px;\n}\n.mui-menu-item.mui-is-selected {\n  color: #ff4081;\n}\n.mui-menu-item.mui-is-disabled {\n  color: rgba(0, 0, 0, 0.3) !important;\n  cursor: default;\n}\n.mui-overlay {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  z-index: 9;\n  top: 0px;\n  left: -100%;\n  background-color: rgba(0, 0, 0, 0);\n  transition: left 0ms cubic-bezier(0.23, 1, 0.32, 1) 400ms, background-color 400ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-overlay.mui-is-shown {\n  left: 0px;\n  background-color: rgba(0, 0, 0, 0.54);\n  transition: left 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, background-color 400ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-paper.mui-rounded {\n  border-radius: 2px;\n}\n.mui-paper.mui-rounded > .mui-paper-container {\n  border-radius: 2px;\n}\n.mui-paper.mui-circle {\n  border-radius: 50%;\n}\n.mui-paper.mui-circle > .mui-paper-container {\n  border-radius: 50%;\n}\n.mui-paper > .mui-paper-container {\n  height: 100%;\n  width: 100%;\n}\n.mui-paper.mui-z-depth-1 {\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.24);\n}\n.mui-paper.mui-z-depth-1 > .mui-z-depth-bottom {\n  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.12);\n}\n.mui-paper.mui-z-depth-2 {\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.23);\n}\n.mui-paper.mui-z-depth-2 > .mui-z-depth-bottom {\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.16);\n}\n.mui-paper.mui-z-depth-3 {\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.23);\n}\n.mui-paper.mui-z-depth-3 > .mui-z-depth-bottom {\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.19);\n}\n.mui-paper.mui-z-depth-4 {\n  box-shadow: 0 10px 18px rgba(0, 0, 0, 0.22);\n}\n.mui-paper.mui-z-depth-4 > .mui-z-depth-bottom {\n  box-shadow: 0 14px 45px rgba(0, 0, 0, 0.25);\n}\n.mui-paper.mui-z-depth-5 {\n  box-shadow: 0 15px 20px rgba(0, 0, 0, 0.22);\n}\n.mui-paper.mui-z-depth-5 > .mui-z-depth-bottom {\n  box-shadow: 0 19px 60px rgba(0, 0, 0, 0.3);\n}\n.mui-radio-button .mui-radio-button-icon {\n  height: 24px;\n  width: 24px;\n  margin-right: 16px;\n}\n.mui-radio-button .mui-radio-button-icon .mui-radio-button-fill {\n  position: absolute;\n  opacity: 0;\n  transform: scale(0);\n  transform-origin: 50% 50%;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-radio-button .mui-radio-button-icon .mui-radio-button-fill * {\n  fill: #00bcd4;\n}\n.mui-radio-button .mui-radio-button-icon .mui-radio-button-target {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  position: absolute;\n  opacity: 1;\n  transform: scale(1);\n}\n.mui-radio-button .mui-radio-button-icon .mui-radio-button-target * {\n  fill: rgba(0, 0, 0, 0.87);\n  transition: all 2s cubic-bezier(0.23, 1, 0.32, 1) 200ms;\n}\n.mui-radio-button.mui-is-switched .mui-radio-button-icon .mui-radio-button-fill {\n  opacity: 1;\n  transform: scale(1);\n}\n.mui-radio-button.mui-is-switched .mui-radio-button-icon .mui-radio-button-target {\n  opacity: 0;\n  transform: scale(0);\n}\n.mui-radio-button.mui-is-switched .mui-radio-button-icon .mui-radio-button-target * {\n  fill: #00bcd4;\n  transition: all 100s cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-radio-button.mui-is-disabled .mui-radio-button-icon .mui-radio-button-fill *,\n.mui-radio-button.mui-is-disabled .mui-radio-button-icon .mui-radio-button-target * {\n  fill: rgba(0, 0, 0, 0.3);\n}\n.mui-radio-button.mui-is-required .mui-radio-button-icon .mui-radio-button-target * {\n  fill: #00bcd4;\n}\n.mui-raised-button {\n  display: inline-block;\n  min-width: 88px;\n  height: 36px;\n}\n.mui-raised-button,\n.mui-raised-button * {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-raised-button .mui-raised-button-container {\n  position: relative;\n  width: 100%;\n  padding: 0;\n  overflow: hidden;\n  border-radius: 2px;\n  background-color: #ffffff;\n  transform: translate3d(0, 0, 0);\n}\n.mui-raised-button .mui-raised-button-container.mui-is-keyboard-focused {\n  background-color: #e6e6e6;\n}\n.mui-raised-button .mui-raised-button-container.mui-is-disabled {\n  background-color: #e6e6e6;\n}\n.mui-raised-button .mui-raised-button-container.mui-is-disabled .mui-raised-button-label {\n  color: rgba(0, 0, 0, 0.3);\n}\n.mui-raised-button .mui-raised-button-container.mui-is-disabled:hover {\n  background-color: #e6e6e6;\n}\n.mui-raised-button .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.mui-raised-button .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(0, 0, 0, 0.07);\n}\n.mui-raised-button .mui-raised-button-label {\n  position: relative;\n  font-size: 14px;\n  line-height: 20px;\n  padding-top: 5px;\n  margin-bottom: 15px;\n  letter-spacing: 0;\n  text-transform: uppercase;\n  font-weight: 500;\n  margin: 0;\n  padding: 0 16px;\n  user-select: none;\n  line-height: 36px;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-raised-button:hover .mui-raised-button-container {\n  background-color: #e6e6e6;\n}\n.mui-raised-button.mui-is-primary .mui-raised-button-container {\n  background-color: #ff4081;\n}\n.mui-raised-button.mui-is-primary .mui-raised-button-container.mui-is-keyboard-focused {\n  background-color: #f30053;\n}\n.mui-raised-button.mui-is-primary .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(255, 255, 255, 0.5);\n}\n.mui-raised-button.mui-is-primary .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(255, 255, 255, 0.5);\n}\n.mui-raised-button.mui-is-primary .mui-raised-button-label {\n  color: #ffffff;\n}\n.mui-raised-button.mui-is-primary:hover .mui-raised-button-container {\n  background-color: #f30053;\n}\n.mui-raised-button.mui-is-secondary .mui-raised-button-container {\n  background-color: #00bcd4;\n}\n.mui-raised-button.mui-is-secondary .mui-raised-button-container.mui-is-keyboard-focused {\n  background-color: #00aac0;\n}\n.mui-raised-button.mui-is-secondary .mui-touch-ripple .mui-ripple-circle-inner {\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.mui-raised-button.mui-is-secondary .mui-focus-ripple .mui-focus-ripple-inner {\n  background-color: rgba(255, 255, 255, 0.35);\n}\n.mui-raised-button.mui-is-secondary .mui-raised-button-label {\n  color: #ffffff;\n}\n.mui-raised-button.mui-is-secondary:hover .mui-raised-button-container {\n  background-color: #00aac0;\n}\n.mui-focus-ripple {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  transform: scale(0);\n  opacity: 0;\n}\n.mui-focus-ripple .mui-focus-ripple-inner {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 0, 0.1);\n  animation: focus-ripple-pulsate 1.5s ease 0s infinite;\n}\n@keyframes focus-ripple-pulsate {\n  0%,\n  100% {\n    transform: scale(0.75);\n  }\n  50% {\n    transform: scale(0.85);\n  }\n}\n.mui-focus-ripple.mui-is-shown {\n  transform: scale(1);\n  opacity: 1;\n}\n.mui-ripple-circle {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  opacity: 0.7;\n  transition: opacity 2s cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-ripple-circle .mui-ripple-circle-inner {\n  height: 100%;\n  width: 100%;\n  border-radius: 50%;\n  transform: scale(0);\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: transform 1s cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-ripple-circle.mui-is-started {\n  opacity: 1;\n}\n.mui-ripple-circle.mui-is-started .mui-ripple-circle-inner {\n  transform: scale(1);\n}\n.mui-ripple-circle.mui-is-ending {\n  opacity: 0;\n}\n.mui-touch-ripple {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n.react-draggable-dragging {\n  user-select: none;\n}\n.mui-slider {\n  -webkit-touch-callout: none;\n  cursor: default;\n  height: 24px;\n  position: relative;\n}\n.mui-slider .mui-slider-track {\n  position: absolute;\n  top: 11px;\n  left: 0;\n  width: 100%;\n  height: 2px;\n}\n.mui-slider .mui-slider-selection {\n  position: absolute;\n  top: 0;\n  height: 100%;\n}\n.mui-slider .mui-slider-selection .mui-slider-selection-fill {\n  height: 100%;\n  transition: margin 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-slider .mui-slider-selection-low {\n  left: 0;\n}\n.mui-slider .mui-slider-selection-low .mui-slider-selection-fill {\n  background-color: #b2ebf2;\n  margin-right: 6px;\n}\n.mui-slider .mui-slider-selection-high {\n  right: 0;\n}\n.mui-slider .mui-slider-selection-high .mui-slider-selection-fill {\n  background-color: rgba(0, 0, 0, 0.26);\n  margin-left: 6px;\n}\n.mui-slider .mui-slider-handle {\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  left: 0%;\n  z-index: 1;\n  margin: 1px 0 0 0;\n  background-clip: padding-box;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  transition: border 450ms cubic-bezier(0.23, 1, 0.32, 1), width 450ms cubic-bezier(0.23, 1, 0.32, 1), height 450ms cubic-bezier(0.23, 1, 0.32, 1);\n  width: 12px;\n  height: 12px;\n}\n.mui-slider .mui-slider-handle:focus {\n  outline: none;\n}\n.mui-slider:not(.mui-disabled) .mui-slider-handle {\n  border: 0px solid transparent;\n  background-color: #b2ebf2;\n}\n.mui-slider:not(.mui-disabled) .mui-slider-handle:active {\n  width: 24px;\n  height: 24px;\n}\n.mui-slider:not(.mui-disabled):hover .mui-slider-selection-high .mui-slider-selection-fill,\n.mui-slider:not(.mui-disabled):focus .mui-slider-selection-high .mui-slider-selection-fill {\n  background: #9e9e9e;\n}\n.mui-slider:not(.mui-disabled):hover:not(.mui-slider-zero) .mui-slider-handle:not(:active),\n.mui-slider:not(.mui-disabled):focus:not(.mui-slider-zero) .mui-slider-handle:not(:active) {\n  border: 12px solid rgba(178, 235, 242, 0.2);\n  width: 36px;\n  height: 36px;\n}\n.mui-slider:not(.mui-disabled).mui-slider-zero .mui-slider-handle {\n  border: 2px solid rgba(0, 0, 0, 0.26);\n  background-color: transparent;\n  box-shadow: none;\n}\n.mui-slider:not(.mui-disabled).mui-slider-zero .mui-slider-handle:active {\n  border-color: #9e9e9e;\n  width: 24px !important;\n  height: 24px !important;\n  transition: background-color 450ms cubic-bezier(0.23, 1, 0.32, 1), width 450ms cubic-bezier(0.23, 1, 0.32, 1), height 450ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n.mui-slider:not(.mui-disabled).mui-slider-zero .mui-slider-handle:active ~ .mui-slider-selection-high .mui-slider-selection-fill {\n  margin-left: 12px !important;\n  transition: margin 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-slider:not(.mui-disabled).mui-slider-zero:hover .mui-slider-handle,\n.mui-slider:not(.mui-disabled).mui-slider-zero:focus .mui-slider-handle {\n  border: 2px solid #bdbdbd;\n  width: 14px;\n  height: 14px;\n}\n.mui-slider.mui-disabled {\n  cursor: not-allowed;\n}\n.mui-slider.mui-disabled .mui-slider-selection-fill {\n  background-color: rgba(0, 0, 0, 0.26);\n}\n.mui-slider.mui-disabled .mui-slider-handle {\n  cursor: not-allowed;\n  background-color: rgba(0, 0, 0, 0.26);\n  width: 8px;\n  height: 8px;\n}\n.mui-slider.mui-disabled.mui-slider-zero .mui-slider-selection-low .mui-slider-selection-fill {\n  margin-right: 5px;\n}\n.mui-slider.mui-disabled.mui-slider-zero .mui-slider-selection-high .mui-slider-selection-fill {\n  margin-left: 5px;\n}\n.mui-slider.mui-disabled.mui-slider-zero .mui-slider-handle {\n  border: 2px solid rgba(0, 0, 0, 0.26);\n  background-color: transparent;\n}\n.mui-snackbar {\n  color: white;\n  background-color: #323232;\n  border-radius: 2px;\n  padding: 0 24px;\n  height: 48px;\n  line-height: 48px;\n  min-width: 288px;\n  max-width: 568px;\n  position: fixed;\n  z-index: 10;\n  bottom: 24px;\n  margin-left: 24px;\n  left: -10000px;\n  opacity: 0;\n  transform: translate3d(0, 20px, 0);\n  transition: left 0ms cubic-bezier(0.23, 1, 0.32, 1) 400ms, opacity 400ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 400ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-snackbar .mui-snackbar-action {\n  color: #ff4081;\n  float: right;\n  margin-top: 6px;\n  margin-right: -16px;\n  margin-left: 24px;\n  background-color: transparent;\n}\n.mui-snackbar.mui-is-open {\n  left: 0;\n  opacity: 1;\n  transform: translate3d(0, 0, 0);\n  transition: left 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, opacity 400ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 400ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-subheader {\n  font-size: 13px;\n  line-height: 24px;\n  padding-top: 4px;\n  margin-bottom: 12px;\n  letter-spacing: 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.87);\n  margin: 0;\n  height: 56px;\n  line-height: 48px;\n  color: #00bcd4;\n  border-top: solid 1px #e0e0e0;\n  padding-top: 8px;\n  margin-top: 8px;\n}\n.mui-subheader:first-child {\n  height: 48px;\n  border-top: none;\n  padding-top: 0;\n  margin-top: 0;\n}\n.mui-svg-icon {\n  position: relative;\n  height: 24px;\n  width: 24px;\n  display: inline-block;\n  user-select: none;\n}\n.mui-svg-icon * {\n  fill: rgba(0, 0, 0, 0.87);\n}\n.mui-table {\n  padding: 0 24px;\n}\n.mui-table .mui-table-header .mui-table-header-column {\n  display: inline-block;\n  height: 48px;\n  line-height: 48px;\n  width: 200px;\n}\n.mui-table .mui-table-header .mui-table-header-pagify {\n  display: inline-block;\n  height: 48px;\n  line-height: 48px;\n  float: right;\n}\n.mui-table .mui-table-rows .mui-table-rows-item {\n  height: 48px;\n  line-height: 48px;\n  display: block;\n  width: 100%;\n}\n.mui-table .mui-table-rows .mui-table-rows-actions {\n  height: 48px;\n  line-height: 48px;\n  display: inline-block;\n  float: right;\n}\n.mui-tabs-container {\n  position: relative;\n}\n.mui-tabs-container .mui-tab-item-container {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 48px;\n  background-color: #00bcd4;\n  white-space: nowrap;\n  display: block;\n}\n.mui-tabs-container .mui-tab-item-container .mui-tab-item {\n  display: inline-block;\n  height: 100%;\n  cursor: pointer;\n  text-align: center;\n  line-height: 48px;\n  color: #fff;\n  opacity: .6;\n  font-size: 14sp;\n  font-weight: 500;\n  font: 'Roboto', sans-serif;\n}\n.mui-tabs-container .mui-tab-item-container .mui-tab-item.mui-tab-is-active {\n  color: #fff;\n  opacity: 1;\n  font: 'Roboto', sans-serif;\n}\n.mui-tabs-container .mui-tab-item-container .mui-tab-item .mui-tab-template {\n  display: block;\n  width: 100%;\n  position: relative;\n  text-align: initial;\n}\n.mui-text-field {\n  font-size: 16px;\n  line-height: 24px;\n  width: 256px;\n  height: 48px;\n  display: inline-block;\n  position: relative;\n  transition: height 200ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-text-field .mui-text-field-hint,\n.mui-text-field .mui-text-field-floating-label {\n  position: absolute;\n  line-height: 48px;\n  color: rgba(0, 0, 0, 0.3);\n  opacity: 1;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-text-field .mui-text-field-error {\n  position: absolute;\n  bottom: -10px;\n  font-size: 12px;\n  line-height: 12px;\n  color: #f44336;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-text-field .mui-text-field-input,\n.mui-text-field .mui-text-field-textarea {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n  outline: none;\n  background-color: rgba(0, 0, 0, 0);\n  color: rgba(0, 0, 0, 0.87);\n}\n.mui-text-field .mui-text-field-textarea {\n  margin-top: 12px;\n}\n.mui-text-field .mui-text-field-underline,\n.mui-text-field .mui-text-field-focus-underline {\n  position: absolute;\n  width: 100%;\n  bottom: 8px;\n  margin: 0;\n}\n.mui-text-field .mui-text-field-focus-underline {\n  border-color: #00bcd4;\n  border-bottom-width: 2px;\n  transform: scaleX(0);\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-text-field.mui-has-error .mui-text-field-focus-underline {\n  border-color: #f44336;\n  transform: scaleX(1);\n}\n.mui-text-field.mui-has-value .mui-text-field-hint {\n  opacity: 0;\n}\n.mui-text-field.mui-is-disabled .mui-text-field-input {\n  color: rgba(0, 0, 0, 0.3);\n}\n.mui-text-field.mui-is-disabled .mui-text-field-underline {\n  border: none;\n  height: 40px;\n  overflow: hidden;\n}\n.mui-text-field.mui-is-disabled .mui-text-field-underline:after {\n  content: '..............................................................................................................................................................................................................................................................................................................................................................';\n  position: absolute;\n  top: 23px;\n  color: rgba(0, 0, 0, 0.3);\n}\n.mui-text-field.mui-is-focused .mui-text-field-focus-underline {\n  transform: scaleX(1);\n}\n.mui-text-field.mui-has-floating-labels {\n  height: 72px;\n}\n.mui-text-field.mui-has-floating-labels .mui-text-field-floating-label {\n  top: 24px;\n  transform: scale(1) translate3d(0, 0, 0);\n  transform-origin: left top;\n}\n.mui-text-field.mui-has-floating-labels .mui-text-field-hint {\n  top: 24px;\n  opacity: 0;\n}\n.mui-text-field.mui-has-floating-labels .mui-text-field-input {\n  padding-top: 24px;\n}\n.mui-text-field.mui-has-floating-labels.mui-has-value .mui-text-field-floating-label,\n.mui-text-field.mui-has-floating-labels.mui-is-focused .mui-text-field-floating-label {\n  transform: scale(0.75) translate3d(0, -18px, 0);\n}\n.mui-text-field.mui-has-floating-labels.mui-has-value .mui-text-field-floating-label {\n  color: rgba(0, 0, 0, 0.5);\n}\n.mui-text-field.mui-has-floating-labels.mui-is-disabled .mui-text-field-hint {\n  color: rgba(0, 0, 0, 0.3);\n}\n.mui-text-field.mui-has-floating-labels.mui-is-focused .mui-text-field-hint {\n  opacity: 1;\n}\n.mui-text-field.mui-has-floating-labels.mui-is-focused .mui-text-field-floating-label {\n  transform: scale(0.75) translate3d(0, -18px, 0);\n  color: #00bcd4;\n}\n.mui-text-field.mui-has-floating-labels.mui-is-focused.mui-has-error .mui-text-field-floating-label {\n  color: #f44336;\n}\n.mui-text-field.mui-has-floating-labels.mui-is-focused.mui-has-value .mui-text-field-hint {\n  opacity: 0;\n}\n.mui-toggle .mui-toggle-icon {\n  padding: 4px 0px 6px 2px;\n  margin-right: 8px;\n}\n.mui-toggle .mui-toggle-icon .mui-toggle-track {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  width: 36px;\n  height: 14px;\n  border-radius: 30px;\n  background-color: rgba(0, 0, 0, 0.26);\n}\n.mui-toggle .mui-toggle-icon .mui-toggle-thumb {\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  position: absolute;\n  top: 1px;\n  left: 2px;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  border-radius: 50%;\n  background-color: #fafafa;\n}\n.mui-toggle .mui-toggle-icon .mui-toggle-thumb .mui-paper-container {\n  border-radius: 50%;\n}\n.mui-toggle .mui-toggle-icon .mui-toggle-thumb .mui-touch-ripple,\n.mui-toggle .mui-toggle-icon .mui-toggle-thumb .mui-focus-ripple-inner {\n  width: 200%;\n  height: 200%;\n  top: -10px;\n  left: -10px;\n}\n.mui-toggle.mui-is-switched .mui-toggle-icon .mui-toggle-track {\n  background-color: rgba(0, 188, 212, 0.5);\n}\n.mui-toggle.mui-is-switched .mui-toggle-icon .mui-toggle-thumb {\n  left: 18px;\n  background-color: #00bcd4;\n}\n.mui-toggle.mui-is-disabled .mui-toggle-icon {\n  cursor: default;\n}\n.mui-toggle.mui-is-disabled .mui-toggle-icon .mui-toggle-track {\n  background-color: rgba(0, 0, 0, 0.12);\n}\n.mui-toggle.mui-is-disabled .mui-toggle-icon .mui-toggle-thumb {\n  background-color: #bdbdbd;\n}\n.mui-toggle.mui-is-required .mui-toggle-icon .mui-toggle-track {\n  background-color: rgba(0, 188, 212, 0.5);\n}\n.mui-toggle.mui-is-required .mui-toggle-icon .mui-toggle-thumb {\n  background-color: #00bcd4;\n}\n.mui-toolbar {\n  background-color: #e1e1e1;\n  height: 56px;\n  width: 100%;\n  padding: 0 24px;\n}\n.mui-toolbar .mui-toolbar-group {\n  position: relative;\n}\n.mui-toolbar .mui-toolbar-group .mui-toolbar-title {\n  padding-right: 16px;\n  line-height: 56px;\n}\n.mui-toolbar .mui-toolbar-group .mui-toolbar-separator {\n  background-color: rgba(0, 0, 0, 0.175);\n  display: inline-block;\n  height: 32px;\n  margin-left: 24px;\n  position: relative;\n  top: 12px;\n  width: 1px;\n}\n.mui-toolbar .mui-toolbar-group .mui-raised-button,\n.mui-toolbar .mui-toolbar-group .mui-flat-button {\n  margin: 0 24px;\n  margin-top: 10px;\n  position: relative;\n}\n.mui-toolbar .mui-toolbar-group .mui-drop-down-menu {\n  color: rgba(0, 0, 0, 0.54);\n  display: inline-block;\n  margin-right: 24px;\n}\n.mui-toolbar .mui-toolbar-group .mui-drop-down-menu .mui-menu-control-bg {\n  background-color: #ffffff;\n  border-radius: 0;\n}\n.mui-toolbar .mui-toolbar-group .mui-drop-down-menu .mui-menu-control .mui-menu-control-underline {\n  display: none;\n}\n.mui-toolbar .mui-toolbar-group .mui-drop-down-menu .mui-font-icon:hover {\n  color: rgba(0, 0, 0, 0.4);\n}\n.mui-toolbar .mui-toolbar-group .mui-font-icon {\n  color: rgba(0, 0, 0, 0.4);\n  cursor: pointer;\n  line-height: 56px;\n  padding-left: 24px;\n}\n.mui-toolbar .mui-toolbar-group .mui-font-icon:hover {\n  color: rgba(0, 0, 0, 0.87);\n  z-index: 1;\n}\n.mui-toolbar .mui-toolbar-group.mui-left {\n  float: left;\n}\n.mui-toolbar .mui-toolbar-group.mui-left .mui-drop-down-menu,\n.mui-toolbar .mui-toolbar-group.mui-left .mui-font-icon,\n.mui-toolbar .mui-toolbar-group.mui-left .mui-toolbar-separator,\n.mui-toolbar .mui-toolbar-group.mui-left .mui-drop-down-icon {\n  float: left;\n}\n.mui-toolbar .mui-toolbar-group.mui-left:first-child {\n  margin-left: -24px;\n}\n.mui-toolbar .mui-toolbar-group.mui-left:first-child .mui-toolbar-title {\n  margin-left: 24px;\n}\n.mui-toolbar .mui-toolbar-group.mui-right {\n  float: right;\n}\n.mui-toolbar .mui-toolbar-group.mui-right * {\n  vertical-align: top;\n}\n.mui-toolbar .mui-toolbar-group.mui-right:last-child {\n  margin-right: -24px;\n}\n.mui-tooltip {\n  position: absolute;\n  font-family: 'Roboto', sans-serif;\n  font-size: 10px;\n  line-height: 22px;\n  padding: 0 8px;\n  color: #ffffff;\n  overflow: hidden;\n  top: -10000px;\n  border-radius: 2px;\n  user-select: none;\n  opacity: 0;\n  transition: top 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms, transform 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-tooltip .mui-tooltip-label {\n  position: relative;\n  white-space: nowrap;\n}\n.mui-tooltip .mui-tooltip-ripple {\n  position: absolute;\n  left: 50%;\n  top: 0px;\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n  background-color: transparent;\n  transition: width 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms, height 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms, background-color 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-tooltip.mui-is-shown {\n  top: -16px;\n  opacity: 1;\n  transform: translate3d(0px, 16px, 0px);\n  transition: top 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-tooltip.mui-is-shown .mui-tooltip-ripple {\n  background-color: #757575;\n  transition: width 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, height 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, background-color 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-tooltip.mui-is-touch {\n  font-size: 14px;\n  line-height: 44px;\n  padding: 0 16px;\n}\n.mui-tooltip.mui-is-touch.mui-is-shown .mui-tooltip-ripple {\n  height: 105px;\n  width: 105px;\n}\n.mui-transition-slide-in {\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n}\n.mui-transition-slide-in .mui-transition-slide-in-child {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n.mui-transition-slide-in .mui-transition-slide-in-enter {\n  opacity: 0;\n}\n.mui-transition-slide-in .mui-transition-slide-in-enter-active {\n  opacity: 1;\n}\n.mui-transition-slide-in .mui-transition-slide-in-leave {\n  opacity: 1;\n}\n.mui-transition-slide-in .mui-transition-slide-in-leave-active {\n  opacity: 0;\n}\n.mui-transition-slide-in.mui-is-left .mui-transition-slide-in-enter {\n  transform: translate3d(100%, 0, 0);\n}\n.mui-transition-slide-in.mui-is-left .mui-transition-slide-in-enter-active {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-left .mui-transition-slide-in-leave {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-left .mui-transition-slide-in-leave-active {\n  transform: translate3d(-100%, 0, 0);\n}\n.mui-transition-slide-in.mui-is-right .mui-transition-slide-in-enter {\n  transform: translate3d(-100%, 0, 0);\n}\n.mui-transition-slide-in.mui-is-right .mui-transition-slide-in-enter-active {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-right .mui-transition-slide-in-leave {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-right .mui-transition-slide-in-leave-active {\n  transform: translate3d(100%, 0, 0);\n}\n.mui-transition-slide-in.mui-is-up .mui-transition-slide-in-enter {\n  transform: translate3d(0, 100%, 0);\n}\n.mui-transition-slide-in.mui-is-up .mui-transition-slide-in-enter-active {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-up .mui-transition-slide-in-leave {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-up .mui-transition-slide-in-leave-active {\n  transform: translate3d(0, -100%, 0);\n}\n.mui-transition-slide-in.mui-is-down .mui-transition-slide-in-enter {\n  transform: translate3d(0, -100%, 0);\n}\n.mui-transition-slide-in.mui-is-down .mui-transition-slide-in-enter-active {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-down .mui-transition-slide-in-leave {\n  transform: translate3d(0, 0, 0);\n}\n.mui-transition-slide-in.mui-is-down .mui-transition-slide-in-leave-active {\n  transform: translate3d(0, 100%, 0);\n}\n/* \n *\n * Custom base styles\n *\n */\n.base-view {\n  background: url("+__webpack_require__(421)+");\n  background-size: 26px 25px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.mui-left-nav .mui-left-nav-menu {\n  background: url("+__webpack_require__(421)+");\n  background-size: 20px 19px;\n}\n.mui-left-nav .mui-left-nav-menu .mui-menu .mui-menu-item {\n  color: #fff;\n  font-size: 18px;\n  border-top: solid 1px;\n  height: 55px;\n  line-height: 55px;\n}\n.mui-left-nav .mui-left-nav-menu .mui-menu .mui-menu-item:last-child {\n  border-bottom: solid 1px;\n}\n.mui-is-selected {\n  background-color: #ab2a2c !important;\n}\n.red-text {\n  font-size: 16px;\n  color: #d8383b;\n}\n.blue-text {\n  font-size: 16px;\n  color: #3c7fad;\n}\n.fadeable {\n  opacity: 1;\n  transition: opacity 0.25s ease-in-out;\n  -moz-transition: opacity 0.25s ease-in-out;\n  -webkit-transition: opacity 0.25s ease-in-out;\n}\n.fade {\n  opacity: 0;\n}\n.gift-item__buy-button {\n  float: left;\n  width: 150px;\n  height: 54px;\n  background: url("+__webpack_require__(422)+");\n  background-size: 150px 54px;\n}\n.gift-item__description {\n  float: left;\n  margin-top: 37px;\n  width: calc(100% - 150px);\n}\n.rsvp__submit-button {\n  float: right;\n  margin: 20px;\n  width: 140px;\n  height: 39px;\n  background: url("+__webpack_require__(423)+");\n  background-size: 140px 39px;\n}\n", ""]);

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function injectTapEventPlugin () {
	  var React = __webpack_require__(15);
	  React.initializeTouchEvents(true);

	  __webpack_require__(26).injection.injectEventPluginsByName({
	    "ResponderEventPlugin": __webpack_require__(27),
	    "TapEventPlugin":       __webpack_require__(28)
	  });
	};


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process) {/*!
	 * Parse JavaScript SDK
	 * Version: 1.4.2
	 * Built: Thu Apr 09 2015 17:20:31
	 * http://parse.com
	 *
	 * Copyright 2015 Parse, Inc.
	 * The Parse JavaScript SDK is freely distributable under the MIT license.
	 *
	 * Includes: Underscore.js
	 * Copyright 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
	 * Released under the MIT license.
	 */
	(function(root) {
	  root.Parse = root.Parse || {};
	  root.Parse.VERSION = "js1.4.2";
	}(this));
	//     Underscore.js 1.4.4
	//     http://underscorejs.org
	//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `global` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Establish the object that gets returned to break out of a loop iteration.
	  var breaker = {};

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var push             = ArrayProto.push,
	      slice            = ArrayProto.slice,
	      concat           = ArrayProto.concat,
	      toString         = ObjProto.toString,
	      hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeForEach      = ArrayProto.forEach,
	    nativeMap          = ArrayProto.map,
	    nativeReduce       = ArrayProto.reduce,
	    nativeReduceRight  = ArrayProto.reduceRight,
	    nativeFilter       = ArrayProto.filter,
	    nativeEvery        = ArrayProto.every,
	    nativeSome         = ArrayProto.some,
	    nativeIndexOf      = ArrayProto.indexOf,
	    nativeLastIndexOf  = ArrayProto.lastIndexOf,
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind;

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object via a string identifier,
	  // for Closure Compiler "advanced" mode.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.4.4';

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles objects with the built-in `forEach`, arrays, and raw objects.
	  // Delegates to **ECMAScript 5**'s native `forEach` if available.
	  var each = _.each = _.forEach = function(obj, iterator, context) {
	    if (obj == null) return;
	    if (nativeForEach && obj.forEach === nativeForEach) {
	      obj.forEach(iterator, context);
	    } else if (obj.length === +obj.length) {
	      for (var i = 0, l = obj.length; i < l; i++) {
	        if (iterator.call(context, obj[i], i, obj) === breaker) return;
	      }
	    } else {
	      for (var key in obj) {
	        if (_.has(obj, key)) {
	          if (iterator.call(context, obj[key], key, obj) === breaker) return;
	        }
	      }
	    }
	  };

	  // Return the results of applying the iterator to each element.
	  // Delegates to **ECMAScript 5**'s native `map` if available.
	  _.map = _.collect = function(obj, iterator, context) {
	    var results = [];
	    if (obj == null) return results;
	    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
	    each(obj, function(value, index, list) {
	      results[results.length] = iterator.call(context, value, index, list);
	    });
	    return results;
	  };

	  var reduceError = 'Reduce of empty array with no initial value';

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
	  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
	    var initial = arguments.length > 2;
	    if (obj == null) obj = [];
	    if (nativeReduce && obj.reduce === nativeReduce) {
	      if (context) iterator = _.bind(iterator, context);
	      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
	    }
	    each(obj, function(value, index, list) {
	      if (!initial) {
	        memo = value;
	        initial = true;
	      } else {
	        memo = iterator.call(context, memo, value, index, list);
	      }
	    });
	    if (!initial) throw new TypeError(reduceError);
	    return memo;
	  };

	  // The right-associative version of reduce, also known as `foldr`.
	  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
	  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
	    var initial = arguments.length > 2;
	    if (obj == null) obj = [];
	    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
	      if (context) iterator = _.bind(iterator, context);
	      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
	    }
	    var length = obj.length;
	    if (length !== +length) {
	      var keys = _.keys(obj);
	      length = keys.length;
	    }
	    each(obj, function(value, index, list) {
	      index = keys ? keys[--length] : --length;
	      if (!initial) {
	        memo = obj[index];
	        initial = true;
	      } else {
	        memo = iterator.call(context, memo, obj[index], index, list);
	      }
	    });
	    if (!initial) throw new TypeError(reduceError);
	    return memo;
	  };

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, iterator, context) {
	    var result;
	    any(obj, function(value, index, list) {
	      if (iterator.call(context, value, index, list)) {
	        result = value;
	        return true;
	      }
	    });
	    return result;
	  };

	  // Return all the elements that pass a truth test.
	  // Delegates to **ECMAScript 5**'s native `filter` if available.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, iterator, context) {
	    var results = [];
	    if (obj == null) return results;
	    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
	    each(obj, function(value, index, list) {
	      if (iterator.call(context, value, index, list)) results[results.length] = value;
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, iterator, context) {
	    return _.filter(obj, function(value, index, list) {
	      return !iterator.call(context, value, index, list);
	    }, context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Delegates to **ECMAScript 5**'s native `every` if available.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, iterator, context) {
	    iterator || (iterator = _.identity);
	    var result = true;
	    if (obj == null) return result;
	    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
	    each(obj, function(value, index, list) {
	      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
	    });
	    return !!result;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Delegates to **ECMAScript 5**'s native `some` if available.
	  // Aliased as `any`.
	  var any = _.some = _.any = function(obj, iterator, context) {
	    iterator || (iterator = _.identity);
	    var result = false;
	    if (obj == null) return result;
	    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
	    each(obj, function(value, index, list) {
	      if (result || (result = iterator.call(context, value, index, list))) return breaker;
	    });
	    return !!result;
	  };

	  // Determine if the array or object contains a given value (using `===`).
	  // Aliased as `include`.
	  _.contains = _.include = function(obj, target) {
	    if (obj == null) return false;
	    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
	    return any(obj, function(value) {
	      return value === target;
	    });
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      return (isFunc ? method : value[method]).apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, function(value){ return value[key]; });
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs, first) {
	    if (_.isEmpty(attrs)) return first ? null : [];
	    return _[first ? 'find' : 'filter'](obj, function(value) {
	      for (var key in attrs) {
	        if (attrs[key] !== value[key]) return false;
	      }
	      return true;
	    });
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.where(obj, attrs, true);
	  };

	  // Return the maximum element or (element-based computation).
	  // Can't optimize arrays of integers longer than 65,535 elements.
	  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
	  _.max = function(obj, iterator, context) {
	    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
	      return Math.max.apply(Math, obj);
	    }
	    if (!iterator && _.isEmpty(obj)) return -Infinity;
	    var result = {computed : -Infinity, value: -Infinity};
	    each(obj, function(value, index, list) {
	      var computed = iterator ? iterator.call(context, value, index, list) : value;
	      computed >= result.computed && (result = {value : value, computed : computed});
	    });
	    return result.value;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iterator, context) {
	    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
	      return Math.min.apply(Math, obj);
	    }
	    if (!iterator && _.isEmpty(obj)) return Infinity;
	    var result = {computed : Infinity, value: Infinity};
	    each(obj, function(value, index, list) {
	      var computed = iterator ? iterator.call(context, value, index, list) : value;
	      computed < result.computed && (result = {value : value, computed : computed});
	    });
	    return result.value;
	  };

	  // Shuffle an array.
	  _.shuffle = function(obj) {
	    var rand;
	    var index = 0;
	    var shuffled = [];
	    each(obj, function(value) {
	      rand = _.random(index++);
	      shuffled[index - 1] = shuffled[rand];
	      shuffled[rand] = value;
	    });
	    return shuffled;
	  };

	  // An internal function to generate lookup iterators.
	  var lookupIterator = function(value) {
	    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
	  };

	  // Sort the object's values by a criterion produced by an iterator.
	  _.sortBy = function(obj, value, context) {
	    var iterator = lookupIterator(value);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value : value,
	        index : index,
	        criteria : iterator.call(context, value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index < right.index ? -1 : 1;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(obj, value, context, behavior) {
	    var result = {};
	    var iterator = lookupIterator(value || _.identity);
	    each(obj, function(value, index) {
	      var key = iterator.call(context, value, index, obj);
	      behavior(result, key, value);
	    });
	    return result;
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = function(obj, value, context) {
	    return group(obj, value, context, function(result, key, value) {
	      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
	    });
	  };

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = function(obj, value, context) {
	    return group(obj, value, context, function(result, key) {
	      if (!_.has(result, key)) result[key] = 0;
	      result[key]++;
	    });
	  };

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iterator, context) {
	    iterator = iterator == null ? _.identity : lookupIterator(iterator);
	    var value = iterator.call(context, obj);
	    var low = 0, high = array.length;
	    while (low < high) {
	      var mid = (low + high) >>> 1;
	      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
	    }
	    return low;
	  };

	  // Safely convert anything iterable into a real, live array.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (obj.length === +obj.length) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N. The **guard** check allows it to work with
	  // `_.map`.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array. The **guard** check allows it to work with `_.map`.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if ((n != null) && !guard) {
	      return slice.call(array, Math.max(array.length - n, 0));
	    } else {
	      return array[array.length - 1];
	    }
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array. The **guard**
	  // check allows it to work with `_.map`.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, (n == null) || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, output) {
	    each(input, function(value) {
	      if (_.isArray(value)) {
	        shallow ? push.apply(output, value) : flatten(value, shallow, output);
	      } else {
	        output.push(value);
	      }
	    });
	    return output;
	  };

	  // Return a completely flattened version of an array.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, []);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iterator, context) {
	    if (_.isFunction(isSorted)) {
	      context = iterator;
	      iterator = isSorted;
	      isSorted = false;
	    }
	    var initial = iterator ? _.map(array, iterator, context) : array;
	    var results = [];
	    var seen = [];
	    each(initial, function(value, index) {
	      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
	        seen.push(value);
	        results.push(array[index]);
	      }
	    });
	    return results;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(concat.apply(ArrayProto, arguments));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var rest = slice.call(arguments, 1);
	    return _.filter(_.uniq(array), function(item) {
	      return _.every(rest, function(other) {
	        return _.indexOf(other, item) >= 0;
	      });
	    });
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
	    return _.filter(array, function(value){ return !_.contains(rest, value); });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    var args = slice.call(arguments);
	    var length = _.max(_.pluck(args, 'length'));
	    var results = new Array(length);
	    for (var i = 0; i < length; i++) {
	      results[i] = _.pluck(args, "" + i);
	    }
	    return results;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    if (list == null) return {};
	    var result = {};
	    for (var i = 0, l = list.length; i < l; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
	  // we need this function. Return the position of the first occurrence of an
	  // item in an array, or -1 if the item is not included in the array.
	  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = function(array, item, isSorted) {
	    if (array == null) return -1;
	    var i = 0, l = array.length;
	    if (isSorted) {
	      if (typeof isSorted == 'number') {
	        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
	      } else {
	        i = _.sortedIndex(array, item);
	        return array[i] === item ? i : -1;
	      }
	    }
	    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
	    for (; i < l; i++) if (array[i] === item) return i;
	    return -1;
	  };

	  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
	  _.lastIndexOf = function(array, item, from) {
	    if (array == null) return -1;
	    var hasIndex = from != null;
	    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
	      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
	    }
	    var i = (hasIndex ? from : array.length);
	    while (i--) if (array[i] === item) return i;
	    return -1;
	  };

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (arguments.length <= 1) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = arguments[2] || 1;

	    var len = Math.max(Math.ceil((stop - start) / step), 0);
	    var idx = 0;
	    var range = new Array(len);

	    while(idx < len) {
	      range[idx++] = start;
	      start += step;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    var args = slice.call(arguments, 2);
	    return function() {
	      return func.apply(context, args.concat(slice.call(arguments)));
	    };
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context.
	  _.partial = function(func) {
	    var args = slice.call(arguments, 1);
	    return function() {
	      return func.apply(this, args.concat(slice.call(arguments)));
	    };
	  };

	  // Bind all of an object's methods to that object. Useful for ensuring that
	  // all callbacks defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var funcs = slice.call(arguments, 1);
	    if (funcs.length === 0) funcs = _.functions(obj);
	    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memo = {};
	    hasher || (hasher = _.identity);
	    return function() {
	      var key = hasher.apply(this, arguments);
	      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
	    };
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){ return func.apply(null, args); }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = function(func) {
	    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
	  };

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time.
	  _.throttle = function(func, wait) {
	    var context, args, timeout, result;
	    var previous = 0;
	    var later = function() {
	      previous = new Date;
	      timeout = null;
	      result = func.apply(context, args);
	    };
	    return function() {
	      var now = new Date;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0) {
	        clearTimeout(timeout);
	        timeout = null;
	        previous = now;
	        result = func.apply(context, args);
	      } else if (!timeout) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, result;
	    return function() {
	      var context = this, args = arguments;
	      var later = function() {
	        timeout = null;
	        if (!immediate) result = func.apply(context, args);
	      };
	      var callNow = immediate && !timeout;
	      clearTimeout(timeout);
	      timeout = setTimeout(later, wait);
	      if (callNow) result = func.apply(context, args);
	      return result;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = function(func) {
	    var ran = false, memo;
	    return function() {
	      if (ran) return memo;
	      ran = true;
	      memo = func.apply(this, arguments);
	      func = null;
	      return memo;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return function() {
	      var args = [func];
	      push.apply(args, arguments);
	      return wrapper.apply(this, args);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var funcs = arguments;
	    return function() {
	      var args = arguments;
	      for (var i = funcs.length - 1; i >= 0; i--) {
	        args = [funcs[i].apply(this, args)];
	      }
	      return args[0];
	    };
	  };

	  // Returns a function that will only be executed after being called N times.
	  _.after = function(times, func) {
	    if (times <= 0) return func();
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Object Functions
	  // ----------------

	  // Retrieve the names of an object's properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = nativeKeys || function(obj) {
	    if (obj !== Object(obj)) throw new TypeError('Invalid object');
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var values = [];
	    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
	    return values;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var pairs = [];
	    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = function(obj) {
	    each(slice.call(arguments, 1), function(source) {
	      if (source) {
	        for (var prop in source) {
	          obj[prop] = source[prop];
	        }
	      }
	    });
	    return obj;
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(obj) {
	    var copy = {};
	    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
	    each(keys, function(key) {
	      if (key in obj) copy[key] = obj[key];
	    });
	    return copy;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj) {
	    var copy = {};
	    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
	    for (var key in obj) {
	      if (!_.contains(keys, key)) copy[key] = obj[key];
	    }
	    return copy;
	  };

	  // Fill in a given object with default properties.
	  _.defaults = function(obj) {
	    each(slice.call(arguments, 1), function(source) {
	      if (source) {
	        for (var prop in source) {
	          if (obj[prop] == null) obj[prop] = source[prop];
	        }
	      }
	    });
	    return obj;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
	    if (a === b) return a !== 0 || 1 / a == 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className != toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, dates, and booleans are compared by value.
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return a == String(b);
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
	        // other numeric values.
	        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a == +b;
	      // RegExps are compared by their source patterns and flags.
	      case '[object RegExp]':
	        return a.source == b.source &&
	               a.global == b.global &&
	               a.multiline == b.multiline &&
	               a.ignoreCase == b.ignoreCase;
	    }
	    if (typeof a != 'object' || typeof b != 'object') return false;
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] == a) return bStack[length] == b;
	    }
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	    var size = 0, result = true;
	    // Recursively compare objects and arrays.
	    if (className == '[object Array]') {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      size = a.length;
	      result = size == b.length;
	      if (result) {
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (size--) {
	          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
	        }
	      }
	    } else {
	      // Objects with different constructors are not equivalent, but `Object`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
	                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
	        return false;
	      }
	      // Deep compare objects.
	      for (var key in a) {
	        if (_.has(a, key)) {
	          // Count the expected number of properties.
	          size++;
	          // Deep compare each member.
	          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
	        }
	      }
	      // Ensure that both objects contain the same number of properties.
	      if (result) {
	        for (key in b) {
	          if (_.has(b, key) && !(size--)) break;
	        }
	        result = !size;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return result;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b, [], []);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
	    for (var key in obj) if (_.has(obj, key)) return false;
	    return true;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) == '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    return obj === Object(obj);
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
	  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) == '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return !!(obj && _.has(obj, 'callee'));
	    };
	  }

	  // Optimize `isFunction` if appropriate.
	  if (true) {
	    _.isFunction = function(obj) {
	      return typeof obj === 'function';
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj != +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iterators.
	  _.identity = function(value) {
	    return value;
	  };

	  // Run a function **n** times.
	  _.times = function(n, iterator, context) {
	    var accum = Array(n);
	    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // List of HTML entities for escaping.
	  var entityMap = {
	    escape: {
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      "'": '&#x27;',
	      '/': '&#x2F;'
	    }
	  };
	  entityMap.unescape = _.invert(entityMap.escape);

	  // Regexes containing the keys and values listed immediately above.
	  var entityRegexes = {
	    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
	    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
	  };

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  _.each(['escape', 'unescape'], function(method) {
	    _[method] = function(string) {
	      if (string == null) return '';
	      return ('' + string).replace(entityRegexes[method], function(match) {
	        return entityMap[method][match];
	      });
	    };
	  });

	  // If the value of the named property is a function then invoke it;
	  // otherwise, return it.
	  _.result = function(object, property) {
	    if (object == null) return null;
	    var value = object[property];
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    each(_.functions(obj), function(name){
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result.call(this, func.apply(_, args));
	      };
	    });
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\t':     't',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  _.template = function(text, data, settings) {
	    var render;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = new RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset)
	        .replace(escaper, function(match) { return '\\' + escapes[match]; });

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      }
	      if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      }
	      if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	      index = offset + match.length;
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + "return __p;\n";

	    try {
	      render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    if (data) return render(data, _);
	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled function source as a convenience for precompilation.
	    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function, which will delegate to the wrapper.
	  _.chain = function(obj) {
	    return _(obj).chain();
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(obj) {
	    return this._chain ? _(obj).chain() : obj;
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
	      return result.call(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result.call(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  _.extend(_.prototype, {

	    // Start chaining a wrapped Underscore object.
	    chain: function() {
	      this._chain = true;
	      return this;
	    },

	    // Extracts the result from a wrapped and chained object.
	    value: function() {
	      return this._wrapped;
	    }

	  });

	}).call(this);

	/*global _: false, $: false, localStorage: false, process: true,
	  XMLHttpRequest: false, XDomainRequest: false, exports: false,
	  require: false, setTimeout: true */
	(function(root) {
	  root.Parse = root.Parse || {};
	  /**
	   * Contains all Parse API classes and functions.
	   * @name Parse
	   * @namespace
	   *
	   * Contains all Parse API classes and functions.
	   */
	  var Parse = root.Parse;

	  var req = typeof(require) === 'function' ? require : null;
	  // Load references to other dependencies
	  if (typeof(XMLHttpRequest) !== 'undefined') {
	    Parse.XMLHttpRequest = XMLHttpRequest;
	  } else if (false) {
	    Parse.XMLHttpRequest = req('xmlhttprequest').XMLHttpRequest;
	  }
	  // Import Parse's local copy of underscore.
	  if (typeof(exports) !== 'undefined' && exports._) {
	    // We're running in a CommonJS environment
	    Parse._ = exports._.noConflict();
	    exports.Parse = Parse;
	  } else {
	    Parse._ = _.noConflict();
	  }

	  // If jQuery or Zepto has been included, grab a reference to it.
	  if (typeof($) !== "undefined") {
	    Parse.$ = $;
	  }

	  // Helpers
	  // -------

	  // Shared empty constructor function to aid in prototype-chain creation.
	  var EmptyConstructor = function() {};

	  // TODO: fix this so that ParseObjects aren't all called "child" in debugger.
	  // Helper function to correctly set up the prototype chain, for subclasses.
	  // Similar to `goog.inherits`, but uses a hash of prototype properties and
	  // class properties to be extended.
	  var inherits = function(parent, protoProps, staticProps) {
	    var child;

	    // The constructor function for the new subclass is either defined by you
	    // (the "constructor" property in your `extend` definition), or defaulted
	    // by us to simply call the parent's constructor.
	    if (protoProps && protoProps.hasOwnProperty('constructor')) {
	      child = protoProps.constructor;
	    } else {
	      /** @ignore */
	      child = function(){ parent.apply(this, arguments); };
	    }

	    // Inherit class (static) properties from parent.
	    Parse._.extend(child, parent);

	    // Set the prototype chain to inherit from `parent`, without calling
	    // `parent`'s constructor function.
	    EmptyConstructor.prototype = parent.prototype;
	    child.prototype = new EmptyConstructor();

	    // Add prototype properties (instance properties) to the subclass,
	    // if supplied.
	    if (protoProps) {
	      Parse._.extend(child.prototype, protoProps);
	    }

	    // Add static properties to the constructor function, if supplied.
	    if (staticProps) {
	      Parse._.extend(child, staticProps);
	    }

	    // Correctly set child's `prototype.constructor`.
	    child.prototype.constructor = child;

	    // Set a convenience property in case the parent's prototype is
	    // needed later.
	    child.__super__ = parent.prototype;

	    return child;
	  };

	  // Set the server for Parse to talk to.
	  Parse.serverURL = "https://api.parse.com";

	  // Check whether we are running in Node.js.
	  if (typeof(process) !== "undefined" &&
	      process.versions &&
	      process.versions.node) {
	    Parse._isNode = true;
	  }

	  /**
	   * Call this method first to set up your authentication tokens for Parse.
	   * You can get your keys from the Data Browser on parse.com.
	   * @param {String} applicationId Your Parse Application ID.
	   * @param {String} javaScriptKey Your Parse JavaScript Key.
	   * @param {String} masterKey (optional) Your Parse Master Key. (Node.js only!)
	   */
	  Parse.initialize = function(applicationId, javaScriptKey, masterKey) {
	    if (masterKey) {
	      throw "Parse.initialize() was passed a Master Key, which is only " +
	        "allowed from within Node.js.";
	    }
	    Parse._initialize(applicationId, javaScriptKey);
	  };

	  /**
	   * Call this method first to set up master authentication tokens for Parse.
	   * This method is for Parse's own private use.
	   * @param {String} applicationId Your Parse Application ID.
	   * @param {String} javaScriptKey Your Parse JavaScript Key.
	   * @param {String} masterKey Your Parse Master Key.
	   */
	  Parse._initialize = function(applicationId, javaScriptKey, masterKey) {
	    Parse.applicationId = applicationId;
	    Parse.javaScriptKey = javaScriptKey;
	    Parse.masterKey = masterKey;
	    Parse._useMasterKey = false;
	  };

	  // If we're running in node.js, allow using the master key.
	  if (Parse._isNode) {
	    Parse.initialize = Parse._initialize;

	    Parse.Cloud = Parse.Cloud || {};
	    /**
	     * Switches the Parse SDK to using the Master key.  The Master key grants
	     * priveleged access to the data in Parse and can be used to bypass ACLs and
	     * other restrictions that are applied to the client SDKs.
	     * <p><strong><em>Available in Cloud Code and Node.js only.</em></strong>
	     * </p>
	     */
	    Parse.Cloud.useMasterKey = function() {
	      Parse._useMasterKey = true;
	    };
	  }

	  /**
	   * Returns prefix for Storage keys used by this instance of Parse.
	   * @param {String} path The relative suffix to append to it.
	   *     null or undefined is treated as the empty string.
	   * @return {String} The full key name.
	   */
	  Parse._getParsePath = function(path) {
	    if (!Parse.applicationId) {
	      throw "You need to call Parse.initialize before using Parse.";
	    }
	    if (!path) {
	      path = "";
	    }
	    if (!Parse._.isString(path)) {
	      throw "Tried to get a Storage path that wasn't a String.";
	    }
	    if (path[0] === "/") {
	      path = path.substring(1);
	    }
	    return "Parse/" + Parse.applicationId + "/" + path;
	  };

	  /**
	   * Returns a Promise that is resolved with the unique string for this app on
	   * this machine.
	   * Gets reset when Storage is cleared.
	   */
	  Parse._installationId = null;
	  Parse._getInstallationId = function() {
	    // See if it's cached in RAM.
	    if (Parse._installationId) {
	      return Parse.Promise.as(Parse._installationId);
	    }

	    // Try to get it from Storage.
	    var path = Parse._getParsePath("installationId");
	    return (Parse.Storage.getItemAsync(path)
	      .then(function(value) {
	        Parse._installationId = value;

	        if (!Parse._installationId || Parse._installationId === "") {
	          // It wasn't in Storage, so create a new one.
	          var hexOctet = function() {
	            return (
	              Math.floor((1+Math.random())*0x10000).toString(16).substring(1)
	            );
	          };
	          Parse._installationId = (
	            hexOctet() + hexOctet() + "-" +
	            hexOctet() + "-" +
	            hexOctet() + "-" +
	            hexOctet() + "-" +
	            hexOctet() + hexOctet() + hexOctet());
	          return Parse.Storage.setItemAsync(path, Parse._installationId);
	        }

	        return Parse.Promise.as(Parse._installationId);
	      })
	    );
	  };

	  Parse._parseDate = function(iso8601) {
	    var regexp = new RegExp(
	      "^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})" + "T" +
	      "([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})" +
	      "(.([0-9]+))?" + "Z$");
	    var match = regexp.exec(iso8601);
	    if (!match) {
	      return null;
	    }

	    var year = match[1] || 0;
	    var month = (match[2] || 1) - 1;
	    var day = match[3] || 0;
	    var hour = match[4] || 0;
	    var minute = match[5] || 0;
	    var second = match[6] || 0;
	    var milli = match[8] || 0;

	    return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
	  };

	  Parse._ajaxIE8 = function(method, url, data) {
	    var promise = new Parse.Promise();
	    var xdr = new XDomainRequest();
	    xdr.onload = function() {
	      var response;
	      try {
	        response = JSON.parse(xdr.responseText);
	      } catch (e) {
	        promise.reject(e);
	      }
	      if (response) {
	        promise.resolve(response);
	      }
	    };
	    xdr.onerror = xdr.ontimeout = function() {
	      // Let's fake a real error message.
	      var fakeResponse = {
	        responseText: JSON.stringify({
	          code: Parse.Error.X_DOMAIN_REQUEST,
	          error: "IE's XDomainRequest does not supply error info."
	        })
	      };
	      promise.reject(fakeResponse);
	    };
	    xdr.onprogress = function() {};
	    xdr.open(method, url);
	    xdr.send(data);
	    return promise;
	  };

	  Parse._useXDomainRequest = function() {
	    if (typeof(XDomainRequest) !== "undefined") {
	      // We're in IE 8+.
	      if ('withCredentials' in new XMLHttpRequest()) {
	        // We're in IE 10+.
	        return false;
	      }
	      return true;
	    }
	    return false;
	  };

	  // TODO(klimt): Get rid of success/error usage in website.
	  Parse._ajax = function(method, url, data, success, error) {
	    var options = {
	      success: success,
	      error: error
	    };

	    if (Parse._useXDomainRequest()) {
	      return Parse._ajaxIE8(method, url, data)._thenRunCallbacks(options);
	    }

	    var promise = new Parse.Promise();
	    var attempts = 0;

	    var dispatch = function() {
	      var handled = false;
	      var xhr = new Parse.XMLHttpRequest();

	      xhr.onreadystatechange = function() {
	        if (xhr.readyState === 4) {
	          if (handled) {
	            return;
	          }
	          handled = true;

	          if (xhr.status >= 200 && xhr.status < 300) {
	            var response;
	            try {
	              response = JSON.parse(xhr.responseText);
	            } catch (e) {
	              promise.reject(e);
	            }
	            if (response) {
	              promise.resolve(response, xhr.status, xhr);
	            }
	          } else if (xhr.status >= 500) { // Retry on 5XX
	            if (++attempts < 5) {
	              // Exponentially-growing delay
	              var delay = Math.round(
	                Math.random() * 125 * Math.pow(2, attempts)
	              );
	              setTimeout(dispatch, delay);
	            } else {
	              // After 5 retries, fail
	              promise.reject(xhr);
	            }
	          } else {
	            promise.reject(xhr);
	          }
	        }
	      };

	      xhr.open(method, url, true);
	      xhr.setRequestHeader('Content-Type', 'text/plain');  // avoid pre-flight.
	      if (Parse._isNode) {
	        // Add a special user agent just for request from node.js.
	        xhr.setRequestHeader("User-Agent",
	                             "Parse/" + Parse.VERSION +
	                             " (NodeJS " + process.versions.node + ")");
	      }
	      xhr.send(data);
	    };

	    dispatch();
	    return promise._thenRunCallbacks(options); 
	  };

	  // A self-propagating extend function.
	  Parse._extend = function(protoProps, classProps) {
	    var child = inherits(this, protoProps, classProps);
	    child.extend = this.extend;
	    return child;
	  };

	  /**
	   * Options:
	   *   route: is classes, users, login, etc.
	   *   objectId: null if there is no associated objectId.
	   *   method: the http method for the REST API.
	   *   dataObject: the payload as an object, or null if there is none.
	   *   useMasterKey: overrides whether to use the master key if set.
	   * @ignore
	   */
	  Parse._request = function(options) {
	    var route = options.route;
	    var className = options.className;
	    var objectId = options.objectId;
	    var method = options.method;
	    var useMasterKey = options.useMasterKey;
	    var sessionToken = options.sessionToken;
	    var dataObject = options.data;

	    if (!Parse.applicationId) {
	      throw "You must specify your applicationId using Parse.initialize.";
	    }

	    if (!Parse.javaScriptKey && !Parse.masterKey) {
	      throw "You must specify a key using Parse.initialize.";
	    }

	    // TODO: We can remove this check later, but it's useful for development.
	    if (route !== "batch" &&
	        route !== "classes" &&
	        route !== "events" &&
	        route !== "files" &&
	        route !== "functions" &&
	        route !== "login" &&
	        route !== "logout" &&
	        route !== "push" &&
	        route !== "requestPasswordReset" &&
	        route !== "rest_verify_analytics" &&
	        route !== "users" &&
	        route !== "jobs" &&
	        route !== "config" &&
	        route !== "sessions" &&
	        route !== "upgradeToRevocableSession") {
	      throw "Bad route: '" + route + "'.";
	    }

	    var url = Parse.serverURL;
	    if (url.charAt(url.length - 1) !== "/") {
	      url += "/";
	    }
	    url += "1/" + route;
	    if (className) {
	      url += "/" + className;
	    }
	    if (objectId) {
	      url += "/" + objectId;
	    }

	    dataObject = Parse._.clone(dataObject || {});
	    if (method !== "POST") {
	      dataObject._method = method;
	      method = "POST";
	    }

	    if (Parse._.isUndefined(useMasterKey)) {
	      useMasterKey = Parse._useMasterKey;
	    }

	    dataObject._ApplicationId = Parse.applicationId;
	    if (!useMasterKey) {
	      dataObject._JavaScriptKey = Parse.javaScriptKey;
	    } else {
	      dataObject._MasterKey = Parse.masterKey;
	    }

	    dataObject._ClientVersion = Parse.VERSION;

	    return Parse._getInstallationId().then(function(iid) {
	      dataObject._InstallationId = iid;

	      if (sessionToken) {
	        return Parse.Promise.as({ _sessionToken: sessionToken });
	      }

	      return Parse.User._currentAsync();
	    }).then(function(currentUser) {
	      if (currentUser && currentUser._sessionToken) {
	        dataObject._SessionToken = currentUser._sessionToken;
	      }

	      if (Parse.User._isRevocableSessionEnabled) {
	        dataObject._RevocableSession = '1';
	      }

	      var data = JSON.stringify(dataObject);

	      return Parse._ajax(method, url, data);
	    }).then(null, function(response) {
	      // Transform the error into an instance of Parse.Error by trying to parse
	      // the error string as JSON.
	      var error;
	      if (response && response.responseText) {
	        try {
	          var errorJSON = JSON.parse(response.responseText);
	          error = new Parse.Error(errorJSON.code, errorJSON.error);
	        } catch (e) {
	          // If we fail to parse the error text, that's okay.
	          error = new Parse.Error(
	              Parse.Error.INVALID_JSON,
	              "Received an error with invalid JSON from Parse: " +
	                  response.responseText);
	        }
	      } else {
	        error = new Parse.Error(
	            Parse.Error.CONNECTION_FAILED,
	            "XMLHttpRequest failed: " + JSON.stringify(response));
	      }
	      // By explicitly returning a rejected Promise, this will work with
	      // either jQuery or Promises/A semantics.
	      return Parse.Promise.error(error);
	    });
	  };

	  // Helper function to get a value from a Backbone object as a property
	  // or as a function.
	  Parse._getValue = function(object, prop) {
	    if (!(object && object[prop])) {
	      return null;
	    }
	    return Parse._.isFunction(object[prop]) ? object[prop]() : object[prop];
	  };

	  /**
	   * Converts a value in a Parse Object into the appropriate representation.
	   * This is the JS equivalent of Java's Parse.maybeReferenceAndEncode(Object)
	   * if seenObjects is falsey. Otherwise any Parse.Objects not in
	   * seenObjects will be fully embedded rather than encoded
	   * as a pointer.  This array will be used to prevent going into an infinite
	   * loop because we have circular references.  If seenObjects
	   * is set, then none of the Parse Objects that are serialized can be dirty.
	   */
	  Parse._encode = function(value, seenObjects, disallowObjects) {
	    var _ = Parse._;
	    if (value instanceof Parse.Object) {
	      if (disallowObjects) {
	        throw "Parse.Objects not allowed here";
	      }
	      if (!seenObjects || _.include(seenObjects, value) || !value._hasData) {
	        return value._toPointer();
	      }
	      if (!value.dirty()) {
	        seenObjects = seenObjects.concat(value);
	        return Parse._encode(value._toFullJSON(seenObjects),
	                             seenObjects,
	                             disallowObjects);
	      }
	      throw "Tried to save an object with a pointer to a new, unsaved object.";
	    }
	    if (value instanceof Parse.ACL) {
	      return value.toJSON();
	    }
	    if (_.isDate(value)) {
	      return { "__type": "Date", "iso": value.toJSON() };
	    }
	    if (value instanceof Parse.GeoPoint) {
	      return value.toJSON();
	    }
	    if (_.isArray(value)) {
	      return _.map(value, function(x) {
	        return Parse._encode(x, seenObjects, disallowObjects);
	      });
	    }
	    if (_.isRegExp(value)) {
	      return value.source;
	    }
	    if (value instanceof Parse.Relation) {
	      return value.toJSON();
	    }
	    if (value instanceof Parse.Op) {
	      return value.toJSON();
	    }
	    if (value instanceof Parse.File) {
	      if (!value.url()) {
	        throw "Tried to save an object containing an unsaved file.";
	      }
	      return {
	        __type: "File",
	        name: value.name(),
	        url: value.url()
	      };
	    }
	    if (_.isObject(value)) {
	      var output = {};
	      Parse._objectEach(value, function(v, k) {
	        output[k] = Parse._encode(v, seenObjects, disallowObjects);
	      });
	      return output;
	    }
	    return value;
	  };

	  /**
	   * The inverse function of Parse._encode.
	   * TODO: make decode not mutate value.
	   */
	  Parse._decode = function(key, value) {
	    var _ = Parse._;
	    if (!_.isObject(value)) {
	      return value;
	    }
	    if (_.isArray(value)) {
	      Parse._arrayEach(value, function(v, k) {
	        value[k] = Parse._decode(k, v);
	      });
	      return value;
	    }
	    if (value instanceof Parse.Object) {
	      return value;
	    }
	    if (value instanceof Parse.File) {
	      return value;
	    }
	    if (value instanceof Parse.Op) {
	      return value;
	    }
	    if (value.__op) {
	      return Parse.Op._decode(value);
	    }
	    if (value.__type === "Pointer" && value.className) {
	      var pointer = Parse.Object._create(value.className);
	      pointer._finishFetch({ objectId: value.objectId }, false);
	      return pointer;
	    }
	    if (value.__type === "Object" && value.className) {
	      // It's an Object included in a query result.
	      var className = value.className;
	      delete value.__type;
	      delete value.className;
	      var object = Parse.Object._create(className);
	      object._finishFetch(value, true);
	      return object;
	    }
	    if (value.__type === "Date") {
	      return Parse._parseDate(value.iso);
	    }
	    if (value.__type === "GeoPoint") {
	      return new Parse.GeoPoint({
	        latitude: value.latitude,
	        longitude: value.longitude
	      });
	    }
	    if (key === "ACL") {
	      if (value instanceof Parse.ACL) {
	        return value;
	      }
	      return new Parse.ACL(value);
	    }
	    if (value.__type === "Relation") {
	      var relation = new Parse.Relation(null, key);
	      relation.targetClassName = value.className;
	      return relation;
	    }
	    if (value.__type === "File") {
	      var file = new Parse.File(value.name);
	      file._url = value.url;
	      return file;
	    }
	    Parse._objectEach(value, function(v, k) {
	      value[k] = Parse._decode(k, v);
	    });
	    return value;
	  };

	  Parse._arrayEach = Parse._.each;

	  /**
	   * Does a deep traversal of every item in object, calling func on every one.
	   * @param {Object} object The object or array to traverse deeply.
	   * @param {Function} func The function to call for every item. It will
	   *     be passed the item as an argument. If it returns a truthy value, that
	   *     value will replace the item in its parent container.
	   * @returns {} the result of calling func on the top-level object itself.
	   */
	  Parse._traverse = function(object, func, seen) {
	    if (object instanceof Parse.Object) {
	      seen = seen || [];
	      if (Parse._.indexOf(seen, object) >= 0) {
	        // We've already visited this object in this call.
	        return;
	      }
	      seen.push(object);
	      Parse._traverse(object.attributes, func, seen);
	      return func(object);
	    }
	    if (object instanceof Parse.Relation || object instanceof Parse.File) {
	      // Nothing needs to be done, but we don't want to recurse into the
	      // object's parent infinitely, so we catch this case.
	      return func(object);
	    }
	    if (Parse._.isArray(object)) {
	      Parse._.each(object, function(child, index) {
	        var newChild = Parse._traverse(child, func, seen);
	        if (newChild) {
	          object[index] = newChild;
	        }
	      });
	      return func(object);
	    }
	    if (Parse._.isObject(object)) {
	      Parse._each(object, function(child, key) {
	        var newChild = Parse._traverse(child, func, seen);
	        if (newChild) {
	          object[key] = newChild;
	        }
	      });
	      return func(object);
	    }
	    return func(object);
	  };

	  /**
	   * This is like _.each, except:
	   * * it doesn't work for so-called array-like objects,
	   * * it does work for dictionaries with a "length" attribute.
	   */
	  Parse._objectEach = Parse._each = function(obj, callback) {
	    var _ = Parse._;
	    if (_.isObject(obj)) {
	      _.each(_.keys(obj), function(key) {
	        callback(obj[key], key);
	      });
	    } else {
	      _.each(obj, callback);
	    }
	  };

	  // Helper function to check null or undefined.
	  Parse._isNullOrUndefined = function(x) {
	    return Parse._.isNull(x) || Parse._.isUndefined(x);
	  };
	}(this));

	/* global require: false, localStorage: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  
	  var Storage = {
	    async: false,
	  };

	  var hasLocalStorage = (typeof localStorage !== 'undefined');
	  if (hasLocalStorage) {
	    try {
	      localStorage.setItem('supported', true);
	      localStorage.removeItem('supported');
	    } catch(e) {
	      hasLocalStorage = false;
	    }
	  }
	  if (hasLocalStorage) {
	    Storage.getItem = function(path) {
	      return localStorage.getItem(path);
	    };

	    Storage.setItem = function(path, value) {
	      return localStorage.setItem(path, value);
	    };

	    Storage.removeItem = function(path) {
	      return localStorage.removeItem(path);
	    };

	    Storage.clear = function() {
	      return localStorage.clear();
	    };
	  } else if (true) {
	    var AsyncStorage;
	    try {
	      AsyncStorage = eval("require('AsyncStorage')"); // jshint ignore:line

	      Storage.async = true;

	      Storage.getItemAsync = function(path) {
	        var p = new Parse.Promise();
	        AsyncStorage.getItem(path, function(err, value) {
	          if (err) {
	            p.reject(err);
	          } else {
	            p.resolve(value);
	          }
	        });
	        return p;
	      };

	      Storage.setItemAsync = function(path, value) {
	        var p = new Parse.Promise();
	        AsyncStorage.setItem(path, value, function(err) {
	          if (err) {
	            p.reject(err);
	          } else {
	            p.resolve(value);
	          }
	        });
	        return p;
	      };

	      Storage.removeItemAsync = function(path) {
	        var p = new Parse.Promise();
	        AsyncStorage.removeItem(path, function(err) {
	          if (err) {
	            p.reject(err);
	          } else {
	            p.resolve();
	          }
	        });
	        return p;
	      };

	      Storage.clear = function() {
	        AsyncStorage.clear();
	      };
	    } catch (e) { }
	  }
	  if (!Storage.async && !Storage.getItem) {
	    var memMap = Storage.inMemoryMap = {};
	    Storage.getItem = function(path) {
	      if (memMap.hasOwnProperty(path)) {
	        return memMap[path];
	      }
	      return null;
	    };

	    Storage.setItem = function(path, value) {
	      memMap[path] = String(value);
	    };

	    Storage.removeItem = function(path) {
	      delete memMap[path];
	    };

	    Storage.clear = function() {
	      for (var key in memMap) {
	        if (memMap.hasOwnProperty(key)) {
	          delete memMap[key];
	        }
	      }
	    };
	  }

	  // We can use synchronous methods from async scenarios, but not vice-versa
	  if (!Storage.async) {
	    Storage.getItemAsync = function(path) {
	      return Parse.Promise.as(
	        Storage.getItem(path)
	      );
	    };

	    Storage.setItemAsync = function(path, value) {
	      Storage.setItem(path, value);
	      return Parse.Promise.as(value);
	    };

	    Storage.removeItemAsync = function(path) {
	      return Parse.Promise.as(
	        Storage.removeItem(path)
	      );
	    };
	  }

	  Parse.Storage = Storage;

	})(this);

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * @namespace Provides an interface to Parse's logging and analytics backend.
	   */
	  Parse.Analytics = Parse.Analytics || {};

	  _.extend(Parse.Analytics, /** @lends Parse.Analytics */ {
	    /**
	     * Tracks the occurrence of a custom event with additional dimensions.
	     * Parse will store a data point at the time of invocation with the given
	     * event name.
	     *
	     * Dimensions will allow segmentation of the occurrences of this custom
	     * event. Keys and values should be {@code String}s, and will throw
	     * otherwise.
	     *
	     * To track a user signup along with additional metadata, consider the
	     * following:
	     * <pre>
	     * var dimensions = {
	     *  gender: 'm',
	     *  source: 'web',
	     *  dayType: 'weekend'
	     * };
	     * Parse.Analytics.track('signup', dimensions);
	     * </pre>
	     *
	     * There is a default limit of 8 dimensions per event tracked.
	     *
	     * @param {String} name The name of the custom event to report to Parse as
	     * having happened.
	     * @param {Object} dimensions The dictionary of information by which to
	     * segment this event.
	     * @param {Object} options A Backbone-style callback object.
	     * @return {Parse.Promise} A promise that is resolved when the round-trip
	     * to the server completes.
	     */
	    track: function(name, dimensions, options) {
	      name = name || '';
	      name = name.replace(/^\s*/, '');
	      name = name.replace(/\s*$/, '');
	      if (name.length === 0) {
	        throw 'A name for the custom event must be provided';
	      }

	      _.each(dimensions, function(val, key) {
	        if (!_.isString(key) || !_.isString(val)) {
	          throw 'track() dimensions expects keys and values of type "string".';
	        }
	      });

	      options = options || {};
	      return Parse._request({
	        route: 'events',
	        className: name,
	        method: 'POST',
	        data: { dimensions: dimensions }
	      })._thenRunCallbacks(options);
	    }
	  });
	}(this));

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * @class Parse.Config is a local representation of configuration data that
	   * can be set from the Parse dashboard.
	   */
	  Parse.Config = function() {
	    this.attributes = {};
	    this._escapedAttributes = {};
	  };

	  /**
	   * Retrieves the most recently-fetched configuration object, either from
	   * memory or from local storage if necessary.
	   *
	   * @return {Parse.Config} The most recently-fetched Parse.Config if it
	   *     exists, else an empty Parse.Config.
	   */
	  Parse.Config.current = function() {
	    if (Parse.Config._currentConfig) {
	      return Parse.Config._currentConfig;
	    }

	    var config = new Parse.Config();

	    if (Parse.Storage.async) {
	      return config;
	    }

	    var configData = Parse.Storage.getItem(Parse._getParsePath(
	          Parse.Config._CURRENT_CONFIG_KEY));

	    if (configData) {  
	      config._finishFetch(JSON.parse(configData));
	      Parse.Config._currentConfig = config;
	    }
	    return config;
	  };

	  /**
	   * Gets a new configuration object from the server.
	   * @param {Object} options A Backbone-style options object.
	   * Valid options are:<ul>
	   *   <li>success: Function to call when the get completes successfully.
	   *   <li>error: Function to call when the get fails.
	   * </ul>
	   * @return {Parse.Promise} A promise that is resolved with a newly-created
	   *     configuration object when the get completes.
	   */
	  Parse.Config.get = function(options) {
	    options = options || {};

	    var request = Parse._request({
	      route: "config",
	      method: "GET",
	    });

	    return request.then(function(response) {
	      if (!response || !response.params) {
	        var errorObject = new Parse.Error(
	          Parse.Error.INVALID_JSON,
	          "Config JSON response invalid.");
	        return Parse.Promise.error(errorObject);
	      }

	      var config = new Parse.Config();
	      config._finishFetch(response);
	      Parse.Config._currentConfig = config;
	      return config;
	    })._thenRunCallbacks(options);
	  };

	  Parse.Config.prototype = {

	    /**
	     * Gets the HTML-escaped value of an attribute.
	     */
	    escape: function(attr) {
	      var html = this._escapedAttributes[attr];
	      if (html) {
	        return html;
	      }
	      var val = this.attributes[attr];
	      var escaped;
	      if (Parse._isNullOrUndefined(val)) {
	        escaped = '';
	      } else {
	        escaped = _.escape(val.toString());
	      }
	      this._escapedAttributes[attr] = escaped;
	      return escaped;
	    },

	    /**
	     * Gets the value of an attribute.
	     * @param {String} attr The name of an attribute.
	     */
	    get: function(attr) {
	      return this.attributes[attr];
	    },

	    _finishFetch: function(serverData) {
	      this.attributes = Parse._decode(null, _.clone(serverData.params));
	      if (!Parse.Storage.async) {
	        // We only provide local caching of config with synchronous Storage
	        Parse.Storage.setItem(
	            Parse._getParsePath(Parse.Config._CURRENT_CONFIG_KEY),
	            JSON.stringify(serverData));
	      }
	    }
	  };

	  Parse.Config._currentConfig = null;

	  Parse.Config._CURRENT_CONFIG_KEY = "currentConfig";

	}(this));


	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Constructs a new Parse.Error object with the given code and message.
	   * @param {Number} code An error code constant from <code>Parse.Error</code>.
	   * @param {String} message A detailed description of the error.
	   * @class
	   *
	   * <p>Class used for all objects passed to error callbacks.</p>
	   */
	  Parse.Error = function(code, message) {
	    this.code = code;
	    this.message = message;
	  };

	  _.extend(Parse.Error, /** @lends Parse.Error */ {
	    /**
	     * Error code indicating some error other than those enumerated here.
	     * @constant
	     */
	    OTHER_CAUSE: -1,

	    /**
	     * Error code indicating that something has gone wrong with the server.
	     * If you get this error code, it is Parse's fault. Contact us at 
	     * https://parse.com/help
	     * @constant
	     */
	    INTERNAL_SERVER_ERROR: 1,

	    /**
	     * Error code indicating the connection to the Parse servers failed.
	     * @constant
	     */
	    CONNECTION_FAILED: 100,

	    /**
	     * Error code indicating the specified object doesn't exist.
	     * @constant
	     */
	    OBJECT_NOT_FOUND: 101,

	    /**
	     * Error code indicating you tried to query with a datatype that doesn't
	     * support it, like exact matching an array or object.
	     * @constant
	     */
	    INVALID_QUERY: 102,

	    /**
	     * Error code indicating a missing or invalid classname. Classnames are
	     * case-sensitive. They must start with a letter, and a-zA-Z0-9_ are the
	     * only valid characters.
	     * @constant
	     */
	    INVALID_CLASS_NAME: 103,

	    /**
	     * Error code indicating an unspecified object id.
	     * @constant
	     */
	    MISSING_OBJECT_ID: 104,

	    /**
	     * Error code indicating an invalid key name. Keys are case-sensitive. They
	     * must start with a letter, and a-zA-Z0-9_ are the only valid characters.
	     * @constant
	     */
	    INVALID_KEY_NAME: 105,

	    /**
	     * Error code indicating a malformed pointer. You should not see this unless
	     * you have been mucking about changing internal Parse code.
	     * @constant
	     */
	    INVALID_POINTER: 106,

	    /**
	     * Error code indicating that badly formed JSON was received upstream. This
	     * either indicates you have done something unusual with modifying how
	     * things encode to JSON, or the network is failing badly.
	     * @constant
	     */
	    INVALID_JSON: 107,

	    /**
	     * Error code indicating that the feature you tried to access is only
	     * available internally for testing purposes.
	     * @constant
	     */
	    COMMAND_UNAVAILABLE: 108,

	    /**
	     * You must call Parse.initialize before using the Parse library.
	     * @constant
	     */
	    NOT_INITIALIZED: 109,

	    /**
	     * Error code indicating that a field was set to an inconsistent type.
	     * @constant
	     */
	    INCORRECT_TYPE: 111,

	    /**
	     * Error code indicating an invalid channel name. A channel name is either
	     * an empty string (the broadcast channel) or contains only a-zA-Z0-9_
	     * characters and starts with a letter.
	     * @constant
	     */
	    INVALID_CHANNEL_NAME: 112,

	    /**
	     * Error code indicating that push is misconfigured.
	     * @constant
	     */
	    PUSH_MISCONFIGURED: 115,

	    /**
	     * Error code indicating that the object is too large.
	     * @constant
	     */
	    OBJECT_TOO_LARGE: 116,

	    /**
	     * Error code indicating that the operation isn't allowed for clients.
	     * @constant
	     */
	    OPERATION_FORBIDDEN: 119,

	    /**
	     * Error code indicating the result was not found in the cache.
	     * @constant
	     */
	    CACHE_MISS: 120,

	    /**
	     * Error code indicating that an invalid key was used in a nested
	     * JSONObject.
	     * @constant
	     */
	    INVALID_NESTED_KEY: 121,

	    /**
	     * Error code indicating that an invalid filename was used for ParseFile.
	     * A valid file name contains only a-zA-Z0-9_. characters and is between 1
	     * and 128 characters.
	     * @constant
	     */
	    INVALID_FILE_NAME: 122,

	    /**
	     * Error code indicating an invalid ACL was provided.
	     * @constant
	     */
	    INVALID_ACL: 123,

	    /**
	     * Error code indicating that the request timed out on the server. Typically
	     * this indicates that the request is too expensive to run.
	     * @constant
	     */
	    TIMEOUT: 124,

	    /**
	     * Error code indicating that the email address was invalid.
	     * @constant
	     */
	    INVALID_EMAIL_ADDRESS: 125,

	    /**
	     * Error code indicating a missing content type.
	     * @constant
	     */
	    MISSING_CONTENT_TYPE: 126,

	    /**
	     * Error code indicating a missing content length.
	     * @constant
	     */
	    MISSING_CONTENT_LENGTH: 127,

	    /**
	     * Error code indicating an invalid content length.
	     * @constant
	     */
	    INVALID_CONTENT_LENGTH: 128,

	    /**
	     * Error code indicating a file that was too large.
	     * @constant
	     */
	    FILE_TOO_LARGE: 129,

	    /**
	     * Error code indicating an error saving a file.
	     * @constant
	     */
	    FILE_SAVE_ERROR: 130,

	    /**
	     * Error code indicating that a unique field was given a value that is
	     * already taken.
	     * @constant
	     */
	    DUPLICATE_VALUE: 137,

	    /**
	     * Error code indicating that a role's name is invalid.
	     * @constant
	     */
	    INVALID_ROLE_NAME: 139,

	    /**
	     * Error code indicating that an application quota was exceeded.  Upgrade to
	     * resolve.
	     * @constant
	     */
	    EXCEEDED_QUOTA: 140,

	    /**
	     * Error code indicating that a Cloud Code script failed.
	     * @constant
	     */
	    SCRIPT_FAILED: 141,

	    /**
	     * Error code indicating that a Cloud Code validation failed.
	     * @constant
	     */
	    VALIDATION_ERROR: 142,

	    /**
	     * Error code indicating that invalid image data was provided.
	     * @constant
	     */
	    INVALID_IMAGE_DATA: 150,

	    /**
	     * Error code indicating an unsaved file.
	     * @constant
	     */
	    UNSAVED_FILE_ERROR: 151,

	    /**
	     * Error code indicating an invalid push time.
	     */
	    INVALID_PUSH_TIME_ERROR: 152,

	    /**
	     * Error code indicating an error deleting a file.
	     * @constant
	     */
	    FILE_DELETE_ERROR: 153,

	    /**
	     * Error code indicating that the application has exceeded its request
	     * limit.
	     * @constant
	     */
	    REQUEST_LIMIT_EXCEEDED: 155,

	    /**
	     * Error code indicating an invalid event name.
	     */
	    INVALID_EVENT_NAME: 160,

	    /**
	     * Error code indicating that the username is missing or empty.
	     * @constant
	     */
	    USERNAME_MISSING: 200,

	    /**
	     * Error code indicating that the password is missing or empty.
	     * @constant
	     */
	    PASSWORD_MISSING: 201,

	    /**
	     * Error code indicating that the username has already been taken.
	     * @constant
	     */
	    USERNAME_TAKEN: 202,

	    /**
	     * Error code indicating that the email has already been taken.
	     * @constant
	     */
	    EMAIL_TAKEN: 203,

	    /**
	     * Error code indicating that the email is missing, but must be specified.
	     * @constant
	     */
	    EMAIL_MISSING: 204,

	    /**
	     * Error code indicating that a user with the specified email was not found.
	     * @constant
	     */
	    EMAIL_NOT_FOUND: 205,

	    /**
	     * Error code indicating that a user object without a valid session could
	     * not be altered.
	     * @constant
	     */
	    SESSION_MISSING: 206,

	    /**
	     * Error code indicating that a user can only be created through signup.
	     * @constant
	     */
	    MUST_CREATE_USER_THROUGH_SIGNUP: 207,

	    /**
	     * Error code indicating that an an account being linked is already linked
	     * to another user.
	     * @constant
	     */
	    ACCOUNT_ALREADY_LINKED: 208,

	    /**
	     * Error code indicating that the current session token is invalid.
	     * @constant
	     */
	    INVALID_SESSION_TOKEN: 209,

	    /**
	     * Error code indicating that a user cannot be linked to an account because
	     * that account's id could not be found.
	     * @constant
	     */
	    LINKED_ID_MISSING: 250,

	    /**
	     * Error code indicating that a user with a linked (e.g. Facebook) account
	     * has an invalid session.
	     * @constant
	     */
	    INVALID_LINKED_SESSION: 251,

	    /**
	     * Error code indicating that a service being linked (e.g. Facebook or
	     * Twitter) is unsupported.
	     * @constant
	     */
	    UNSUPPORTED_SERVICE: 252,

	    /**
	     * Error code indicating that there were multiple errors. Aggregate errors
	     * have an "errors" property, which is an array of error objects with more
	     * detail about each error that occurred.
	     * @constant
	     */
	    AGGREGATE_ERROR: 600,

	    /**
	     * Error code indicating the client was unable to read an input file.
	     * @constant
	     */
	    FILE_READ_ERROR: 601,

	    /**
	     * Error code indicating a real error code is unavailable because
	     * we had to use an XDomainRequest object to allow CORS requests in
	     * Internet Explorer, which strips the body from HTTP responses that have
	     * a non-2XX status code.
	     * @constant
	     */
	    X_DOMAIN_REQUEST: 602
	  });

	}(this));

	/*global _: false */
	(function() {
	  var root = this;
	  var Parse = (root.Parse || (root.Parse = {}));
	  var eventSplitter = /\s+/;
	  var slice = Array.prototype.slice;

	  /**
	   * @class
	   *
	   * <p>Parse.Events is a fork of Backbone's Events module, provided for your
	   * convenience.</p>
	   *
	   * <p>A module that can be mixed in to any object in order to provide
	   * it with custom events. You may bind callback functions to an event
	   * with `on`, or remove these functions with `off`.
	   * Triggering an event fires all callbacks in the order that `on` was
	   * called.
	   *
	   * <pre>
	   *     var object = {};
	   *     _.extend(object, Parse.Events);
	   *     object.on('expand', function(){ alert('expanded'); });
	   *     object.trigger('expand');</pre></p>
	   *
	   * <p>For more information, see the
	   * <a href="http://documentcloud.github.com/backbone/#Events">Backbone
	   * documentation</a>.</p>
	   */
	  Parse.Events = {
	    /**
	     * Bind one or more space separated events, `events`, to a `callback`
	     * function. Passing `"all"` will bind the callback to all events fired.
	     */
	    on: function(events, callback, context) {

	      var calls, event, node, tail, list;
	      if (!callback) {
	        return this;
	      }
	      events = events.split(eventSplitter);
	      calls = this._callbacks || (this._callbacks = {});

	      // Create an immutable callback list, allowing traversal during
	      // modification.  The tail is an empty object that will always be used
	      // as the next node.
	      event = events.shift();
	      while (event) {
	        list = calls[event];
	        node = list ? list.tail : {};
	        node.next = tail = {};
	        node.context = context;
	        node.callback = callback;
	        calls[event] = {tail: tail, next: list ? list.next : node};
	        event = events.shift();
	      }

	      return this;
	    },

	    /**
	     * Remove one or many callbacks. If `context` is null, removes all callbacks
	     * with that function. If `callback` is null, removes all callbacks for the
	     * event. If `events` is null, removes all bound callbacks for all events.
	     */
	    off: function(events, callback, context) {
	      var event, calls, node, tail, cb, ctx;

	      // No events, or removing *all* events.
	      if (!(calls = this._callbacks)) {
	        return;
	      }
	      if (!(events || callback || context)) {
	        delete this._callbacks;
	        return this;
	      }

	      // Loop through the listed events and contexts, splicing them out of the
	      // linked list of callbacks if appropriate.
	      events = events ? events.split(eventSplitter) : Object.keys(calls);
	      event = events.shift();
	      while (event) {
	        node = calls[event];
	        delete calls[event];
	        if (!node || !(callback || context)) {
	          event = events.shift();
	          continue;
	        }
	        // Create a new list, omitting the indicated callbacks.
	        tail = node.tail;
	        node = node.next;
	        while (node !== tail) {
	          cb = node.callback;
	          ctx = node.context;
	          if ((callback && cb !== callback) || (context && ctx !== context)) {
	            this.on(event, cb, ctx);
	          }
	          node = node.next;
	        }
	        event = events.shift();
	      }

	      return this;
	    },

	    /**
	     * Trigger one or many events, firing all bound callbacks. Callbacks are
	     * passed the same arguments as `trigger` is, apart from the event name
	     * (unless you're listening on `"all"`, which will cause your callback to
	     * receive the true name of the event as the first argument).
	     */
	    trigger: function(events) {
	      var event, node, calls, tail, args, all, rest;
	      if (!(calls = this._callbacks)) {
	        return this;
	      }
	      all = calls.all;
	      events = events.split(eventSplitter);
	      rest = slice.call(arguments, 1);

	      // For each event, walk through the linked list of callbacks twice,
	      // first to trigger the event, then to trigger any `"all"` callbacks.
	      event = events.shift();
	      while (event) {
	        node = calls[event];
	        if (node) {
	          tail = node.tail;
	          while ((node = node.next) !== tail) {
	            node.callback.apply(node.context || this, rest);
	          }
	        }
	        node = all;
	        if (node) {
	          tail = node.tail;
	          args = [event].concat(rest);
	          while ((node = node.next) !== tail) {
	            node.callback.apply(node.context || this, args);
	          }
	        }
	        event = events.shift();
	      }

	      return this;
	    }
	  };  

	  /**
	   * @function
	   */
	  Parse.Events.bind = Parse.Events.on;

	  /**
	   * @function
	   */
	  Parse.Events.unbind = Parse.Events.off;
	}.call(this));


	/*global navigator: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Creates a new GeoPoint with any of the following forms:<br>
	   *   <pre>
	   *   new GeoPoint(otherGeoPoint)
	   *   new GeoPoint(30, 30)
	   *   new GeoPoint([30, 30])
	   *   new GeoPoint({latitude: 30, longitude: 30})
	   *   new GeoPoint()  // defaults to (0, 0)
	   *   </pre>
	   * @class
	   *
	   * <p>Represents a latitude / longitude point that may be associated
	   * with a key in a ParseObject or used as a reference point for geo queries.
	   * This allows proximity-based queries on the key.</p>
	   *
	   * <p>Only one key in a class may contain a GeoPoint.</p>
	   *
	   * <p>Example:<pre>
	   *   var point = new Parse.GeoPoint(30.0, -20.0);
	   *   var object = new Parse.Object("PlaceObject");
	   *   object.set("location", point);
	   *   object.save();</pre></p>
	   */
	  Parse.GeoPoint = function(arg1, arg2) {
	    if (_.isArray(arg1)) {
	      Parse.GeoPoint._validate(arg1[0], arg1[1]);
	      this.latitude = arg1[0];
	      this.longitude = arg1[1];
	    } else if (_.isObject(arg1)) {
	      Parse.GeoPoint._validate(arg1.latitude, arg1.longitude);
	      this.latitude = arg1.latitude;
	      this.longitude = arg1.longitude;
	    } else if (_.isNumber(arg1) && _.isNumber(arg2)) {
	      Parse.GeoPoint._validate(arg1, arg2);
	      this.latitude = arg1;
	      this.longitude = arg2;
	    } else {
	      this.latitude = 0;
	      this.longitude = 0;
	    }

	    // Add properties so that anyone using Webkit or Mozilla will get an error
	    // if they try to set values that are out of bounds.
	    var self = this;
	    if (this.__defineGetter__ && this.__defineSetter__) {
	      // Use _latitude and _longitude to actually store the values, and add
	      // getters and setters for latitude and longitude.
	      this._latitude = this.latitude;
	      this._longitude = this.longitude;
	      this.__defineGetter__("latitude", function() {
	        return self._latitude;
	      });
	      this.__defineGetter__("longitude", function() {
	        return self._longitude;
	      });
	      this.__defineSetter__("latitude", function(val) {
	        Parse.GeoPoint._validate(val, self.longitude);
	        self._latitude = val;
	      });
	      this.__defineSetter__("longitude", function(val) {
	        Parse.GeoPoint._validate(self.latitude, val);
	        self._longitude = val;
	      });
	    }
	  };

	  /**
	   * @lends Parse.GeoPoint.prototype
	   * @property {float} latitude North-south portion of the coordinate, in range
	   *   [-90, 90].  Throws an exception if set out of range in a modern browser.
	   * @property {float} longitude East-west portion of the coordinate, in range
	   *   [-180, 180].  Throws if set out of range in a modern browser.
	   */

	  /**
	   * Throws an exception if the given lat-long is out of bounds.
	   */
	  Parse.GeoPoint._validate = function(latitude, longitude) {
	    if (latitude < -90.0) {
	      throw "Parse.GeoPoint latitude " + latitude + " < -90.0.";
	    }
	    if (latitude > 90.0) {
	      throw "Parse.GeoPoint latitude " + latitude + " > 90.0.";
	    }
	    if (longitude < -180.0) {
	      throw "Parse.GeoPoint longitude " + longitude + " < -180.0.";
	    }
	    if (longitude > 180.0) {
	      throw "Parse.GeoPoint longitude " + longitude + " > 180.0.";
	    }
	  };

	  /**
	   * Creates a GeoPoint with the user's current location, if available.
	   * Calls options.success with a new GeoPoint instance or calls options.error.
	   * @param {Object} options An object with success and error callbacks.
	   */
	  Parse.GeoPoint.current = function(options) {
	    var promise = new Parse.Promise();
	    navigator.geolocation.getCurrentPosition(function(location) {
	      promise.resolve(new Parse.GeoPoint({
	        latitude: location.coords.latitude,
	        longitude: location.coords.longitude
	      }));

	    }, function(error) {
	      promise.reject(error);
	    });

	    return promise._thenRunCallbacks(options);
	  };

	  Parse.GeoPoint.prototype = {
	    /**
	     * Returns a JSON representation of the GeoPoint, suitable for Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      Parse.GeoPoint._validate(this.latitude, this.longitude);
	      return {
	        "__type": "GeoPoint",
	        latitude: this.latitude,
	        longitude: this.longitude
	      };
	    },

	    /**
	     * Returns the distance from this GeoPoint to another in radians.
	     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
	     * @return {Number}
	     */
	    radiansTo: function(point) {
	      var d2r = Math.PI / 180.0;
	      var lat1rad = this.latitude * d2r;
	      var long1rad = this.longitude * d2r;
	      var lat2rad = point.latitude * d2r;
	      var long2rad = point.longitude * d2r;
	      var deltaLat = lat1rad - lat2rad;
	      var deltaLong = long1rad - long2rad;
	      var sinDeltaLatDiv2 = Math.sin(deltaLat / 2);
	      var sinDeltaLongDiv2 = Math.sin(deltaLong / 2);
	      // Square of half the straight line chord distance between both points.
	      var a = ((sinDeltaLatDiv2 * sinDeltaLatDiv2) +
	               (Math.cos(lat1rad) * Math.cos(lat2rad) *
	                sinDeltaLongDiv2 * sinDeltaLongDiv2));
	      a = Math.min(1.0, a);
	      return 2 * Math.asin(Math.sqrt(a));
	    },

	    /**
	     * Returns the distance from this GeoPoint to another in kilometers.
	     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
	     * @return {Number}
	     */
	    kilometersTo: function(point) {
	      return this.radiansTo(point) * 6371.0;
	    },

	    /**
	     * Returns the distance from this GeoPoint to another in miles.
	     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.
	     * @return {Number}
	     */
	    milesTo: function(point) {
	      return this.radiansTo(point) * 3958.8;
	    }
	  };
	}(this));

	/*global navigator: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  var PUBLIC_KEY = "*";

	  /**
	   * Creates a new ACL.
	   * If no argument is given, the ACL has no permissions for anyone.
	   * If the argument is a Parse.User, the ACL will have read and write
	   *   permission for only that user.
	   * If the argument is any other JSON object, that object will be interpretted
	   *   as a serialized ACL created with toJSON().
	   * @see Parse.Object#setACL
	   * @class
	   *
	   * <p>An ACL, or Access Control List can be added to any
	   * <code>Parse.Object</code> to restrict access to only a subset of users
	   * of your application.</p>
	   */
	  Parse.ACL = function(arg1) {
	    var self = this;
	    self.permissionsById = {};
	    if (_.isObject(arg1)) {
	      if (arg1 instanceof Parse.User) {
	        self.setReadAccess(arg1, true);
	        self.setWriteAccess(arg1, true);
	      } else {
	        if (_.isFunction(arg1)) {
	          throw "Parse.ACL() called with a function.  Did you forget ()?";
	        }
	        Parse._objectEach(arg1, function(accessList, userId) {
	          if (!_.isString(userId)) {
	            throw "Tried to create an ACL with an invalid userId.";
	          }
	          self.permissionsById[userId] = {};
	          Parse._objectEach(accessList, function(allowed, permission) {
	            if (permission !== "read" && permission !== "write") {
	              throw "Tried to create an ACL with an invalid permission type.";
	            }
	            if (!_.isBoolean(allowed)) {
	              throw "Tried to create an ACL with an invalid permission value.";
	            }
	            self.permissionsById[userId][permission] = allowed;
	          });
	        });
	      }
	    }
	  };

	  /**
	   * Returns a JSON-encoded version of the ACL.
	   * @return {Object}
	   */
	  Parse.ACL.prototype.toJSON = function() {
	    return _.clone(this.permissionsById);
	  };

	  Parse.ACL.prototype._setAccess = function(accessType, userId, allowed) {
	    if (userId instanceof Parse.User) {
	      userId = userId.id;
	    } else if (userId instanceof Parse.Role) {
	      userId = "role:" + userId.getName();
	    }
	    if (!_.isString(userId)) {
	      throw "userId must be a string.";
	    }
	    if (!_.isBoolean(allowed)) {
	      throw "allowed must be either true or false.";
	    }
	    var permissions = this.permissionsById[userId];
	    if (!permissions) {
	      if (!allowed) {
	        // The user already doesn't have this permission, so no action needed.
	        return;
	      } else {
	        permissions = {};
	        this.permissionsById[userId] = permissions;
	      }
	    }

	    if (allowed) {
	      this.permissionsById[userId][accessType] = true;
	    } else {
	      delete permissions[accessType];
	      if (_.isEmpty(permissions)) {
	        delete permissions[userId];
	      }
	    }
	  };

	  Parse.ACL.prototype._getAccess = function(accessType, userId) {
	    if (userId instanceof Parse.User) {
	      userId = userId.id;
	    } else if (userId instanceof Parse.Role) {
	      userId = "role:" + userId.getName();
	    }
	    var permissions = this.permissionsById[userId];
	    if (!permissions) {
	      return false;
	    }
	    return permissions[accessType] ? true : false;
	  };

	  /**
	   * Set whether the given user is allowed to read this object.
	   * @param userId An instance of Parse.User or its objectId.
	   * @param {Boolean} allowed Whether that user should have read access.
	   */
	  Parse.ACL.prototype.setReadAccess = function(userId, allowed) {
	    this._setAccess("read", userId, allowed);
	  };

	  /**
	   * Get whether the given user id is *explicitly* allowed to read this object.
	   * Even if this returns false, the user may still be able to access it if
	   * getPublicReadAccess returns true or a role that the user belongs to has
	   * write access.
	   * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	   * @return {Boolean}
	   */
	  Parse.ACL.prototype.getReadAccess = function(userId) {
	    return this._getAccess("read", userId);
	  };

	  /**
	   * Set whether the given user id is allowed to write this object.
	   * @param userId An instance of Parse.User or its objectId, or a Parse.Role..
	   * @param {Boolean} allowed Whether that user should have write access.
	   */
	  Parse.ACL.prototype.setWriteAccess = function(userId, allowed) {
	    this._setAccess("write", userId, allowed);
	  };

	  /**
	   * Get whether the given user id is *explicitly* allowed to write this object.
	   * Even if this returns false, the user may still be able to write it if
	   * getPublicWriteAccess returns true or a role that the user belongs to has
	   * write access.
	   * @param userId An instance of Parse.User or its objectId, or a Parse.Role.
	   * @return {Boolean}
	   */
	  Parse.ACL.prototype.getWriteAccess = function(userId) {
	    return this._getAccess("write", userId);
	  };

	  /**
	   * Set whether the public is allowed to read this object.
	   * @param {Boolean} allowed
	   */
	  Parse.ACL.prototype.setPublicReadAccess = function(allowed) {
	    this.setReadAccess(PUBLIC_KEY, allowed);
	  };

	  /**
	   * Get whether the public is allowed to read this object.
	   * @return {Boolean}
	   */
	  Parse.ACL.prototype.getPublicReadAccess = function() {
	    return this.getReadAccess(PUBLIC_KEY);
	  };

	  /**
	   * Set whether the public is allowed to write this object.
	   * @param {Boolean} allowed
	   */
	  Parse.ACL.prototype.setPublicWriteAccess = function(allowed) {
	    this.setWriteAccess(PUBLIC_KEY, allowed);
	  };

	  /**
	   * Get whether the public is allowed to write this object.
	   * @return {Boolean}
	   */
	  Parse.ACL.prototype.getPublicWriteAccess = function() {
	    return this.getWriteAccess(PUBLIC_KEY);
	  };
	  
	  /**
	   * Get whether users belonging to the given role are allowed
	   * to read this object. Even if this returns false, the role may
	   * still be able to write it if a parent role has read access.
	   * 
	   * @param role The name of the role, or a Parse.Role object.
	   * @return {Boolean} true if the role has read access. false otherwise.
	   * @throws {String} If role is neither a Parse.Role nor a String.
	   */
	  Parse.ACL.prototype.getRoleReadAccess = function(role) {
	    if (role instanceof Parse.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      return this.getReadAccess("role:" + role);
	    }
	    throw "role must be a Parse.Role or a String";
	  };
	  
	  /**
	   * Get whether users belonging to the given role are allowed
	   * to write this object. Even if this returns false, the role may
	   * still be able to write it if a parent role has write access.
	   * 
	   * @param role The name of the role, or a Parse.Role object.
	   * @return {Boolean} true if the role has write access. false otherwise.
	   * @throws {String} If role is neither a Parse.Role nor a String.
	   */
	  Parse.ACL.prototype.getRoleWriteAccess = function(role) {
	    if (role instanceof Parse.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      return this.getWriteAccess("role:" + role);
	    }
	    throw "role must be a Parse.Role or a String";
	  };
	  
	  /**
	   * Set whether users belonging to the given role are allowed
	   * to read this object.
	   * 
	   * @param role The name of the role, or a Parse.Role object.
	   * @param {Boolean} allowed Whether the given role can read this object.
	   * @throws {String} If role is neither a Parse.Role nor a String.
	   */
	  Parse.ACL.prototype.setRoleReadAccess = function(role, allowed) {
	    if (role instanceof Parse.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      this.setReadAccess("role:" + role, allowed);
	      return;
	    }
	    throw "role must be a Parse.Role or a String";
	  };
	  
	  /**
	   * Set whether users belonging to the given role are allowed
	   * to write this object.
	   * 
	   * @param role The name of the role, or a Parse.Role object.
	   * @param {Boolean} allowed Whether the given role can write this object.
	   * @throws {String} If role is neither a Parse.Role nor a String.
	   */
	  Parse.ACL.prototype.setRoleWriteAccess = function(role, allowed) {
	    if (role instanceof Parse.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      this.setWriteAccess("role:" + role, allowed);
	      return;
	    }
	    throw "role must be a Parse.Role or a String";
	  };

	}(this));

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * @class
	   * A Parse.Op is an atomic operation that can be applied to a field in a
	   * Parse.Object. For example, calling <code>object.set("foo", "bar")</code>
	   * is an example of a Parse.Op.Set. Calling <code>object.unset("foo")</code>
	   * is a Parse.Op.Unset. These operations are stored in a Parse.Object and
	   * sent to the server as part of <code>object.save()</code> operations.
	   * Instances of Parse.Op should be immutable.
	   *
	   * You should not create subclasses of Parse.Op or instantiate Parse.Op
	   * directly.
	   */
	  Parse.Op = function() {
	    this._initialize.apply(this, arguments);
	  };

	  Parse.Op.prototype = {
	    _initialize: function() {}
	  };

	  _.extend(Parse.Op, {
	    /**
	     * To create a new Op, call Parse.Op._extend();
	     */
	    _extend: Parse._extend,

	    // A map of __op string to decoder function.
	    _opDecoderMap: {},

	    /**
	     * Registers a function to convert a json object with an __op field into an
	     * instance of a subclass of Parse.Op.
	     */
	    _registerDecoder: function(opName, decoder) {
	      Parse.Op._opDecoderMap[opName] = decoder;
	    },

	    /**
	     * Converts a json object into an instance of a subclass of Parse.Op.
	     */
	    _decode: function(json) {
	      var decoder = Parse.Op._opDecoderMap[json.__op];
	      if (decoder) {
	        return decoder(json);
	      } else {
	        return undefined;
	      }
	    }
	  });

	  /*
	   * Add a handler for Batch ops.
	   */
	  Parse.Op._registerDecoder("Batch", function(json) {
	    var op = null;
	    Parse._arrayEach(json.ops, function(nextOp) {
	      nextOp = Parse.Op._decode(nextOp);
	      op = nextOp._mergeWithPrevious(op);
	    });
	    return op;
	  });

	  /**
	   * @class
	   * A Set operation indicates that either the field was changed using
	   * Parse.Object.set, or it is a mutable container that was detected as being
	   * changed.
	   */
	  Parse.Op.Set = Parse.Op._extend(/** @lends Parse.Op.Set.prototype */ {
	    _initialize: function(value) {
	      this._value = value;
	    },

	    /**
	     * Returns the new value of this field after the set.
	     */
	    value: function() {
	      return this._value;
	    },

	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return Parse._encode(this.value());
	    },

	    _mergeWithPrevious: function(previous) {
	      return this;
	    },

	    _estimate: function(oldValue) {
	      return this.value();
	    }
	  });

	  /**
	   * A sentinel value that is returned by Parse.Op.Unset._estimate to
	   * indicate the field should be deleted. Basically, if you find _UNSET as a
	   * value in your object, you should remove that key.
	   */
	  Parse.Op._UNSET = {};

	  /**
	   * @class
	   * An Unset operation indicates that this field has been deleted from the
	   * object.
	   */
	  Parse.Op.Unset = Parse.Op._extend(/** @lends Parse.Op.Unset.prototype */ {
	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return { __op: "Delete" };
	    },

	    _mergeWithPrevious: function(previous) {
	      return this;
	    },

	    _estimate: function(oldValue) {
	      return Parse.Op._UNSET;
	    }
	  });

	  Parse.Op._registerDecoder("Delete", function(json) {
	    return new Parse.Op.Unset();
	  });

	  /**
	   * @class
	   * An Increment is an atomic operation where the numeric value for the field
	   * will be increased by a given amount.
	   */
	  Parse.Op.Increment = Parse.Op._extend(
	      /** @lends Parse.Op.Increment.prototype */ {

	    _initialize: function(amount) {
	      this._amount = amount;
	    },

	    /**
	     * Returns the amount to increment by.
	     * @return {Number} the amount to increment by.
	     */
	    amount: function() {
	      return this._amount;
	    },

	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return { __op: "Increment", amount: this._amount };
	    },

	    _mergeWithPrevious: function(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof Parse.Op.Unset) {
	        return new Parse.Op.Set(this.amount());
	      } else if (previous instanceof Parse.Op.Set) {
	        return new Parse.Op.Set(previous.value() + this.amount());
	      } else if (previous instanceof Parse.Op.Increment) {
	        return new Parse.Op.Increment(this.amount() + previous.amount());
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },

	    _estimate: function(oldValue) {
	      if (!oldValue) {
	        return this.amount();
	      }
	      return oldValue + this.amount();
	    }
	  });

	  Parse.Op._registerDecoder("Increment", function(json) {
	    return new Parse.Op.Increment(json.amount);
	  });

	  /**
	   * @class
	   * Add is an atomic operation where the given objects will be appended to the
	   * array that is stored in this field.
	   */
	  Parse.Op.Add = Parse.Op._extend(/** @lends Parse.Op.Add.prototype */ {
	    _initialize: function(objects) {
	      this._objects = objects;
	    },

	    /**
	     * Returns the objects to be added to the array.
	     * @return {Array} The objects to be added to the array.
	     */
	    objects: function() {
	      return this._objects;
	    },

	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return { __op: "Add", objects: Parse._encode(this.objects()) };
	    },

	    _mergeWithPrevious: function(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof Parse.Op.Unset) {
	        return new Parse.Op.Set(this.objects());
	      } else if (previous instanceof Parse.Op.Set) {
	        return new Parse.Op.Set(this._estimate(previous.value()));
	      } else if (previous instanceof Parse.Op.Add) {
	        return new Parse.Op.Add(previous.objects().concat(this.objects()));
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },

	    _estimate: function(oldValue) {
	      if (!oldValue) {
	        return _.clone(this.objects());
	      } else {
	        return oldValue.concat(this.objects());
	      }
	    }
	  });

	  Parse.Op._registerDecoder("Add", function(json) {
	    return new Parse.Op.Add(Parse._decode(undefined, json.objects));
	  });

	  /**
	   * @class
	   * AddUnique is an atomic operation where the given items will be appended to
	   * the array that is stored in this field only if they were not already
	   * present in the array.
	   */
	  Parse.Op.AddUnique = Parse.Op._extend(
	      /** @lends Parse.Op.AddUnique.prototype */ {

	    _initialize: function(objects) {
	      this._objects = _.uniq(objects);
	    },

	    /**
	     * Returns the objects to be added to the array.
	     * @return {Array} The objects to be added to the array.
	     */
	    objects: function() {
	      return this._objects;
	    },

	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return { __op: "AddUnique", objects: Parse._encode(this.objects()) };
	    },

	    _mergeWithPrevious: function(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof Parse.Op.Unset) {
	        return new Parse.Op.Set(this.objects());
	      } else if (previous instanceof Parse.Op.Set) {
	        return new Parse.Op.Set(this._estimate(previous.value()));
	      } else if (previous instanceof Parse.Op.AddUnique) {
	        return new Parse.Op.AddUnique(this._estimate(previous.objects()));
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },

	    _estimate: function(oldValue) {
	      if (!oldValue) {
	        return _.clone(this.objects());
	      } else {
	        // We can't just take the _.uniq(_.union(...)) of oldValue and
	        // this.objects, because the uniqueness may not apply to oldValue
	        // (especially if the oldValue was set via .set())
	        var newValue = _.clone(oldValue);
	        Parse._arrayEach(this.objects(), function(obj) {
	          if (obj instanceof Parse.Object && obj.id) {
	            var matchingObj = _.find(newValue, function(anObj) {
	              return (anObj instanceof Parse.Object) && (anObj.id === obj.id);
	            });
	            if (!matchingObj) {
	              newValue.push(obj);
	            } else {
	              var index = _.indexOf(newValue, matchingObj);
	              newValue[index] = obj;
	            }
	          } else if (!_.contains(newValue, obj)) {
	            newValue.push(obj);
	          }
	        });
	        return newValue;
	      }
	    }
	  });

	  Parse.Op._registerDecoder("AddUnique", function(json) {
	    return new Parse.Op.AddUnique(Parse._decode(undefined, json.objects));
	  });

	  /**
	   * @class
	   * Remove is an atomic operation where the given objects will be removed from
	   * the array that is stored in this field.
	   */
	  Parse.Op.Remove = Parse.Op._extend(/** @lends Parse.Op.Remove.prototype */ {
	    _initialize: function(objects) {
	      this._objects = _.uniq(objects);
	    },

	    /**
	     * Returns the objects to be removed from the array.
	     * @return {Array} The objects to be removed from the array.
	     */
	    objects: function() {
	      return this._objects;
	    },

	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return { __op: "Remove", objects: Parse._encode(this.objects()) };
	    },

	    _mergeWithPrevious: function(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof Parse.Op.Unset) {
	        return previous;
	      } else if (previous instanceof Parse.Op.Set) {
	        return new Parse.Op.Set(this._estimate(previous.value()));
	      } else if (previous instanceof Parse.Op.Remove) {
	        return new Parse.Op.Remove(_.union(previous.objects(), this.objects()));
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },

	    _estimate: function(oldValue) {
	      if (!oldValue) {
	        return [];
	      } else {
	        var newValue = _.difference(oldValue, this.objects());
	        // If there are saved Parse Objects being removed, also remove them.
	        Parse._arrayEach(this.objects(), function(obj) {
	          if (obj instanceof Parse.Object && obj.id) {
	            newValue = _.reject(newValue, function(other) {
	              return (other instanceof Parse.Object) && (other.id === obj.id);
	            });
	          }
	        });
	        return newValue;
	      }
	    }
	  });

	  Parse.Op._registerDecoder("Remove", function(json) {
	    return new Parse.Op.Remove(Parse._decode(undefined, json.objects));
	  });

	  /**
	   * @class
	   * A Relation operation indicates that the field is an instance of
	   * Parse.Relation, and objects are being added to, or removed from, that
	   * relation.
	   */
	  Parse.Op.Relation = Parse.Op._extend(
	      /** @lends Parse.Op.Relation.prototype */ {

	    _initialize: function(adds, removes) {
	      this._targetClassName = null;

	      var self = this;

	      var pointerToId = function(object) {
	        if (object instanceof Parse.Object) {
	          if (!object.id) {
	            throw "You can't add an unsaved Parse.Object to a relation.";
	          }
	          if (!self._targetClassName) {
	            self._targetClassName = object.className;
	          }
	          if (self._targetClassName !== object.className) {
	            throw "Tried to create a Parse.Relation with 2 different types: " +
	                  self._targetClassName + " and " + object.className + ".";
	          }
	          return object.id;
	        }
	        return object;
	      };

	      this.relationsToAdd = _.uniq(_.map(adds, pointerToId));
	      this.relationsToRemove = _.uniq(_.map(removes, pointerToId));
	    },

	    /**
	     * Returns an array of unfetched Parse.Object that are being added to the
	     * relation.
	     * @return {Array}
	     */
	    added: function() {
	      var self = this;
	      return _.map(this.relationsToAdd, function(objectId) {
	        var object = Parse.Object._create(self._targetClassName);
	        object.id = objectId;
	        return object;
	      });
	    },

	    /**
	     * Returns an array of unfetched Parse.Object that are being removed from
	     * the relation.
	     * @return {Array}
	     */
	    removed: function() {
	      var self = this;
	      return _.map(this.relationsToRemove, function(objectId) {
	        var object = Parse.Object._create(self._targetClassName);
	        object.id = objectId;
	        return object;
	      });
	    },

	    /**
	     * Returns a JSON version of the operation suitable for sending to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      var adds = null;
	      var removes = null;
	      var self = this;
	      var idToPointer = function(id) {
	        return { __type: 'Pointer',
	                 className: self._targetClassName,
	                 objectId: id };
	      };
	      var pointers = null;
	      if (this.relationsToAdd.length > 0) {
	        pointers = _.map(this.relationsToAdd, idToPointer);
	        adds = { "__op": "AddRelation", "objects": pointers };
	      }

	      if (this.relationsToRemove.length > 0) {
	        pointers = _.map(this.relationsToRemove, idToPointer);
	        removes = { "__op": "RemoveRelation", "objects": pointers };
	      }

	      if (adds && removes) {
	        return { "__op": "Batch", "ops": [adds, removes]};
	      }

	      return adds || removes || {};
	    },

	    _mergeWithPrevious: function(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof Parse.Op.Unset) {
	        throw "You can't modify a relation after deleting it.";
	      } else if (previous instanceof Parse.Op.Relation) {
	        if (previous._targetClassName &&
	            previous._targetClassName !== this._targetClassName) {
	          throw "Related object must be of class " + previous._targetClassName +
	              ", but " + this._targetClassName + " was passed in.";
	        }
	        var newAdd = _.union(_.difference(previous.relationsToAdd,
	                                          this.relationsToRemove),
	                             this.relationsToAdd);
	        var newRemove = _.union(_.difference(previous.relationsToRemove,
	                                             this.relationsToAdd),
	                                this.relationsToRemove);

	        var newRelation = new Parse.Op.Relation(newAdd, newRemove);
	        newRelation._targetClassName = this._targetClassName;
	        return newRelation;
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },

	    _estimate: function(oldValue, object, key) {
	      if (!oldValue) {
	        var relation = new Parse.Relation(object, key);
	        relation.targetClassName = this._targetClassName;
	      } else if (oldValue instanceof Parse.Relation) {
	        if (this._targetClassName) {
	          if (oldValue.targetClassName) {
	            if (oldValue.targetClassName !== this._targetClassName) {
	              throw "Related object must be a " + oldValue.targetClassName +
	                  ", but a " + this._targetClassName + " was passed in.";
	            }
	          } else {
	            oldValue.targetClassName = this._targetClassName;
	          }
	        }
	        return oldValue;
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    }
	  });

	  Parse.Op._registerDecoder("AddRelation", function(json) {
	    return new Parse.Op.Relation(Parse._decode(undefined, json.objects), []);
	  });
	  Parse.Op._registerDecoder("RemoveRelation", function(json) {
	    return new Parse.Op.Relation([], Parse._decode(undefined, json.objects));
	  });

	}(this));

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Creates a new Relation for the given parent object and key. This
	   * constructor should rarely be used directly, but rather created by
	   * Parse.Object.relation.
	   * @param {Parse.Object} parent The parent of this relation.
	   * @param {String} key The key for this relation on the parent.
	   * @see Parse.Object#relation
	   * @class
	   *
	   * <p>
	   * A class that is used to access all of the children of a many-to-many
	   * relationship.  Each instance of Parse.Relation is associated with a
	   * particular parent object and key.
	   * </p>
	   */
	  Parse.Relation = function(parent, key) {
	    this.parent = parent;
	    this.key = key;
	    this.targetClassName = null;
	  };

	  Parse.Relation.prototype = {
	    /**
	     * Makes sure that this relation has the right parent and key.
	     */
	    _ensureParentAndKey: function(parent, key) {
	      this.parent = this.parent || parent;
	      this.key = this.key || key;
	      if (this.parent !== parent) {
	        throw "Internal Error. Relation retrieved from two different Objects.";
	      }
	      if (this.key !== key) {
	        throw "Internal Error. Relation retrieved from two different keys.";
	      }
	    },

	    /**
	     * Adds a Parse.Object or an array of Parse.Objects to the relation.
	     * @param {} objects The item or items to add.
	     */
	    add: function(objects) {
	      if (!_.isArray(objects)) {
	        objects = [objects];
	      }

	      var change = new Parse.Op.Relation(objects, []);
	      this.parent.set(this.key, change);
	      this.targetClassName = change._targetClassName;
	    },

	    /**
	     * Removes a Parse.Object or an array of Parse.Objects from this relation.
	     * @param {} objects The item or items to remove.
	     */
	    remove: function(objects) {
	      if (!_.isArray(objects)) {
	        objects = [objects];
	      }

	      var change = new Parse.Op.Relation([], objects);
	      this.parent.set(this.key, change);
	      this.targetClassName = change._targetClassName;
	    },

	    /**
	     * Returns a JSON version of the object suitable for saving to disk.
	     * @return {Object}
	     */
	    toJSON: function() {
	      return { "__type": "Relation", "className": this.targetClassName };
	    },

	    /**
	     * Returns a Parse.Query that is limited to objects in this
	     * relation.
	     * @return {Parse.Query}
	     */
	    query: function() {
	      var targetClass;
	      var query;
	      if (!this.targetClassName) {
	        targetClass = Parse.Object._getSubclass(this.parent.className);
	        query = new Parse.Query(targetClass);
	        query._extraOptions.redirectClassNameForKey = this.key;
	      } else {
	        targetClass = Parse.Object._getSubclass(this.targetClassName);
	        query = new Parse.Query(targetClass);
	      }
	      query._addCondition("$relatedTo", "object", this.parent._toPointer());
	      query._addCondition("$relatedTo", "key", this.key);

	      return query;
	    }
	  };
	}(this));

	/*global window: false, process: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * A Promise is returned by async methods as a hook to provide callbacks to be
	   * called when the async task is fulfilled.
	   *
	   * <p>Typical usage would be like:<pre>
	   *    query.find().then(function(results) {
	   *      results[0].set("foo", "bar");
	   *      return results[0].saveAsync();
	   *    }).then(function(result) {
	   *      console.log("Updated " + result.id);
	   *    });
	   * </pre></p>
	   *
	   * @see Parse.Promise.prototype.then
	   * @class
	   */
	  Parse.Promise = function() {
	    this._resolved = false;
	    this._rejected = false;
	    this._resolvedCallbacks = [];
	    this._rejectedCallbacks = [];
	  };

	  _.extend(Parse.Promise, /** @lends Parse.Promise */ {

	    _isPromisesAPlusCompliant: false,

	    /**
	     * Returns true iff the given object fulfils the Promise interface.
	     * @return {Boolean}
	     */
	    is: function(promise) {
	      return promise && promise.then && _.isFunction(promise.then);
	    },

	    /**
	     * Returns a new promise that is resolved with a given value.
	     * @return {Parse.Promise} the new promise.
	     */
	    as: function() {
	      var promise = new Parse.Promise();
	      promise.resolve.apply(promise, arguments);
	      return promise;
	    },

	    /**
	     * Returns a new promise that is rejected with a given error.
	     * @return {Parse.Promise} the new promise.
	     */
	    error: function() {
	      var promise = new Parse.Promise();
	      promise.reject.apply(promise, arguments);
	      return promise;
	    },

	    /**
	     * Returns a new promise that is fulfilled when all of the input promises
	     * are resolved. If any promise in the list fails, then the returned promise
	     * will fail with the last error. If they all succeed, then the returned
	     * promise will succeed, with the results being the results of all the input
	     * promises. For example: <pre>
	     *   var p1 = Parse.Promise.as(1);
	     *   var p2 = Parse.Promise.as(2);
	     *   var p3 = Parse.Promise.as(3);
	     *
	     *   Parse.Promise.when(p1, p2, p3).then(function(r1, r2, r3) {
	     *     console.log(r1);  // prints 1
	     *     console.log(r2);  // prints 2
	     *     console.log(r3);  // prints 3
	     *   });</pre>
	     *
	     * The input promises can also be specified as an array: <pre>
	     *   var promises = [p1, p2, p3];
	     *   Parse.Promise.when(promises).then(function(r1, r2, r3) {
	     *     console.log(r1);  // prints 1
	     *     console.log(r2);  // prints 2
	     *     console.log(r3);  // prints 3
	     *   });
	     * </pre>
	     * @param {Array} promises a list of promises to wait for.
	     * @return {Parse.Promise} the new promise.
	     */
	    when: function(promises) {
	      // Allow passing in Promises as separate arguments instead of an Array.
	      var objects;
	      if (promises && Parse._isNullOrUndefined(promises.length)) {
	        objects = arguments;
	      } else {
	        objects = promises;
	      }

	      var total = objects.length;
	      var hadError = false;
	      var results = [];
	      var errors = [];
	      results.length = objects.length;
	      errors.length = objects.length;

	      if (total === 0) {
	        return Parse.Promise.as.apply(this, results);
	      }

	      var promise = new Parse.Promise();

	      var resolveOne = function() {
	        total = total - 1;
	        if (total === 0) {
	          if (hadError) {
	            promise.reject(errors);
	          } else {
	            promise.resolve.apply(promise, results);
	          }
	        }
	      };

	      Parse._arrayEach(objects, function(object, i) {
	        if (Parse.Promise.is(object)) {
	          object.then(function(result) {
	            results[i] = result;
	            resolveOne();
	          }, function(error) {
	            errors[i] = error;
	            hadError = true;
	            resolveOne();
	          });
	        } else {
	          results[i] = object;
	          resolveOne();
	        }
	      });

	      return promise;
	    },

	    /**
	     * Runs the given asyncFunction repeatedly, as long as the predicate
	     * function returns a truthy value. Stops repeating if asyncFunction returns
	     * a rejected promise.
	     * @param {Function} predicate should return false when ready to stop.
	     * @param {Function} asyncFunction should return a Promise.
	     */
	    _continueWhile: function(predicate, asyncFunction) {
	      if (predicate()) {
	        return asyncFunction().then(function() {
	          return Parse.Promise._continueWhile(predicate, asyncFunction);
	        });
	      }
	      return Parse.Promise.as();
	    }
	  });

	  _.extend(Parse.Promise.prototype, /** @lends Parse.Promise.prototype */ {

	    /**
	     * Marks this promise as fulfilled, firing any callbacks waiting on it.
	     * @param {Object} result the result to pass to the callbacks.
	     */
	    resolve: function(result) {
	      if (this._resolved || this._rejected) {
	        throw "A promise was resolved even though it had already been " +
	          (this._resolved ? "resolved" : "rejected") + ".";
	      }
	      this._resolved = true;
	      this._result = arguments;
	      var results = arguments;
	      Parse._arrayEach(this._resolvedCallbacks, function(resolvedCallback) {
	        resolvedCallback.apply(this, results);
	      });
	      this._resolvedCallbacks = [];
	      this._rejectedCallbacks = [];
	    },

	    /**
	     * Marks this promise as fulfilled, firing any callbacks waiting on it.
	     * @param {Object} error the error to pass to the callbacks.
	     */
	    reject: function(error) {
	      if (this._resolved || this._rejected) {
	        throw "A promise was rejected even though it had already been " +
	          (this._resolved ? "resolved" : "rejected") + ".";
	      }
	      this._rejected = true;
	      this._error = error;
	      Parse._arrayEach(this._rejectedCallbacks, function(rejectedCallback) {
	        rejectedCallback(error);
	      });
	      this._resolvedCallbacks = [];
	      this._rejectedCallbacks = [];
	    },

	    /**
	     * Adds callbacks to be called when this promise is fulfilled. Returns a new
	     * Promise that will be fulfilled when the callback is complete. It allows
	     * chaining. If the callback itself returns a Promise, then the one returned
	     * by "then" will not be fulfilled until that one returned by the callback
	     * is fulfilled.
	     * @param {Function} resolvedCallback Function that is called when this
	     * Promise is resolved. Once the callback is complete, then the Promise
	     * returned by "then" will also be fulfilled.
	     * @param {Function} rejectedCallback Function that is called when this
	     * Promise is rejected with an error. Once the callback is complete, then
	     * the promise returned by "then" with be resolved successfully. If
	     * rejectedCallback is null, or it returns a rejected Promise, then the
	     * Promise returned by "then" will be rejected with that error.
	     * @return {Parse.Promise} A new Promise that will be fulfilled after this
	     * Promise is fulfilled and either callback has completed. If the callback
	     * returned a Promise, then this Promise will not be fulfilled until that
	     * one is.
	     */
	    then: function(resolvedCallback, rejectedCallback) {
	      var promise = new Parse.Promise();

	      var wrappedResolvedCallback = function() {
	        var result = arguments;
	        if (resolvedCallback) {
	          if (Parse.Promise._isPromisesAPlusCompliant) {
	            try {
	              result = [resolvedCallback.apply(this, result)];
	            } catch (e) {
	              result = [Parse.Promise.error(e)];
	            }
	          } else {
	            result = [resolvedCallback.apply(this, result)];
	          }
	        }
	        if (result.length === 1 && Parse.Promise.is(result[0])) {
	          result[0].then(function() {
	            promise.resolve.apply(promise, arguments);
	          }, function(error) {
	            promise.reject(error);
	          });
	        } else {
	          promise.resolve.apply(promise, result);
	        }
	      };

	      var wrappedRejectedCallback = function(error) {
	        var result = [];
	        if (rejectedCallback) {
	          if (Parse.Promise._isPromisesAPlusCompliant) {
	            try {
	              result = [rejectedCallback(error)];
	            } catch (e) {
	              result = [Parse.Promise.error(e)];
	            }
	          } else {
	            result = [rejectedCallback(error)];
	          }
	          if (result.length === 1 && Parse.Promise.is(result[0])) {
	            result[0].then(function() {
	              promise.resolve.apply(promise, arguments);
	            }, function(error) {
	              promise.reject(error);
	            });
	          } else {
	            if (Parse.Promise._isPromisesAPlusCompliant) {
	              promise.resolve.apply(promise, result);
	            } else {
	              promise.reject(result[0]);
	            }
	          }
	        } else {
	          promise.reject(error);
	        }
	      };

	      var runLater = function(func) {
	        func.call();
	      };
	      if (Parse.Promise._isPromisesAPlusCompliant) {
	        if (typeof(window) !== 'undefined' && window.setTimeout) {
	          runLater = function(func) {
	            window.setTimeout(func, 0);
	          };
	        } else if (typeof(process) !== 'undefined' && process.nextTick) {
	          runLater = function(func) {
	            process.nextTick(func);
	          };
	        }
	      }

	      var self = this;
	      if (this._resolved) {
	        runLater(function() {
	          wrappedResolvedCallback.apply(self, self._result);
	        });
	      } else if (this._rejected) {
	        runLater(function() {
	          wrappedRejectedCallback(self._error);
	        });
	      } else {
	        this._resolvedCallbacks.push(wrappedResolvedCallback);
	        this._rejectedCallbacks.push(wrappedRejectedCallback);
	      }

	      return promise;
	    },

	    /**
	     * Add handlers to be called when the promise 
	     * is either resolved or rejected
	     */
	    always: function(callback) {
	      return this.then(callback, callback);
	    },

	    /**
	     * Add handlers to be called when the Promise object is resolved
	     */
	    done: function(callback) {
	      return this.then(callback);
	    },

	    /**
	     * Add handlers to be called when the Promise object is rejected
	     */
	    fail: function(callback) {
	      return this.then(null, callback);
	    },

	    /**
	     * Run the given callbacks after this promise is fulfilled.
	     * @param optionsOrCallback {} A Backbone-style options callback, or a
	     * callback function. If this is an options object and contains a "model"
	     * attributes, that will be passed to error callbacks as the first argument.
	     * @param model {} If truthy, this will be passed as the first result of
	     * error callbacks. This is for Backbone-compatability.
	     * @return {Parse.Promise} A promise that will be resolved after the
	     * callbacks are run, with the same result as this.
	     */
	    _thenRunCallbacks: function(optionsOrCallback, model) {
	      var options;
	      if (_.isFunction(optionsOrCallback)) {
	        var callback = optionsOrCallback;
	        options = {
	          success: function(result) {
	            callback(result, null);
	          },
	          error: function(error) {
	            callback(null, error);
	          }
	        };
	      } else {
	        options = _.clone(optionsOrCallback);
	      }
	      options = options || {};

	      return this.then(function(result) {
	        if (options.success) {
	          options.success.apply(this, arguments);
	        } else if (model) {
	          // When there's no callback, a sync event should be triggered.
	          model.trigger('sync', model, result, options);
	        }
	        return Parse.Promise.as.apply(Parse.Promise, arguments);
	      }, function(error) {
	        if (options.error) {
	          if (!_.isUndefined(model)) {
	            options.error(model, error);
	          } else {
	            options.error(error);
	          }
	        } else if (model) {
	          // When there's no error callback, an error event should be triggered.
	          model.trigger('error', model, error, options);
	        }
	        // By explicitly returning a rejected Promise, this will work with
	        // either jQuery or Promises/A semantics.
	        return Parse.Promise.error(error);
	      });
	    },

	    /**
	     * Adds a callback function that should be called regardless of whether
	     * this promise failed or succeeded. The callback will be given either the
	     * array of results for its first argument, or the error as its second,
	     * depending on whether this Promise was rejected or resolved. Returns a
	     * new Promise, like "then" would.
	     * @param {Function} continuation the callback.
	     */
	    _continueWith: function(continuation) {
	      return this.then(function() {
	        return continuation(arguments, null);
	      }, function(error) {
	        return continuation(null, error);
	      });
	    }

	  });

	}(this));

	/*jshint bitwise:false *//*global FileReader: true, File: true */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  var b64Digit = function(number) {
	    if (number < 26) {
	      return String.fromCharCode(65 + number);
	    }
	    if (number < 52) {
	      return String.fromCharCode(97 + (number - 26));
	    }
	    if (number < 62) {
	      return String.fromCharCode(48 + (number - 52));
	    }
	    if (number === 62) {
	      return "+";
	    }
	    if (number === 63) {
	      return "/";
	    }
	    throw "Tried to encode large digit " + number + " in base64.";
	  };

	  var encodeBase64 = function(array) {
	    var chunks = [];
	    chunks.length = Math.ceil(array.length / 3);
	    _.times(chunks.length, function(i) {
	      var b1 = array[i * 3];
	      var b2 = array[i * 3 + 1] || 0;
	      var b3 = array[i * 3 + 2] || 0;

	      var has2 = (i * 3 + 1) < array.length;
	      var has3 = (i * 3 + 2) < array.length;

	      chunks[i] = [
	        b64Digit((b1 >> 2) & 0x3F),
	        b64Digit(((b1 << 4) & 0x30) | ((b2 >> 4) & 0x0F)),
	        has2 ? b64Digit(((b2 << 2) & 0x3C) | ((b3 >> 6) & 0x03)) : "=",
	        has3 ? b64Digit(b3 & 0x3F) : "="
	      ].join("");
	    });
	    return chunks.join("");
	  };

	  // TODO(klimt): Move this list to the server.
	  // A list of file extensions to mime types as found here:
	  // http://stackoverflow.com/questions/58510/using-net-how-can-you-find-the-
	  //     mime-type-of-a-file-based-on-the-file-signature
	  var mimeTypes = {
	    ai: "application/postscript",
	    aif: "audio/x-aiff",
	    aifc: "audio/x-aiff",
	    aiff: "audio/x-aiff",
	    asc: "text/plain",
	    atom: "application/atom+xml",
	    au: "audio/basic",
	    avi: "video/x-msvideo",
	    bcpio: "application/x-bcpio",
	    bin: "application/octet-stream",
	    bmp: "image/bmp",
	    cdf: "application/x-netcdf",
	    cgm: "image/cgm",
	    "class": "application/octet-stream",
	    cpio: "application/x-cpio",
	    cpt: "application/mac-compactpro",
	    csh: "application/x-csh",
	    css: "text/css",
	    dcr: "application/x-director",
	    dif: "video/x-dv",
	    dir: "application/x-director",
	    djv: "image/vnd.djvu",
	    djvu: "image/vnd.djvu",
	    dll: "application/octet-stream",
	    dmg: "application/octet-stream",
	    dms: "application/octet-stream",
	    doc: "application/msword",
	    docx: "application/vnd.openxmlformats-officedocument.wordprocessingml." +
	          "document",
	    dotx: "application/vnd.openxmlformats-officedocument.wordprocessingml." +
	          "template",
	    docm: "application/vnd.ms-word.document.macroEnabled.12",
	    dotm: "application/vnd.ms-word.template.macroEnabled.12",
	    dtd: "application/xml-dtd",
	    dv: "video/x-dv",
	    dvi: "application/x-dvi",
	    dxr: "application/x-director",
	    eps: "application/postscript",
	    etx: "text/x-setext",
	    exe: "application/octet-stream",
	    ez: "application/andrew-inset",
	    gif: "image/gif",
	    gram: "application/srgs",
	    grxml: "application/srgs+xml",
	    gtar: "application/x-gtar",
	    hdf: "application/x-hdf",
	    hqx: "application/mac-binhex40",
	    htm: "text/html",
	    html: "text/html",
	    ice: "x-conference/x-cooltalk",
	    ico: "image/x-icon",
	    ics: "text/calendar",
	    ief: "image/ief",
	    ifb: "text/calendar",
	    iges: "model/iges",
	    igs: "model/iges",
	    jnlp: "application/x-java-jnlp-file",
	    jp2: "image/jp2",
	    jpe: "image/jpeg",
	    jpeg: "image/jpeg",
	    jpg: "image/jpeg",
	    js: "application/x-javascript",
	    kar: "audio/midi",
	    latex: "application/x-latex",
	    lha: "application/octet-stream",
	    lzh: "application/octet-stream",
	    m3u: "audio/x-mpegurl",
	    m4a: "audio/mp4a-latm",
	    m4b: "audio/mp4a-latm",
	    m4p: "audio/mp4a-latm",
	    m4u: "video/vnd.mpegurl",
	    m4v: "video/x-m4v",
	    mac: "image/x-macpaint",
	    man: "application/x-troff-man",
	    mathml: "application/mathml+xml",
	    me: "application/x-troff-me",
	    mesh: "model/mesh",
	    mid: "audio/midi",
	    midi: "audio/midi",
	    mif: "application/vnd.mif",
	    mov: "video/quicktime",
	    movie: "video/x-sgi-movie",
	    mp2: "audio/mpeg",
	    mp3: "audio/mpeg",
	    mp4: "video/mp4",
	    mpe: "video/mpeg",
	    mpeg: "video/mpeg",
	    mpg: "video/mpeg",
	    mpga: "audio/mpeg",
	    ms: "application/x-troff-ms",
	    msh: "model/mesh",
	    mxu: "video/vnd.mpegurl",
	    nc: "application/x-netcdf",
	    oda: "application/oda",
	    ogg: "application/ogg",
	    pbm: "image/x-portable-bitmap",
	    pct: "image/pict",
	    pdb: "chemical/x-pdb",
	    pdf: "application/pdf",
	    pgm: "image/x-portable-graymap",
	    pgn: "application/x-chess-pgn",
	    pic: "image/pict",
	    pict: "image/pict",
	    png: "image/png", 
	    pnm: "image/x-portable-anymap",
	    pnt: "image/x-macpaint",
	    pntg: "image/x-macpaint",
	    ppm: "image/x-portable-pixmap",
	    ppt: "application/vnd.ms-powerpoint",
	    pptx: "application/vnd.openxmlformats-officedocument.presentationml." +
	          "presentation",
	    potx: "application/vnd.openxmlformats-officedocument.presentationml." +
	          "template",
	    ppsx: "application/vnd.openxmlformats-officedocument.presentationml." +
	          "slideshow",
	    ppam: "application/vnd.ms-powerpoint.addin.macroEnabled.12",
	    pptm: "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
	    potm: "application/vnd.ms-powerpoint.template.macroEnabled.12",
	    ppsm: "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
	    ps: "application/postscript",
	    qt: "video/quicktime",
	    qti: "image/x-quicktime",
	    qtif: "image/x-quicktime",
	    ra: "audio/x-pn-realaudio",
	    ram: "audio/x-pn-realaudio",
	    ras: "image/x-cmu-raster",
	    rdf: "application/rdf+xml",
	    rgb: "image/x-rgb",
	    rm: "application/vnd.rn-realmedia",
	    roff: "application/x-troff",
	    rtf: "text/rtf",
	    rtx: "text/richtext",
	    sgm: "text/sgml",
	    sgml: "text/sgml",
	    sh: "application/x-sh",
	    shar: "application/x-shar",
	    silo: "model/mesh",
	    sit: "application/x-stuffit",
	    skd: "application/x-koan",
	    skm: "application/x-koan",
	    skp: "application/x-koan",
	    skt: "application/x-koan",
	    smi: "application/smil",
	    smil: "application/smil",
	    snd: "audio/basic",
	    so: "application/octet-stream",
	    spl: "application/x-futuresplash",
	    src: "application/x-wais-source",
	    sv4cpio: "application/x-sv4cpio",
	    sv4crc: "application/x-sv4crc",
	    svg: "image/svg+xml",
	    swf: "application/x-shockwave-flash",
	    t: "application/x-troff",
	    tar: "application/x-tar",
	    tcl: "application/x-tcl",
	    tex: "application/x-tex",
	    texi: "application/x-texinfo",
	    texinfo: "application/x-texinfo",
	    tif: "image/tiff",
	    tiff: "image/tiff",
	    tr: "application/x-troff",
	    tsv: "text/tab-separated-values",
	    txt: "text/plain",
	    ustar: "application/x-ustar",
	    vcd: "application/x-cdlink",
	    vrml: "model/vrml",
	    vxml: "application/voicexml+xml",
	    wav: "audio/x-wav",
	    wbmp: "image/vnd.wap.wbmp",
	    wbmxl: "application/vnd.wap.wbxml",
	    wml: "text/vnd.wap.wml",
	    wmlc: "application/vnd.wap.wmlc",
	    wmls: "text/vnd.wap.wmlscript",
	    wmlsc: "application/vnd.wap.wmlscriptc",
	    wrl: "model/vrml",
	    xbm: "image/x-xbitmap",
	    xht: "application/xhtml+xml",
	    xhtml: "application/xhtml+xml",
	    xls: "application/vnd.ms-excel",
	    xml: "application/xml",
	    xpm: "image/x-xpixmap",
	    xsl: "application/xml",
	    xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
	    xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml." +
	          "template",
	    xlsm: "application/vnd.ms-excel.sheet.macroEnabled.12",
	    xltm: "application/vnd.ms-excel.template.macroEnabled.12",
	    xlam: "application/vnd.ms-excel.addin.macroEnabled.12",
	    xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.12",
	    xslt: "application/xslt+xml",
	    xul: "application/vnd.mozilla.xul+xml",
	    xwd: "image/x-xwindowdump",
	    xyz: "chemical/x-xyz",
	    zip: "application/zip"
	  };

	  /**
	   * Reads a File using a FileReader.
	   * @param file {File} the File to read.
	   * @param type {String} (optional) the mimetype to override with.
	   * @return {Parse.Promise} A Promise that will be fulfilled with a
	   *     base64-encoded string of the data and its mime type.
	   */
	  var readAsync = function(file, type) {
	    var promise = new Parse.Promise();

	    if (typeof(FileReader) === "undefined") {
	      return Parse.Promise.error(new Parse.Error(
	          Parse.Error.FILE_READ_ERROR,
	          "Attempted to use a FileReader on an unsupported browser."));
	    }

	    var reader = new FileReader();
	    reader.onloadend = function() {
	      if (reader.readyState !== 2) {
	        promise.reject(new Parse.Error(
	            Parse.Error.FILE_READ_ERROR,
	            "Error reading file."));
	        return;
	      }

	      var dataURL = reader.result;
	      var matches = /^data:([^;]*);base64,(.*)$/.exec(dataURL);
	      if (!matches) {
	        promise.reject(new Parse.Error(
	            Parse.Error.FILE_READ_ERROR,
	            "Unable to interpret data URL: " + dataURL));
	        return;
	      }

	      promise.resolve(matches[2], type || matches[1]);
	    };
	    reader.readAsDataURL(file);
	    return promise;
	  };

	  /**
	   * A Parse.File is a local representation of a file that is saved to the Parse
	   * cloud.
	   * @class
	   * @param name {String} The file's name. This will be prefixed by a unique
	   *     value once the file has finished saving. The file name must begin with
	   *     an alphanumeric character, and consist of alphanumeric characters,
	   *     periods, spaces, underscores, or dashes.
	   * @param data {Array} The data for the file, as either:
	   *     1. an Array of byte value Numbers, or
	   *     2. an Object like { base64: "..." } with a base64-encoded String.
	   *     3. a File object selected with a file upload control. (3) only works
	   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.
	   *        For example:<pre>
	   * var fileUploadControl = $("#profilePhotoFileUpload")[0];
	   * if (fileUploadControl.files.length > 0) {
	   *   var file = fileUploadControl.files[0];
	   *   var name = "photo.jpg";
	   *   var parseFile = new Parse.File(name, file);
	   *   parseFile.save().then(function() {
	   *     // The file has been saved to Parse.
	   *   }, function(error) {
	   *     // The file either could not be read, or could not be saved to Parse.
	   *   });
	   * }</pre>
	   * @param type {String} Optional Content-Type header to use for the file. If
	   *     this is omitted, the content type will be inferred from the name's
	   *     extension.
	   */
	  Parse.File = function(name, data, type) {
	    this._name = name;

	    // Guess the content type from the extension if we need to.
	    var extension = /\.([^.]*)$/.exec(name);
	    if (extension) {
	      extension = extension[1].toLowerCase();
	    }
	    var guessedType = type || mimeTypes[extension] || "text/plain";

	    if (_.isArray(data)) {
	      this._source = Parse.Promise.as(encodeBase64(data), guessedType);
	    } else if (data && data.base64) {
	      // if it contains data uri, extract based64 and the type out of it.
	      /*jslint maxlen: 1000*/
	      var dataUriRegexp = /^data:([a-zA-Z]*\/[a-zA-Z+.-]*);(charset=[a-zA-Z0-9\-\/\s]*,)?base64,(\S+)/;
	      /*jslint maxlen: 80*/

	      var matches = dataUriRegexp.exec(data.base64);
	      if (matches && matches.length > 0) {
	        // if data URI with charset, there will have 4 matches.
	        this._source = Parse.Promise.as(
	          (matches.length === 4 ? matches[3] : matches[2]), matches[1]
	        );
	      } else {
	        this._source = Parse.Promise.as(data.base64, guessedType);
	      }
	    } else if (typeof(File) !== "undefined" && data instanceof File) {
	      this._source = readAsync(data, type);
	    } else if (_.isString(data)) {
	      throw "Creating a Parse.File from a String is not yet supported.";
	    }
	  };

	  Parse.File.prototype = {

	    /**
	     * Gets the name of the file. Before save is called, this is the filename
	     * given by the user. After save is called, that name gets prefixed with a
	     * unique identifier.
	     */
	    name: function() {
	      return this._name;
	    },

	    /**
	     * Gets the url of the file. It is only available after you save the file or
	     * after you get the file from a Parse.Object.
	     * @return {String}
	     */
	    url: function() {
	      return this._url;
	    },

	    /**
	     * Saves the file to the Parse cloud.
	     * @param {Object} options A Backbone-style options object.
	     * @return {Parse.Promise} Promise that is resolved when the save finishes.
	     */
	    save: function(options) {
	      options= options || {};

	      var self = this;
	      if (!self._previousSave) {
	        self._previousSave = self._source.then(function(base64, type) {
	          var data = {
	            base64: base64,
	            _ContentType: type
	          };
	          return Parse._request({
	            route: "files",
	            className: self._name,
	            method: 'POST',
	            data: data,
	            useMasterKey: options.useMasterKey
	          });

	        }).then(function(response) {
	          self._name = response.name;
	          self._url = response.url;
	          return self;
	        });
	      }
	      return self._previousSave._thenRunCallbacks(options);
	    }
	  };

	}(this));

	// Parse.Object is analogous to the Java ParseObject.
	// It also implements the same interface as a Backbone model.
	// TODO: multiple dispatch for callbacks
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Creates a new model with defined attributes. A client id (cid) is
	   * automatically generated and assigned for you.
	   *
	   * <p>You won't normally call this method directly.  It is recommended that
	   * you use a subclass of <code>Parse.Object</code> instead, created by calling
	   * <code>extend</code>.</p>
	   *
	   * <p>However, if you don't want to use a subclass, or aren't sure which
	   * subclass is appropriate, you can use this form:<pre>
	   *     var object = new Parse.Object("ClassName");
	   * </pre>
	   * That is basically equivalent to:<pre>
	   *     var MyClass = Parse.Object.extend("ClassName");
	   *     var object = new MyClass();
	   * </pre></p>
	   *
	   * @param {Object} attributes The initial set of data to store in the object.
	   * @param {Object} options A set of Backbone-like options for creating the
	   *     object.  The only option currently supported is "collection".
	   * @see Parse.Object.extend
	   *
	   * @class
	   *
	   * <p>The fundamental unit of Parse data, which implements the Backbone Model
	   * interface.</p>
	   */
	  Parse.Object = function(attributes, options) {
	    // Allow new Parse.Object("ClassName") as a shortcut to _create.
	    if (_.isString(attributes)) {
	      return Parse.Object._create.apply(this, arguments);
	    }

	    attributes = attributes || {};
	    if (options && options.parse) {
	      attributes = this.parse(attributes);
	    }
	    var defaults = Parse._getValue(this, 'defaults');
	    if (defaults) {
	      attributes = _.extend({}, defaults, attributes);
	    }
	    if (options && options.collection) {
	      this.collection = options.collection;
	    }

	    this._serverData = {};  // The last known data for this object from cloud.
	    this._opSetQueue = [{}];  // List of sets of changes to the data.
	    this.attributes = {};  // The best estimate of this's current data.

	    this._hashedJSON = {};  // Hash of values of containers at last save.
	    this._escapedAttributes = {};
	    this.cid = _.uniqueId('c');
	    this.changed = {};
	    this._silent = {};
	    this._pending = {};
	    if (!this.set(attributes, {silent: true})) {
	      throw new Error("Can't create an invalid Parse.Object");
	    }
	    this.changed = {};
	    this._silent = {};
	    this._pending = {};
	    this._hasData = true;
	    this._previousAttributes = _.clone(this.attributes);
	    this.initialize.apply(this, arguments);
	  };

	  /**
	   * The ID of this object, unique within its class.
	   * @name id
	   * @type String
	   * @field
	   * @memberOf Parse.Object.prototype
	   */

	  /**
	   * The first time this object was saved on the server.
	   * @name createdAt
	   * @type Date
	   * @field
	   * @memberOf Parse.Object.prototype
	   */

	  /**
	   * The last time this object was updated on the server.
	   * @name updatedAt
	   * @type Date
	   * @field
	   * @memberOf Parse.Object.prototype
	   */

	  /**
	   * Saves the given list of Parse.Object.
	   * If any error is encountered, stops and calls the error handler.
	   *
	   * <pre>
	   *   Parse.Object.saveAll([object1, object2, ...], {
	   *     success: function(list) {
	   *       // All the objects were saved.
	   *     },
	   *     error: function(error) {
	   *       // An error occurred while saving one of the objects.
	   *     },
	   *   });
	   * </pre>
	   *
	   * @param {Array} list A list of <code>Parse.Object</code>.
	   * @param {Object} options A Backbone-style callback object.
	   * Valid options are:<ul>
	   *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	   *     be used for this request.
	   * </ul>
	   */
	  Parse.Object.saveAll = function(list, options) {
	    options = options || {};
	    return Parse.Object._deepSaveAsync(list, {
	      useMasterKey: options.useMasterKey
	    })._thenRunCallbacks(options);
	  };

	  /**
	   * Destroy the given list of models on the server if it was already persisted.
	   * Optimistically removes each model from its collection, if it has one.
	   * If `wait: true` is passed, waits for the server to respond before removal.
	   *
	   * <p>Unlike saveAll, if an error occurs while deleting an individual model,
	   * this method will continue trying to delete the rest of the models if
	   * possible, except in the case of a fatal error like a connection error.
	   *
	   * <p>In particular, the Parse.Error object returned in the case of error may
	   * be one of two types:
	   *
	   * <ul>
	   *   <li>A Parse.Error.AGGREGATE_ERROR. This object's "errors" property is an
	   *       array of other Parse.Error objects. Each error object in this array
	   *       has an "object" property that references the object that could not be
	   *       deleted (for instance, because that object could not be found).</li>
	   *   <li>A non-aggregate Parse.Error. This indicates a serious error that
	   *       caused the delete operation to be aborted partway through (for
	   *       instance, a connection failure in the middle of the delete).</li>
	   * </ul>
	   *
	   * <pre>
	   *   Parse.Object.destroyAll([object1, object2, ...], {
	   *     success: function() {
	   *       // All the objects were deleted.
	   *     },
	   *     error: function(error) {
	   *       // An error occurred while deleting one or more of the objects.
	   *       // If this is an aggregate error, then we can inspect each error
	   *       // object individually to determine the reason why a particular
	   *       // object was not deleted.
	   *       if (error.code == Parse.Error.AGGREGATE_ERROR) {
	   *         for (var i = 0; i < error.errors.length; i++) {
	   *           console.log("Couldn't delete " + error.errors[i].object.id +
	   *             "due to " + error.errors[i].message);
	   *         }
	   *       } else {
	   *         console.log("Delete aborted because of " + error.message);
	   *       }
	   *     },
	   *   });
	   * </pre>
	   *
	   * @param {Array} list A list of <code>Parse.Object</code>.
	   * @param {Object} options A Backbone-style callback object.
	   * Valid options are:<ul>
	   *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	   *     be used for this request.
	   * </ul>
	   * @return {Parse.Promise} A promise that is fulfilled when the destroyAll
	   *     completes.
	   */
	  Parse.Object.destroyAll = function(list, options) {
	    options = options || {};

	    var triggerDestroy = function(object) {
	      object.trigger('destroy', object, object.collection, options);
	    };

	    var errors = [];
	    var destroyBatch = function(batch) {
	      var promise = Parse.Promise.as();

	      if (batch.length > 0) {
	        promise = promise.then(function() {
	          return Parse._request({
	            route: "batch",
	            method: "POST",
	            useMasterKey: options.useMasterKey,
	            data: {
	              requests: _.map(batch, function(object) {
	                return {
	                  method: "DELETE",
	                  path: "/1/classes/" + object.className + "/" + object.id
	                };
	              })
	            }
	          });
	        }).then(function(responses, status, xhr) {
	          Parse._arrayEach(batch, function(object, i) {
	            if (responses[i].success && options.wait) {
	              triggerDestroy(object);
	            } else if (responses[i].error) {
	              var error = new Parse.Error(responses[i].error.code,
	                                          responses[i].error.error);
	              error.object = object;

	              errors.push(error);
	            }
	          });
	        });
	      }

	      return promise;
	    };

	    var promise = Parse.Promise.as();
	    var batch = [];
	    Parse._arrayEach(list, function(object, i) {
	      if (!object.id || !options.wait) {
	        triggerDestroy(object);
	      }

	      if (object.id) {
	        batch.push(object);
	      }

	      if (batch.length === 20 || i+1 === list.length) {
	        var thisBatch = batch;
	        batch = [];

	        promise = promise.then(function() {
	          return destroyBatch(thisBatch);
	        });
	      }
	    });

	    return promise.then(function() {
	      if (errors.length === 0) {
	        return true;
	      } else {
	        var error = new Parse.Error(Parse.Error.AGGREGATE_ERROR,
	                                    "Error deleting an object in destroyAll");
	        error.errors = errors;

	        return Parse.Promise.error(error);
	      }
	    })._thenRunCallbacks(options);
	  };

	  /**
	   * Fetches the given list of Parse.Object.
	   * If any error is encountered, stops and calls the error handler.
	   *
	   * <pre>
	   *   Parse.Object.fetchAll([object1, object2, ...], {
	   *     success: function(list) {
	   *       // All the objects were fetched.
	   *     },
	   *     error: function(error) {
	   *       // An error occurred while fetching one of the objects.
	   *     },
	   *   });
	   * </pre>
	   *
	   * @param {Array} list A list of <code>Parse.Object</code>.
	   * @param {Object} options A Backbone-style callback object.
	   * Valid options are:<ul>
	   *   <li>success: A Backbone-style success callback.
	   *   <li>error: An Backbone-style error callback.
	   * </ul>
	   */
	  Parse.Object.fetchAll = function(list, options) {
	    return Parse.Object._fetchAll(
	      list,
	      true
	    )._thenRunCallbacks(options);
	  };

	  /**
	   * Fetches the given list of Parse.Object if needed.
	   * If any error is encountered, stops and calls the error handler.
	   *
	   * <pre>
	   *   Parse.Object.fetchAllIfNeeded([object1, ...], {
	   *     success: function(list) {
	   *       // Objects were fetched and updated.
	   *     },
	   *     error: function(error) {
	   *       // An error occurred while fetching one of the objects.
	   *     },
	   *   });
	   * </pre>
	   *
	   * @param {Array} list A list of <code>Parse.Object</code>.
	   * @param {Object} options A Backbone-style callback object.
	   * Valid options are:<ul>
	   *   <li>success: A Backbone-style success callback.
	   *   <li>error: An Backbone-style error callback.
	   * </ul>
	   */
	  Parse.Object.fetchAllIfNeeded = function(list, options) {
	    return Parse.Object._fetchAll(
	      list,
	      false
	    )._thenRunCallbacks(options);
	  };

	  // Attach all inheritable methods to the Parse.Object prototype.
	  _.extend(Parse.Object.prototype, Parse.Events,
	           /** @lends Parse.Object.prototype */ {
	    _existed: false,

	    /**
	     * Initialize is an empty function by default. Override it with your own
	     * initialization logic.
	     */
	    initialize: function(){},

	    /**
	     * Returns a JSON version of the object suitable for saving to Parse.
	     * @return {Object}
	     */
	    toJSON: function() {
	      var json = this._toFullJSON();
	      Parse._arrayEach(["__type", "className"],
	                       function(key) { delete json[key]; });
	      return json;
	    },

	    _toFullJSON: function(seenObjects) {
	      var json = _.clone(this.attributes);
	      Parse._objectEach(json, function(val, key) {
	        json[key] = Parse._encode(val, seenObjects);
	      });
	      Parse._objectEach(this._operations, function(val, key) {
	        json[key] = val;
	      });

	      if (_.has(this, "id")) {
	        json.objectId = this.id;
	      }
	      if (_.has(this, "createdAt")) {
	        if (_.isDate(this.createdAt)) {
	          json.createdAt = this.createdAt.toJSON();
	        } else {
	          json.createdAt = this.createdAt;
	        }
	      }

	      if (_.has(this, "updatedAt")) {
	        if (_.isDate(this.updatedAt)) {
	          json.updatedAt = this.updatedAt.toJSON();
	        } else {
	          json.updatedAt = this.updatedAt;
	        }
	      }
	      json.__type = "Object";
	      json.className = this.className;
	      return json;
	    },

	    /**
	     * Updates _hashedJSON to reflect the current state of this object.
	     * Adds any changed hash values to the set of pending changes.
	     */
	    _refreshCache: function() {
	      var self = this;
	      if (self._refreshingCache) {
	        return;
	      }
	      self._refreshingCache = true;
	      Parse._objectEach(this.attributes, function(value, key) {
	        if (value instanceof Parse.Object) {
	          value._refreshCache();
	        } else if (_.isObject(value)) {
	          var objectArray = false;
	          if (_.isArray(value)) {
	            // We don't cache arrays of Parse.Objects
	            _.each(value, function(arrVal) {
	              if (arrVal instanceof Parse.Object) {
	                objectArray = true;
	                arrVal._refreshCache();
	              }
	            });
	          }
	          if (!objectArray && self._resetCacheForKey(key)) {
	            self.set(key, new Parse.Op.Set(value), { silent: true });
	          }
	        }
	      });
	      delete self._refreshingCache;
	    },

	    /**
	     * Returns true if this object has been modified since its last
	     * save/refresh.  If an attribute is specified, it returns true only if that
	     * particular attribute has been modified since the last save/refresh.
	     * @param {String} attr An attribute name (optional).
	     * @return {Boolean}
	     */
	    dirty: function(attr) {
	      this._refreshCache();

	      var currentChanges = _.last(this._opSetQueue);

	      if (attr) {
	        return (currentChanges[attr] ? true : false);
	      }
	      if (!this.id) {
	        return true;
	      }
	      if (_.keys(currentChanges).length > 0) {
	        return true;
	      }
	      return false;
	    },

	    /**
	     * Returns an array of keys that have been modified since last save/refresh
	     * @return {Array of string}
	     */
	    dirtyKeys: function() {
	      return _.keys(_.last(this._opSetQueue));
	    },

	    /**
	     * Gets a Pointer referencing this Object.
	     */
	    _toPointer: function() {
	      if (!this.id) {
	        throw new Error("Can't serialize an unsaved Parse.Object");
	      }
	      return { __type: "Pointer",
	               className: this.className,
	               objectId: this.id };
	    },

	    /**
	     * Gets the value of an attribute.
	     * @param {String} attr The string name of an attribute.
	     */
	    get: function(attr) {
	      return this.attributes[attr];
	    },

	    /**
	     * Gets a relation on the given class for the attribute.
	     * @param String attr The attribute to get the relation for.
	     */
	    relation: function(attr) {
	      var value = this.get(attr);
	      if (value) {
	        if (!(value instanceof Parse.Relation)) {
	          throw "Called relation() on non-relation field " + attr;
	        }
	        value._ensureParentAndKey(this, attr);
	        return value;
	      } else {
	        return new Parse.Relation(this, attr);
	      }
	    },

	    /**
	     * Gets the HTML-escaped value of an attribute.
	     */
	    escape: function(attr) {
	      var html = this._escapedAttributes[attr];
	      if (html) {
	        return html;
	      }
	      var val = this.attributes[attr];
	      var escaped;
	      if (Parse._isNullOrUndefined(val)) {
	        escaped = '';
	      } else {
	        escaped = _.escape(val.toString());
	      }
	      this._escapedAttributes[attr] = escaped;
	      return escaped;
	    },

	    /**
	     * Returns <code>true</code> if the attribute contains a value that is not
	     * null or undefined.
	     * @param {String} attr The string name of the attribute.
	     * @return {Boolean}
	     */
	    has: function(attr) {
	      return !Parse._isNullOrUndefined(this.attributes[attr]);
	    },

	    /**
	     * Pulls "special" fields like objectId, createdAt, etc. out of attrs
	     * and puts them on "this" directly.  Removes them from attrs.
	     * @param attrs - A dictionary with the data for this Parse.Object.
	     */
	    _mergeMagicFields: function(attrs) {
	      // Check for changes of magic fields.
	      var model = this;
	      var specialFields = ["id", "objectId", "createdAt", "updatedAt"];
	      Parse._arrayEach(specialFields, function(attr) {
	        if (attrs[attr]) {
	          if (attr === "objectId") {
	            model.id = attrs[attr];
	          } else if ((attr === "createdAt" || attr === "updatedAt") &&
	                     !_.isDate(attrs[attr])) {
	            model[attr] = Parse._parseDate(attrs[attr]);
	          } else {
	            model[attr] = attrs[attr];
	          }
	          delete attrs[attr];
	        }
	      });
	    },

	    /**
	     * Copies the given serverData to "this", refreshes attributes, and
	     * clears pending changes;
	     */
	    _copyServerData: function(serverData) {
	      // Copy server data
	      var tempServerData = {};
	      Parse._objectEach(serverData, function(value, key) {
	        tempServerData[key] = Parse._decode(key, value);
	      });
	      this._serverData = tempServerData;

	      // Refresh the attributes.
	      this._rebuildAllEstimatedData();

	      // TODO (bklimt): Revisit clearing operations, perhaps move to revert.
	      // Clear out any changes the user might have made previously.
	      this._refreshCache();
	      this._opSetQueue = [{}];

	      // Refresh the attributes again.
	      this._rebuildAllEstimatedData();
	    },

	    /**
	     * Merges another object's attributes into this object.
	     */
	    _mergeFromObject: function(other) {
	      if (!other) {
	        return;
	      }

	      // This does the inverse of _mergeMagicFields.
	      this.id = other.id;
	      this.createdAt = other.createdAt;
	      this.updatedAt = other.updatedAt;

	      this._copyServerData(other._serverData);

	      this._hasData = true;
	    },

	    /**
	     * Returns the json to be sent to the server.
	     */
	    _startSave: function() {
	      this._opSetQueue.push({});
	    },

	    /**
	     * Called when a save fails because of an error. Any changes that were part
	     * of the save need to be merged with changes made after the save. This
	     * might throw an exception is you do conflicting operations. For example,
	     * if you do:
	     *   object.set("foo", "bar");
	     *   object.set("invalid field name", "baz");
	     *   object.save();
	     *   object.increment("foo");
	     * then this will throw when the save fails and the client tries to merge
	     * "bar" with the +1.
	     */
	    _cancelSave: function() {
	      var self = this;
	      var failedChanges = _.first(this._opSetQueue);
	      this._opSetQueue = _.rest(this._opSetQueue);
	      var nextChanges = _.first(this._opSetQueue);
	      Parse._objectEach(failedChanges, function(op, key) {
	        var op1 = failedChanges[key];
	        var op2 = nextChanges[key];
	        if (op1 && op2) {
	          nextChanges[key] = op2._mergeWithPrevious(op1);
	        } else if (op1) {
	          nextChanges[key] = op1;
	        }
	      });
	      this._saving = this._saving - 1;
	    },

	    /**
	     * Called when a save completes successfully. This merges the changes that
	     * were saved into the known server data, and overrides it with any data
	     * sent directly from the server.
	     */
	    _finishSave: function(serverData) {
	      // Grab a copy of any object referenced by this object. These instances
	      // may have already been fetched, and we don't want to lose their data.
	      // Note that doing it like this means we will unify separate copies of the
	      // same object, but that's a risk we have to take.
	      var fetchedObjects = {};
	      Parse._traverse(this.attributes, function(object) {
	        if (object instanceof Parse.Object && object.id && object._hasData) {
	          fetchedObjects[object.id] = object;
	        }
	      });

	      var savedChanges = _.first(this._opSetQueue);
	      this._opSetQueue = _.rest(this._opSetQueue);
	      this._applyOpSet(savedChanges, this._serverData);
	      this._mergeMagicFields(serverData);
	      var self = this;
	      Parse._objectEach(serverData, function(value, key) {
	        self._serverData[key] = Parse._decode(key, value);

	        // Look for any objects that might have become unfetched and fix them
	        // by replacing their values with the previously observed values.
	        var fetched = Parse._traverse(self._serverData[key], function(object) {
	          if (object instanceof Parse.Object && fetchedObjects[object.id]) {
	            return fetchedObjects[object.id];
	          }
	        });
	        if (fetched) {
	          self._serverData[key] = fetched;
	        }
	      });
	      this._rebuildAllEstimatedData();
	      this._saving = this._saving - 1;
	    },

	    /**
	     * Called when a fetch or login is complete to set the known server data to
	     * the given object.
	     */
	    _finishFetch: function(serverData, hasData) {
	      // TODO (bklimt): Revisit clearing operations, perhaps move to revert.
	      this._opSetQueue = [{}];

	      // Bring in all the new server data.
	      this._mergeMagicFields(serverData);
	      this._copyServerData(serverData);

	      this._hasData = hasData;
	    },

	    /**
	     * Applies the set of Parse.Op in opSet to the object target.
	     */
	    _applyOpSet: function(opSet, target) {
	      var self = this;
	      Parse._objectEach(opSet, function(change, key) {
	        target[key] = change._estimate(target[key], self, key);
	        if (target[key] === Parse.Op._UNSET) {
	          delete target[key];
	        }
	      });
	    },

	    /**
	     * Replaces the cached value for key with the current value.
	     * Returns true if the new value is different than the old value.
	     */
	    _resetCacheForKey: function(key) {
	      var value = this.attributes[key];
	      if (_.isObject(value) &&
	          !(value instanceof Parse.Object) &&
	          !(value instanceof Parse.File)) {
	        value = value.toJSON ? value.toJSON() : value;
	        var json = JSON.stringify(value);
	        if (this._hashedJSON[key] !== json) {
	          var wasSet = !!this._hashedJSON[key];
	          this._hashedJSON[key] = json;
	          return wasSet;
	        }
	      }
	      return false;
	    },

	    /**
	     * Populates attributes[key] by starting with the last known data from the
	     * server, and applying all of the local changes that have been made to that
	     * key since then.
	     */
	    _rebuildEstimatedDataForKey: function(key) {
	      var self = this;
	      delete this.attributes[key];
	      if (this._serverData[key]) {
	        this.attributes[key] = this._serverData[key];
	      }
	      Parse._arrayEach(this._opSetQueue, function(opSet) {
	        var op = opSet[key];
	        if (op) {
	          self.attributes[key] = op._estimate(self.attributes[key], self, key);
	          if (self.attributes[key] === Parse.Op._UNSET) {
	            delete self.attributes[key];
	          } else {
	            self._resetCacheForKey(key);
	          }
	        }
	      });
	    },

	    /**
	     * Populates attributes by starting with the last known data from the
	     * server, and applying all of the local changes that have been made since
	     * then.
	     */
	    _rebuildAllEstimatedData: function() {
	      var self = this;

	      var previousAttributes = _.clone(this.attributes);

	      this.attributes = _.clone(this._serverData);
	      Parse._arrayEach(this._opSetQueue, function(opSet) {
	        self._applyOpSet(opSet, self.attributes);
	        Parse._objectEach(opSet, function(op, key) {
	          self._resetCacheForKey(key);
	        });
	      });

	      // Trigger change events for anything that changed because of the fetch.
	      Parse._objectEach(previousAttributes, function(oldValue, key) {
	        if (self.attributes[key] !== oldValue) {
	          self.trigger('change:' + key, self, self.attributes[key], {});
	        }
	      });
	      Parse._objectEach(this.attributes, function(newValue, key) {
	        if (!_.has(previousAttributes, key)) {
	          self.trigger('change:' + key, self, newValue, {});
	        }
	      });
	    },

	    /**
	     * Sets a hash of model attributes on the object, firing
	     * <code>"change"</code> unless you choose to silence it.
	     *
	     * <p>You can call it with an object containing keys and values, or with one
	     * key and value.  For example:<pre>
	     *   gameTurn.set({
	     *     player: player1,
	     *     diceRoll: 2
	     *   }, {
	     *     error: function(gameTurnAgain, error) {
	     *       // The set failed validation.
	     *     }
	     *   });
	     *
	     *   game.set("currentPlayer", player2, {
	     *     error: function(gameTurnAgain, error) {
	     *       // The set failed validation.
	     *     }
	     *   });
	     *
	     *   game.set("finished", true);</pre></p>
	     *
	     * @param {String} key The key to set.
	     * @param {} value The value to give it.
	     * @param {Object} options A set of Backbone-like options for the set.
	     *     The only supported options are <code>silent</code>,
	     *     <code>error</code>, and <code>promise</code>.
	     * @return {Boolean} true if the set succeeded.
	     * @see Parse.Object#validate
	     * @see Parse.Error
	     */
	    set: function(key, value, options) {
	      var attrs, attr;
	      if (_.isObject(key) || Parse._isNullOrUndefined(key)) {
	        attrs = key;
	        Parse._objectEach(attrs, function(v, k) {
	          attrs[k] = Parse._decode(k, v);
	        });
	        options = value;
	      } else {
	        attrs = {};
	        attrs[key] = Parse._decode(key, value);
	      }

	      // Extract attributes and options.
	      options = options || {};
	      if (!attrs) {
	        return this;
	      }
	      if (attrs instanceof Parse.Object) {
	        attrs = attrs.attributes;
	      }

	      var self = this;
	      Parse._objectEach(attrs, function(unused_value, key) {
	        if (self.constructor.readOnlyAttributes &&
	          self.constructor.readOnlyAttributes[key]) {
	          throw new Error('Cannot modify readonly key: ' + key);
	        }
	      });

	      // If the unset option is used, every attribute should be a Unset.
	      if (options.unset) {
	        Parse._objectEach(attrs, function(unused_value, key) {
	          attrs[key] = new Parse.Op.Unset();
	        });
	      }

	      // Apply all the attributes to get the estimated values.
	      var dataToValidate = _.clone(attrs);
	      Parse._objectEach(dataToValidate, function(value, key) {
	        if (value instanceof Parse.Op) {
	          dataToValidate[key] = value._estimate(self.attributes[key],
	                                                self, key);
	          if (dataToValidate[key] === Parse.Op._UNSET) {
	            delete dataToValidate[key];
	          }
	        }
	      });

	      // Run validation.
	      if (!this._validate(attrs, options)) {
	        return false;
	      }

	      this._mergeMagicFields(attrs);

	      options.changes = {};
	      var escaped = this._escapedAttributes;
	      var prev = this._previousAttributes || {};

	      // Update attributes.
	      Parse._arrayEach(_.keys(attrs), function(attr) {
	        var val = attrs[attr];

	        // If this is a relation object we need to set the parent correctly,
	        // since the location where it was parsed does not have access to
	        // this object.
	        if (val instanceof Parse.Relation) {
	          val.parent = self;
	        }

	        if (!(val instanceof Parse.Op)) {
	          val = new Parse.Op.Set(val);
	        }

	        // See if this change will actually have any effect.
	        var isRealChange = true;
	        if (val instanceof Parse.Op.Set &&
	            _.isEqual(self.attributes[attr], val.value)) {
	          isRealChange = false;
	        }

	        if (isRealChange) {
	          delete escaped[attr];
	          if (options.silent) {
	            self._silent[attr] = true;
	          } else {
	            options.changes[attr] = true;
	          }
	        }

	        var currentChanges = _.last(self._opSetQueue);
	        currentChanges[attr] = val._mergeWithPrevious(currentChanges[attr]);
	        self._rebuildEstimatedDataForKey(attr);

	        if (isRealChange) {
	          self.changed[attr] = self.attributes[attr];
	          if (!options.silent) {
	            self._pending[attr] = true;
	          }
	        } else {
	          delete self.changed[attr];
	          delete self._pending[attr];
	        }
	      });

	      if (!options.silent) {
	        this.change(options);
	      }
	      return this;
	    },

	    /**
	     * Remove an attribute from the model, firing <code>"change"</code> unless
	     * you choose to silence it. This is a noop if the attribute doesn't
	     * exist.
	     */
	    unset: function(attr, options) {
	      options = options || {};
	      options.unset = true;
	      return this.set(attr, null, options);
	    },

	    /**
	     * Atomically increments the value of the given attribute the next time the
	     * object is saved. If no amount is specified, 1 is used by default.
	     *
	     * @param attr {String} The key.
	     * @param amount {Number} The amount to increment by.
	     */
	    increment: function(attr, amount) {
	      if (_.isUndefined(amount) || _.isNull(amount)) {
	        amount = 1;
	      }
	      return this.set(attr, new Parse.Op.Increment(amount));
	    },

	    /**
	     * Atomically add an object to the end of the array associated with a given
	     * key.
	     * @param attr {String} The key.
	     * @param item {} The item to add.
	     */
	    add: function(attr, item) {
	      return this.set(attr, new Parse.Op.Add([item]));
	    },

	    /**
	     * Atomically add an object to the array associated with a given key, only
	     * if it is not already present in the array. The position of the insert is
	     * not guaranteed.
	     *
	     * @param attr {String} The key.
	     * @param item {} The object to add.
	     */
	    addUnique: function(attr, item) {
	      return this.set(attr, new Parse.Op.AddUnique([item]));
	    },

	    /**
	     * Atomically remove all instances of an object from the array associated
	     * with a given key.
	     *
	     * @param attr {String} The key.
	     * @param item {} The object to remove.
	     */
	    remove: function(attr, item) {
	      return this.set(attr, new Parse.Op.Remove([item]));
	    },

	    /**
	     * Returns an instance of a subclass of Parse.Op describing what kind of
	     * modification has been performed on this field since the last time it was
	     * saved. For example, after calling object.increment("x"), calling
	     * object.op("x") would return an instance of Parse.Op.Increment.
	     *
	     * @param attr {String} The key.
	     * @returns {Parse.Op} The operation, or undefined if none.
	     */
	    op: function(attr) {
	      return _.last(this._opSetQueue)[attr];
	    },

	    /**
	     * Clear all attributes on the model, firing <code>"change"</code> unless
	     * you choose to silence it.
	     */
	    clear: function(options) {
	      options = options || {};
	      options.unset = true;
	      var keysToClear = _.extend(this.attributes, this._operations);
	      return this.set(keysToClear, options);
	    },

	    /**
	     * Returns a JSON-encoded set of operations to be sent with the next save
	     * request.
	     */
	    _getSaveJSON: function() {
	      var json = _.clone(_.first(this._opSetQueue));
	      Parse._objectEach(json, function(op, key) {
	        json[key] = op.toJSON();
	      });
	      return json;
	    },

	    /**
	     * Returns true if this object can be serialized for saving.
	     */
	    _canBeSerialized: function() {
	      return Parse.Object._canBeSerializedAsValue(this.attributes);
	    },

	    /**
	     * Fetch the model from the server. If the server's representation of the
	     * model differs from its current attributes, they will be overriden,
	     * triggering a <code>"change"</code> event.
	     *
	     * @param {Object} options A Backbone-style callback object.
	     * Valid options are:<ul>
	     *   <li>success: A Backbone-style success callback.
	     *   <li>error: An Backbone-style error callback.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     * @return {Parse.Promise} A promise that is fulfilled when the fetch
	     *     completes.
	     */
	    fetch: function(options) {
	      var self = this;
	      options = options || {};
	      var request = Parse._request({
	        method: 'GET',
	        route: "classes",
	        className: this.className,
	        objectId: this.id,
	        useMasterKey: options.useMasterKey
	      });
	      return request.then(function(response, status, xhr) {
	        self._finishFetch(self.parse(response, status, xhr), true);
	        return self;
	      })._thenRunCallbacks(options, this);
	    },

	    /**
	     * Set a hash of model attributes, and save the model to the server.
	     * updatedAt will be updated when the request returns.
	     * You can either call it as:<pre>
	     *   object.save();</pre>
	     * or<pre>
	     *   object.save(null, options);</pre>
	     * or<pre>
	     *   object.save(attrs, options);</pre>
	     * or<pre>
	     *   object.save(key, value, options);</pre>
	     *
	     * For example, <pre>
	     *   gameTurn.save({
	     *     player: "Jake Cutter",
	     *     diceRoll: 2
	     *   }, {
	     *     success: function(gameTurnAgain) {
	     *       // The save was successful.
	     *     },
	     *     error: function(gameTurnAgain, error) {
	     *       // The save failed.  Error is an instance of Parse.Error.
	     *     }
	     *   });</pre>
	     * or with promises:<pre>
	     *   gameTurn.save({
	     *     player: "Jake Cutter",
	     *     diceRoll: 2
	     *   }).then(function(gameTurnAgain) {
	     *     // The save was successful.
	     *   }, function(error) {
	     *     // The save failed.  Error is an instance of Parse.Error.
	     *   });</pre>
	     *
	     * @param {Object} options A Backbone-style callback object.
	     * Valid options are:<ul>
	     *   <li>wait: Set to true to wait for the server to confirm a successful
	     *   save before modifying the attributes on the object.
	     *   <li>silent: Set to true to avoid firing the `set` event.
	     *   <li>success: A Backbone-style success callback.
	     *   <li>error: An Backbone-style error callback.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     * @return {Parse.Promise} A promise that is fulfilled when the save
	     *     completes.
	     * @see Parse.Error
	     */
	    save: function(arg1, arg2, arg3) {
	      var i, attrs, current, options, saved;
	      if (_.isObject(arg1) || Parse._isNullOrUndefined(arg1)) {
	        attrs = arg1;
	        options = arg2;
	      } else {
	        attrs = {};
	        attrs[arg1] = arg2;
	        options = arg3;
	      }

	      // Make save({ success: function() {} }) work.
	      if (!options && attrs) {
	        var extra_keys = _.reject(attrs, function(value, key) {
	          return _.include(["success", "error", "wait"], key);
	        });
	        if (extra_keys.length === 0) {
	          var all_functions = true;
	          if (_.has(attrs, "success") && !_.isFunction(attrs.success)) {
	            all_functions = false;
	          }
	          if (_.has(attrs, "error") && !_.isFunction(attrs.error)) {
	            all_functions = false;
	          }
	          if (all_functions) {
	            // This attrs object looks like it's really an options object,
	            // and there's no other options object, so let's just use it.
	            return this.save(null, attrs);
	          }
	        }
	      }

	      options = _.clone(options) || {};
	      if (options.wait) {
	        current = _.clone(this.attributes);
	      }

	      var setOptions = _.clone(options) || {};
	      if (setOptions.wait) {
	        setOptions.silent = true;
	      }
	      var setError;
	      setOptions.error = function(model, error) {
	        setError = error;
	      };
	      if (attrs && !this.set(attrs, setOptions)) {
	        return Parse.Promise.error(setError)._thenRunCallbacks(options, this);
	      }

	      var model = this;

	      // If there is any unsaved child, save it first.
	      model._refreshCache();

	      // TODO(klimt): Refactor this so that the save starts now, not later.

	      var unsavedChildren = [];
	      var unsavedFiles = [];
	      Parse.Object._findUnsavedChildren(model.attributes,
	                                        unsavedChildren,
	                                        unsavedFiles);
	      if (unsavedChildren.length + unsavedFiles.length > 0) {
	        return Parse.Object._deepSaveAsync(this.attributes, {
	          useMasterKey: options.useMasterKey
	        }).then(function() {
	          return model.save(null, options);
	        }, function(error) {
	          return Parse.Promise.error(error)._thenRunCallbacks(options, model);
	        });
	      }

	      this._startSave();
	      this._saving = (this._saving || 0) + 1;

	      this._allPreviousSaves = this._allPreviousSaves || Parse.Promise.as();
	      this._allPreviousSaves = this._allPreviousSaves._continueWith(function() {
	        var method = model.id ? 'PUT' : 'POST';

	        var json = model._getSaveJSON();

	        var route = "classes";
	        var className = model.className;
	        if (model.className === "_User" && !model.id) {
	          // Special-case user sign-up.
	          route = "users";
	          className = null;
	        }
	        var request = Parse._request({
	          route: route,
	          className: className,
	          objectId: model.id,
	          method: method,
	          useMasterKey: options.useMasterKey,
	          data: json
	        });

	        request = request.then(function(resp, status, xhr) {
	          var serverAttrs = model.parse(resp, status, xhr);
	          if (options.wait) {
	            serverAttrs = _.extend(attrs || {}, serverAttrs);
	          }
	          model._finishSave(serverAttrs);
	          if (options.wait) {
	            model.set(current, setOptions);
	          }
	          return model;

	        }, function(error) {
	          model._cancelSave();
	          return Parse.Promise.error(error);

	        })._thenRunCallbacks(options, model);

	        return request;
	      });
	      return this._allPreviousSaves;
	    },

	    /**
	     * Destroy this model on the server if it was already persisted.
	     * Optimistically removes the model from its collection, if it has one.
	     * If `wait: true` is passed, waits for the server to respond
	     * before removal.
	     *
	     * @param {Object} options A Backbone-style callback object.
	     * Valid options are:<ul>
	     *   <li>wait: Set to true to wait for the server to confirm successful
	     *   deletion of the object before triggering the `destroy` event.
	     *   <li>success: A Backbone-style success callback
	     *   <li>error: An Backbone-style error callback.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     * @return {Parse.Promise} A promise that is fulfilled when the destroy
	     *     completes.
	     */
	    destroy: function(options) {
	      options = options || {};
	      var model = this;

	      var triggerDestroy = function() {
	        model.trigger('destroy', model, model.collection, options);
	      };

	      if (!this.id) {
	        return triggerDestroy();
	      }

	      if (!options.wait) {
	        triggerDestroy();
	      }

	      var request = Parse._request({
	        route: "classes",
	        className: this.className,
	        objectId: this.id,
	        method: 'DELETE',
	        useMasterKey: options.useMasterKey
	      });
	      return request.then(function() {
	        if (options.wait) {
	          triggerDestroy();
	        }
	        return model;
	      })._thenRunCallbacks(options, this);
	    },

	    /**
	     * Converts a response into the hash of attributes to be set on the model.
	     * @ignore
	     */
	    parse: function(resp, status, xhr) {
	      var output = _.clone(resp);
	      _(["createdAt", "updatedAt"]).each(function(key) {
	        if (output[key]) {
	          output[key] = Parse._parseDate(output[key]);
	        }
	      });
	      if (!output.updatedAt) {
	        output.updatedAt = output.createdAt;
	      }
	      if (status) {
	        this._existed = (status !== 201);
	      }
	      return output;
	    },

	    /**
	     * Creates a new model with identical attributes to this one.
	     * @return {Parse.Object}
	     */
	    clone: function() {
	      return new this.constructor(this.attributes);
	    },

	    /**
	     * Returns true if this object has never been saved to Parse.
	     * @return {Boolean}
	     */
	    isNew: function() {
	      return !this.id;
	    },

	    /**
	     * Call this method to manually fire a `"change"` event for this model and
	     * a `"change:attribute"` event for each changed attribute.
	     * Calling this will cause all objects observing the model to update.
	     */
	    change: function(options) {
	      options = options || {};
	      var changing = this._changing;
	      this._changing = true;

	      // Silent changes become pending changes.
	      var self = this;
	      Parse._objectEach(this._silent, function(attr) {
	        self._pending[attr] = true;
	      });

	      // Silent changes are triggered.
	      var changes = _.extend({}, options.changes, this._silent);
	      this._silent = {};
	      Parse._objectEach(changes, function(unused_value, attr) {
	        self.trigger('change:' + attr, self, self.get(attr), options);
	      });
	      if (changing) {
	        return this;
	      }

	      // This is to get around lint not letting us make a function in a loop.
	      var deleteChanged = function(value, attr) {
	        if (!self._pending[attr] && !self._silent[attr]) {
	          delete self.changed[attr];
	        }
	      };

	      // Continue firing `"change"` events while there are pending changes.
	      while (!_.isEmpty(this._pending)) {
	        this._pending = {};
	        this.trigger('change', this, options);
	        // Pending and silent changes still remain.
	        Parse._objectEach(this.changed, deleteChanged);
	        self._previousAttributes = _.clone(this.attributes);
	      }

	      this._changing = false;
	      return this;
	    },

	    /**
	     * Returns true if this object was created by the Parse server when the
	     * object might have already been there (e.g. in the case of a Facebook
	     * login)
	     */
	    existed: function() {
	      return this._existed;
	    },

	    /**
	     * Determine if the model has changed since the last <code>"change"</code>
	     * event.  If you specify an attribute name, determine if that attribute
	     * has changed.
	     * @param {String} attr Optional attribute name
	     * @return {Boolean}
	     */
	    hasChanged: function(attr) {
	      if (!arguments.length) {
	        return !_.isEmpty(this.changed);
	      }
	      return this.changed && _.has(this.changed, attr);
	    },

	    /**
	     * Returns an object containing all the attributes that have changed, or
	     * false if there are no changed attributes. Useful for determining what
	     * parts of a view need to be updated and/or what attributes need to be
	     * persisted to the server. Unset attributes will be set to undefined.
	     * You can also pass an attributes object to diff against the model,
	     * determining if there *would be* a change.
	     */
	    changedAttributes: function(diff) {
	      if (!diff) {
	        return this.hasChanged() ? _.clone(this.changed) : false;
	      }
	      var changed = {};
	      var old = this._previousAttributes;
	      Parse._objectEach(diff, function(diffVal, attr) {
	        if (!_.isEqual(old[attr], diffVal)) {
	          changed[attr] = diffVal;
	        }
	      });
	      return changed;
	    },

	    /**
	     * Gets the previous value of an attribute, recorded at the time the last
	     * <code>"change"</code> event was fired.
	     * @param {String} attr Name of the attribute to get.
	     */
	    previous: function(attr) {
	      if (!arguments.length || !this._previousAttributes) {
	        return null;
	      }
	      return this._previousAttributes[attr];
	    },

	    /**
	     * Gets all of the attributes of the model at the time of the previous
	     * <code>"change"</code> event.
	     * @return {Object}
	     */
	    previousAttributes: function() {
	      return _.clone(this._previousAttributes);
	    },

	    /**
	     * Checks if the model is currently in a valid state. It's only possible to
	     * get into an *invalid* state if you're using silent changes.
	     * @return {Boolean}
	     */
	    isValid: function() {
	      return !this.validate(this.attributes);
	    },

	    /**
	     * You should not call this function directly unless you subclass
	     * <code>Parse.Object</code>, in which case you can override this method
	     * to provide additional validation on <code>set</code> and
	     * <code>save</code>.  Your implementation should return
	     *
	     * @param {Object} attrs The current data to validate.
	     * @param {Object} options A Backbone-like options object.
	     * @return {} False if the data is valid.  An error object otherwise.
	     * @see Parse.Object#set
	     */
	    validate: function(attrs, options) {
	      if (_.has(attrs, "ACL") && !(attrs.ACL instanceof Parse.ACL)) {
	        return new Parse.Error(Parse.Error.OTHER_CAUSE,
	                               "ACL must be a Parse.ACL.");
	      }
	      var correct = true;
	      Parse._objectEach(attrs, function(unused_value, key) {
	        if (!(/^[A-Za-z][0-9A-Za-z_]*$/).test(key)) {
	          correct = false;
	        }
	      });
	      if (!correct) {
	        return new Parse.Error(Parse.Error.INVALID_KEY_NAME);
	      }
	      return false;
	    },

	    /**
	     * Run validation against a set of incoming attributes, returning `true`
	     * if all is well. If a specific `error` callback has been passed,
	     * call that instead of firing the general `"error"` event.
	     */
	    _validate: function(attrs, options) {
	      if (options.silent || !this.validate) {
	        return true;
	      }
	      attrs = _.extend({}, this.attributes, attrs);
	      var error = this.validate(attrs, options);
	      if (!error) {
	        return true;
	      }
	      if (options && options.error) {
	        options.error(this, error, options);
	      } else {
	        this.trigger('error', this, error, options);
	      }
	      return false;
	    },

	    /**
	     * Returns the ACL for this object.
	     * @returns {Parse.ACL} An instance of Parse.ACL.
	     * @see Parse.Object#get
	     */
	    getACL: function() {
	      return this.get("ACL");
	    },

	    /**
	     * Sets the ACL to be used for this object.
	     * @param {Parse.ACL} acl An instance of Parse.ACL.
	     * @param {Object} options Optional Backbone-like options object to be
	     *     passed in to set.
	     * @return {Boolean} Whether the set passed validation.
	     * @see Parse.Object#set
	     */
	    setACL: function(acl, options) {
	      return this.set("ACL", acl, options);
	    }

	  });

	  /**
	   * Returns the appropriate subclass for making new instances of the given
	   * className string.
	   */
	  Parse.Object._getSubclass = function(className) {
	    if (!_.isString(className)) {
	      throw "Parse.Object._getSubclass requires a string argument.";
	    }
	    var ObjectClass = Parse.Object._classMap[className];
	    if (!ObjectClass) {
	      ObjectClass = Parse.Object.extend(className);
	      Parse.Object._classMap[className] = ObjectClass;
	    }
	    return ObjectClass;
	  };

	  /**
	   * Creates an instance of a subclass of Parse.Object for the given classname.
	   */
	  Parse.Object._create = function(className, attributes, options) {
	    var ObjectClass = Parse.Object._getSubclass(className);
	    return new ObjectClass(attributes, options);
	  };

	  /**
	   * Returns a list of object ids given a list of objects.
	   */
	  Parse.Object._toObjectIdArray = function(list, omitObjectsWithData) {
	    if (list.length === 0) {
	      return Parse.Promise.as(list);
	    }

	    var error;
	    var className = list[0].className;
	    var objectIds = [];
	    for (var i = 0; i < list.length; i++) {
	      var object = list[i];
	      if (className !== object.className) {
	        error = new Parse.Error(Parse.Error.INVALID_CLASS_NAME,
	                                "All objects should be of the same class");
	        return Parse.Promise.error(error);
	      } else if (!object.id) {
	        error = new Parse.Error(Parse.Error.MISSING_OBJECT_ID,
	                                "All objects must have an ID");
	        return Parse.Promise.error(error);
	      } else if (omitObjectsWithData && object._hasData) {
	        continue;
	      }
	      objectIds.push(object.id);
	    }

	    return Parse.Promise.as(objectIds);
	  };

	  /**
	   * Updates a list of objects with fetched results.
	   */
	  Parse.Object._updateWithFetchedResults = function(list, fetched, forceFetch) {
	    var fetchedObjectsById = {};
	    Parse._arrayEach(fetched, function(object, i) {
	      fetchedObjectsById[object.id] = object;
	    });

	    for (var i = 0; i < list.length; i++) {
	      var object = list[i];
	      var fetchedObject = fetchedObjectsById[object.id];
	      if (!fetchedObject && forceFetch) {
	        var error = new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,
	                                "All objects must exist on the server");
	        return Parse.Promise.error(error);
	      }

	      object._mergeFromObject(fetchedObject);
	    }

	    return Parse.Promise.as(list);
	  };

	  /**
	   * Fetches the objects given in list.  The forceFetch option will fetch all
	   * objects if true and ignore objects with data if false.
	   */
	  Parse.Object._fetchAll = function(list, forceFetch) {
	    if (list.length === 0) {
	      return Parse.Promise.as(list);
	    }

	    var omitObjectsWithData = !forceFetch;
	    return Parse.Object._toObjectIdArray(
	      list,
	      omitObjectsWithData
	    ).then(function(objectIds) {
	      var className = list[0].className;
	      var query = new Parse.Query(className);
	      query.containedIn("objectId", objectIds);
	      query.limit = objectIds.length;
	      return query.find();
	    }).then(function(results) {
	      return Parse.Object._updateWithFetchedResults(
	        list,
	        results,
	        forceFetch
	      );
	    });
	  };

	  // Set up a map of className to class so that we can create new instances of
	  // Parse Objects from JSON automatically.
	  Parse.Object._classMap = {};

	  Parse.Object._extend = Parse._extend;

	  /**
	   * Creates a new subclass of Parse.Object for the given Parse class name.
	   *
	   * <p>Every extension of a Parse class will inherit from the most recent
	   * previous extension of that class. When a Parse.Object is automatically
	   * created by parsing JSON, it will use the most recent extension of that
	   * class.</p>
	   *
	   * <p>You should call either:<pre>
	   *     var MyClass = Parse.Object.extend("MyClass", {
	   *         <i>Instance methods</i>,
	   *         initialize: function(attrs, options) {
	   *             this.someInstanceProperty = [],
	   *             <i>Other instance properties</i>
	   *         }
	   *     }, {
	   *         <i>Class properties</i>
	   *     });</pre>
	   * or, for Backbone compatibility:<pre>
	   *     var MyClass = Parse.Object.extend({
	   *         className: "MyClass",
	   *         <i>Instance methods</i>,
	   *         initialize: function(attrs, options) {
	   *             this.someInstanceProperty = [],
	   *             <i>Other instance properties</i>
	   *         }
	   *     }, {
	   *         <i>Class properties</i>
	   *     });</pre></p>
	   *
	   * @param {String} className The name of the Parse class backing this model.
	   * @param {Object} protoProps Instance properties to add to instances of the
	   *     class returned from this method.
	   * @param {Object} classProps Class properties to add the class returned from
	   *     this method.
	   * @return {Class} A new subclass of Parse.Object.
	   */
	  Parse.Object.extend = function(className, protoProps, classProps) {
	    // Handle the case with only two args.
	    if (!_.isString(className)) {
	      if (className && _.has(className, "className")) {
	        return Parse.Object.extend(className.className, className, protoProps);
	      } else {
	        throw new Error(
	            "Parse.Object.extend's first argument should be the className.");
	      }
	    }

	    // If someone tries to subclass "User", coerce it to the right type.
	    if (className === "User" && Parse.User._performUserRewrite) {
	      className = "_User";
	    }
	    protoProps = protoProps || {};
	    protoProps.className = className;

	    var NewClassObject = null;
	    if (_.has(Parse.Object._classMap, className)) {
	      var OldClassObject = Parse.Object._classMap[className];
	      // This new subclass has been told to extend both from "this" and from
	      // OldClassObject. This is multiple inheritance, which isn't supported.
	      // For now, let's just pick one.
	      NewClassObject = OldClassObject._extend(protoProps, classProps);
	    } else {
	      NewClassObject = this._extend(protoProps, classProps);
	    }
	    // Extending a subclass should reuse the classname automatically.
	    NewClassObject.extend = function(arg0) {
	      if (_.isString(arg0) || (arg0 && _.has(arg0, "className"))) {
	        return Parse.Object.extend.apply(NewClassObject, arguments);
	      }
	      var newArguments = [className].concat(Parse._.toArray(arguments));
	      return Parse.Object.extend.apply(NewClassObject, newArguments);
	    };

	    /**
	     * Creates a reference to a subclass of Parse.Object with the given id. This
	     * does not exist on Parse.Object, only on subclasses.
	     *
	     * <p>A shortcut for: <pre>
	     *  var Foo = Parse.Object.extend("Foo");
	     *  var pointerToFoo = new Foo();
	     *  pointerToFoo.id = "myObjectId";
	     * </pre>
	     *
	     * @name createWithoutData
	     * @param {String} id The ID of the object to create a reference to.
	     * @return {Parse.Object} A Parse.Object reference.
	     * @function
	     * @memberOf Parse.Object
	     */
	    NewClassObject.createWithoutData = function(id) {
	      var obj = new NewClassObject();
	      obj.id = id;
	      return obj;
	    };

	    Parse.Object._classMap[className] = NewClassObject;
	    return NewClassObject;
	  };

	  Parse.Object._findUnsavedChildren = function(object, children, files) {
	    Parse._traverse(object, function(object) {
	      if (object instanceof Parse.Object) {
	        object._refreshCache();
	        if (object.dirty()) {
	          children.push(object);
	        }
	        return;
	      }

	      if (object instanceof Parse.File) {
	        if (!object.url()) {
	          files.push(object);
	        }
	        return;
	      }
	    });
	  };

	  Parse.Object._canBeSerializedAsValue = function(object) {
	    // TODO(klimt): We should rewrite _traverse so that it can be used here.
	    if (object instanceof Parse.Object) {
	      return !!object.id;
	    }
	    if (object instanceof Parse.File) {
	      // Don't recurse indefinitely into files.
	      return true;
	    }

	    var canBeSerializedAsValue = true;

	    if (_.isArray(object)) {
	      Parse._arrayEach(object, function(child) {
	        if (!Parse.Object._canBeSerializedAsValue(child)) {
	          canBeSerializedAsValue = false;
	        }
	      });
	    } else if (_.isObject(object)) {
	      Parse._objectEach(object, function(child) {
	        if (!Parse.Object._canBeSerializedAsValue(child)) {
	          canBeSerializedAsValue = false;
	        }
	      });
	    }
	    return canBeSerializedAsValue;
	  };

	  /**
	   * @param {Object} object The root object.
	   * @param {Object} options: The only valid option is useMasterKey.
	   */
	  Parse.Object._deepSaveAsync = function(object, options) {
	    var unsavedChildren = [];
	    var unsavedFiles = [];
	    Parse.Object._findUnsavedChildren(object, unsavedChildren, unsavedFiles);

	    var promise = Parse.Promise.as();
	    _.each(unsavedFiles, function(file) {
	      promise = promise.then(function() {
	        return file.save(options);
	      });
	    });

	    var objects = _.uniq(unsavedChildren);
	    var remaining = _.uniq(objects);

	    return promise.then(function() {
	      return Parse.Promise._continueWhile(function() {
	        return remaining.length > 0;
	      }, function() {

	        // Gather up all the objects that can be saved in this batch.
	        var batch = [];
	        var newRemaining = [];
	        Parse._arrayEach(remaining, function(object) {
	          // Limit batches to 20 objects.
	          if (batch.length > 20) {
	            newRemaining.push(object);
	            return;
	          }

	          if (object._canBeSerialized()) {
	            batch.push(object);
	          } else {
	            newRemaining.push(object);
	          }
	        });
	        remaining = newRemaining;

	        // If we can't save any objects, there must be a circular reference.
	        if (batch.length === 0) {
	          return Parse.Promise.error(
	            new Parse.Error(Parse.Error.OTHER_CAUSE,
	                            "Tried to save a batch with a cycle."));
	        }

	        // Reserve a spot in every object's save queue.
	        var readyToStart = Parse.Promise.when(_.map(batch, function(object) {
	          return object._allPreviousSaves || Parse.Promise.as();
	        }));
	        var batchFinished = new Parse.Promise();
	        Parse._arrayEach(batch, function(object) {
	          object._allPreviousSaves = batchFinished;
	        });

	        // Save a single batch, whether previous saves succeeded or failed.
	        return readyToStart._continueWith(function() {
	          return Parse._request({
	            route: "batch",
	            method: "POST",
	            useMasterKey: options.useMasterKey,
	            data: {
	              requests: _.map(batch, function(object) {
	                var json = object._getSaveJSON();
	                var method = "POST";

	                var path = "/1/classes/" + object.className;
	                if (object.id) {
	                  path = path + "/" + object.id;
	                  method = "PUT";
	                }

	                object._startSave();

	                return {
	                  method: method,
	                  path: path,
	                  body: json
	                };
	              })
	            }
	          }).then(function(response, status, xhr) {
	            var error;
	            Parse._arrayEach(batch, function(object, i) {
	              if (response[i].success) {
	                object._finishSave(
	                  object.parse(response[i].success, status, xhr));
	              } else {
	                error = error || response[i].error;
	                object._cancelSave();
	              }
	            });
	            if (error) {
	              return Parse.Promise.error(
	                new Parse.Error(error.code, error.error));
	            }

	          }).then(function(results) {
	            batchFinished.resolve(results);
	            return results;
	          }, function(error) {
	            batchFinished.reject(error);
	            return Parse.Promise.error(error);
	          });
	        });
	      });
	    }).then(function() {
	      return object;
	    });
	  };

	}(this));

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Represents a Role on the Parse server. Roles represent groupings of
	   * Users for the purposes of granting permissions (e.g. specifying an ACL
	   * for an Object). Roles are specified by their sets of child users and
	   * child roles, all of which are granted any permissions that the parent
	   * role has.
	   *
	   * <p>Roles must have a name (which cannot be changed after creation of the
	   * role), and must specify an ACL.</p>
	   * @class
	   * A Parse.Role is a local representation of a role persisted to the Parse
	   * cloud.
	   */
	  Parse.Role = Parse.Object.extend("_Role", /** @lends Parse.Role.prototype */ {
	    // Instance Methods
	    
	    /**
	     * Constructs a new ParseRole with the given name and ACL.
	     * 
	     * @param {String} name The name of the Role to create.
	     * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.
	     */
	    constructor: function(name, acl) {
	      if (_.isString(name) && (acl instanceof Parse.ACL)) {
	        Parse.Object.prototype.constructor.call(this, null, null);
	        this.setName(name);
	        this.setACL(acl);
	      } else {
	        Parse.Object.prototype.constructor.call(this, name, acl);
	      }
	    },
	    
	    /**
	     * Gets the name of the role.  You can alternatively call role.get("name")
	     * 
	     * @return {String} the name of the role.
	     */
	    getName: function() {
	      return this.get("name");
	    },
	    
	    /**
	     * Sets the name for a role. This value must be set before the role has
	     * been saved to the server, and cannot be set once the role has been
	     * saved.
	     * 
	     * <p>
	     *   A role's name can only contain alphanumeric characters, _, -, and
	     *   spaces.
	     * </p>
	     *
	     * <p>This is equivalent to calling role.set("name", name)</p>
	     * 
	     * @param {String} name The name of the role.
	     * @param {Object} options Standard options object with success and error
	     *     callbacks.
	     */
	    setName: function(name, options) {
	      return this.set("name", name, options);
	    },
	    
	    /**
	     * Gets the Parse.Relation for the Parse.Users that are direct
	     * children of this role. These users are granted any privileges that this
	     * role has been granted (e.g. read or write access through ACLs). You can
	     * add or remove users from the role through this relation.
	     * 
	     * <p>This is equivalent to calling role.relation("users")</p>
	     * 
	     * @return {Parse.Relation} the relation for the users belonging to this
	     *     role.
	     */
	    getUsers: function() {
	      return this.relation("users");
	    },
	    
	    /**
	     * Gets the Parse.Relation for the Parse.Roles that are direct
	     * children of this role. These roles' users are granted any privileges that
	     * this role has been granted (e.g. read or write access through ACLs). You
	     * can add or remove child roles from this role through this relation.
	     * 
	     * <p>This is equivalent to calling role.relation("roles")</p>
	     * 
	     * @return {Parse.Relation} the relation for the roles belonging to this
	     *     role.
	     */
	    getRoles: function() {
	      return this.relation("roles");
	    },
	    
	    /**
	     * @ignore
	     */
	    validate: function(attrs, options) {
	      if ("name" in attrs && attrs.name !== this.getName()) {
	        var newName = attrs.name;
	        if (this.id && this.id !== attrs.objectId) {
	          // Check to see if the objectId being set matches this.id.
	          // This happens during a fetch -- the id is set before calling fetch.
	          // Let the name be set in this case.
	          return new Parse.Error(Parse.Error.OTHER_CAUSE,
	              "A role's name can only be set before it has been saved.");
	        }
	        if (!_.isString(newName)) {
	          return new Parse.Error(Parse.Error.OTHER_CAUSE,
	              "A role's name must be a String.");
	        }
	        if (!(/^[0-9a-zA-Z\-_ ]+$/).test(newName)) {
	          return new Parse.Error(Parse.Error.OTHER_CAUSE,
	              "A role's name can only contain alphanumeric characters, _," +
	              " -, and spaces.");
	        }
	      }
	      if (Parse.Object.prototype.validate) {
	        return Parse.Object.prototype.validate.call(this, attrs, options);
	      }
	      return false;
	    }
	  });
	}(this));


	/*global _: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Creates a new instance with the given models and options.  Typically, you
	   * will not call this method directly, but will instead make a subclass using
	   * <code>Parse.Collection.extend</code>.
	   *
	   * @param {Array} models An array of instances of <code>Parse.Object</code>.
	   *
	   * @param {Object} options An optional object with Backbone-style options.
	   * Valid options are:<ul>
	   *   <li>model: The Parse.Object subclass that this collection contains.
	   *   <li>query: An instance of Parse.Query to use when fetching items.
	   *   <li>comparator: A string property name or function to sort by.
	   * </ul>
	   *
	   * @see Parse.Collection.extend
	   *
	   * @class
	   *
	   * <p>Provides a standard collection class for our sets of models, ordered
	   * or unordered.  For more information, see the
	   * <a href="http://documentcloud.github.com/backbone/#Collection">Backbone
	   * documentation</a>.</p>
	   */
	  Parse.Collection = function(models, options) {
	    options = options || {};
	    if (options.comparator) {
	      this.comparator = options.comparator;
	    }
	    if (options.model) {
	      this.model = options.model;
	    }
	    if (options.query) {
	      this.query = options.query;
	    }
	    this._reset();
	    this.initialize.apply(this, arguments);
	    if (models) {
	      this.reset(models, {silent: true, parse: options.parse});
	    }
	  };

	  // Define the Collection's inheritable methods.
	  _.extend(Parse.Collection.prototype, Parse.Events,
	      /** @lends Parse.Collection.prototype */ {

	    // The default model for a collection is just a Parse.Object.
	    // This should be overridden in most cases.
	    // TODO: think harder. this is likely to be weird.
	    model: Parse.Object,

	    /**
	     * Initialize is an empty function by default. Override it with your own
	     * initialization logic.
	     */
	    initialize: function(){},

	    /**
	     * The JSON representation of a Collection is an array of the
	     * models' attributes.
	     */
	    toJSON: function() {
	      return this.map(function(model){ return model.toJSON(); });
	    },

	    /**
	     * Add a model, or list of models to the set. Pass **silent** to avoid
	     * firing the `add` event for every new model.
	     *
	     * @param {Array} models An array of instances of <code>Parse.Object</code>.
	     *
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are:<ul>
	     *   <li>at: The index at which to add the models.
	     *   <li>silent: Set to true to avoid firing the `add` event for every new
	     *   model.
	     * </ul>
	     */
	    add: function(models, options) {
	      var i, index, length, model, cid, id, cids = {}, ids = {};
	      options = options || {};
	      models = _.isArray(models) ? models.slice() : [models];

	      // Begin by turning bare objects into model references, and preventing
	      // invalid models or duplicate models from being added.
	      for (i = 0, length = models.length; i < length; i++) {
	        models[i] = this._prepareModel(models[i], options);
	        model = models[i];
	        if (!model) {
	          throw new Error("Can't add an invalid model to a collection");
	        }
	        cid = model.cid;
	        if (cids[cid] || this._byCid[cid]) {
	          throw new Error("Duplicate cid: can't add the same model " +
	                          "to a collection twice");
	        }
	        id = model.id;
	        if (!Parse._isNullOrUndefined(id) && (ids[id] || this._byId[id])) {
	          throw new Error("Duplicate id: can't add the same model " +
	                          "to a collection twice");
	        }
	        ids[id] = model;
	        cids[cid] = model;
	      }

	      // Listen to added models' events, and index models for lookup by
	      // `id` and by `cid`.
	      for (i = 0; i < length; i++) {
	        (model = models[i]).on('all', this._onModelEvent, this);
	        this._byCid[model.cid] = model;
	        if (model.id) {
	          this._byId[model.id] = model;
	        }
	      }

	      // Insert models into the collection, re-sorting if needed, and triggering
	      // `add` events unless silenced.
	      this.length += length;
	      index = Parse._isNullOrUndefined(options.at) ? 
	          this.models.length : options.at;
	      this.models.splice.apply(this.models, [index, 0].concat(models));
	      if (this.comparator) {
	        this.sort({silent: true});
	      }
	      if (options.silent) {
	        return this;
	      }
	      for (i = 0, length = this.models.length; i < length; i++) {
	        model = this.models[i];
	        if (cids[model.cid]) {
	          options.index = i;
	          model.trigger('add', model, this, options);
	        }
	      }
	      return this;
	    },

	    /**
	     * Remove a model, or a list of models from the set. Pass silent to avoid
	     * firing the <code>remove</code> event for every model removed.
	     *
	     * @param {Array} models The model or list of models to remove from the
	     *   collection.
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are: <ul>
	     *   <li>silent: Set to true to avoid firing the `remove` event.
	     * </ul>
	     */
	    remove: function(models, options) {
	      var i, l, index, model;
	      options = options || {};
	      models = _.isArray(models) ? models.slice() : [models];
	      for (i = 0, l = models.length; i < l; i++) {
	        model = this.getByCid(models[i]) || this.get(models[i]);
	        if (!model) {
	          continue;
	        }
	        delete this._byId[model.id];
	        delete this._byCid[model.cid];
	        index = this.indexOf(model);
	        this.models.splice(index, 1);
	        this.length--;
	        if (!options.silent) {
	          options.index = index;
	          model.trigger('remove', model, this, options);
	        }
	        this._removeReference(model);
	      }
	      return this;
	    },

	    /**
	     * Gets a model from the set by id.
	     * @param {String} id The Parse objectId identifying the Parse.Object to
	     * fetch from this collection.
	     */
	    get: function(id) {
	      return id && this._byId[id.id || id];
	    },

	    /**
	     * Gets a model from the set by client id.
	     * @param {} cid The Backbone collection id identifying the Parse.Object to
	     * fetch from this collection.
	     */
	    getByCid: function(cid) {
	      return cid && this._byCid[cid.cid || cid];
	    },

	    /**
	     * Gets the model at the given index.
	     *
	     * @param {Number} index The index of the model to return.
	     */
	    at: function(index) {
	      return this.models[index];
	    },

	    /**
	     * Forces the collection to re-sort itself. You don't need to call this
	     * under normal circumstances, as the set will maintain sort order as each
	     * item is added.
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are: <ul>
	     *   <li>silent: Set to true to avoid firing the `reset` event.
	     * </ul>
	     */
	    sort: function(options) {
	      options = options || {};
	      if (!this.comparator) {
	        throw new Error('Cannot sort a set without a comparator');
	      }
	      var boundComparator = _.bind(this.comparator, this);
	      if (this.comparator.length === 1) {
	        this.models = this.sortBy(boundComparator);
	      } else {
	        this.models.sort(boundComparator);
	      }
	      if (!options.silent) {
	        this.trigger('reset', this, options);
	      }
	      return this;
	    },

	    /**
	     * Plucks an attribute from each model in the collection.
	     * @param {String} attr The attribute to return from each model in the
	     * collection.
	     */
	    pluck: function(attr) {
	      return _.map(this.models, function(model){ return model.get(attr); });
	    },

	    /**
	     * When you have more items than you want to add or remove individually,
	     * you can reset the entire set with a new list of models, without firing
	     * any `add` or `remove` events. Fires `reset` when finished.
	     *
	     * @param {Array} models The model or list of models to remove from the
	     *   collection.
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are: <ul>
	     *   <li>silent: Set to true to avoid firing the `reset` event.
	     * </ul>
	     */
	    reset: function(models, options) {
	      var self = this;
	      models = models || [];
	      options = options || {};
	      Parse._arrayEach(this.models, function(model) {
	        self._removeReference(model);
	      });
	      this._reset();
	      this.add(models, {silent: true, parse: options.parse});
	      if (!options.silent) {
	        this.trigger('reset', this, options);
	      }
	      return this;
	    },

	    /**
	     * Fetches the default set of models for this collection, resetting the
	     * collection when they arrive. If `add: true` is passed, appends the
	     * models to the collection instead of resetting.
	     *
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are:<ul>
	     *   <li>silent: Set to true to avoid firing `add` or `reset` events for
	     *   models fetched by this fetch.
	     *   <li>success: A Backbone-style success callback.
	     *   <li>error: An Backbone-style error callback.
	     *   <li>useMasterKey: In Cloud Code and Node only, uses the Master Key for
	     *       this request.
	     * </ul>
	     */
	    fetch: function(options) {
	      options = _.clone(options) || {};
	      if (options.parse === undefined) {
	        options.parse = true;
	      }
	      var collection = this;
	      var query = this.query || new Parse.Query(this.model);
	      return query.find({
	        useMasterKey: options.useMasterKey
	      }).then(function(results) {
	        if (options.add) {
	          collection.add(results, options);
	        } else {
	          collection.reset(results, options);
	        }
	        return collection;
	      })._thenRunCallbacks(options, this);
	    },

	    /**
	     * Creates a new instance of a model in this collection. Add the model to
	     * the collection immediately, unless `wait: true` is passed, in which case
	     * we wait for the server to agree.
	     *
	     * @param {Parse.Object} model The new model to create and add to the
	     *   collection.
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are:<ul>
	     *   <li>wait: Set to true to wait for the server to confirm creation of the
	     *       model before adding it to the collection.
	     *   <li>silent: Set to true to avoid firing an `add` event.
	     *   <li>success: A Backbone-style success callback.
	     *   <li>error: An Backbone-style error callback.
	     *   <li>useMasterKey: In Cloud Code and Node only, uses the Master Key for
	     *       this request.
	     * </ul>
	     */
	    create: function(model, options) {
	      var coll = this;
	      options = options ? _.clone(options) : {};
	      model = this._prepareModel(model, options);
	      if (!model) {
	        return false;
	      }
	      if (!options.wait) {
	        coll.add(model, options);
	      }
	      var success = options.success;
	      options.success = function(nextModel, resp, xhr) {
	        if (options.wait) {
	          coll.add(nextModel, options);
	        }
	        if (success) {
	          success(nextModel, resp);
	        } else {
	          nextModel.trigger('sync', model, resp, options);
	        }
	      };
	      model.save(null, options);
	      return model;
	    },

	    /**
	     * Converts a response into a list of models to be added to the collection.
	     * The default implementation is just to pass it through.
	     * @ignore
	     */
	    parse: function(resp, xhr) {
	      return resp;
	    },

	    /**
	     * Proxy to _'s chain. Can't be proxied the same way the rest of the
	     * underscore methods are proxied because it relies on the underscore
	     * constructor.
	     */
	    chain: function() {
	      return _(this.models).chain();
	    },

	    /**
	     * Reset all internal state. Called when the collection is reset.
	     */
	    _reset: function(options) {
	      this.length = 0;
	      this.models = [];
	      this._byId  = {};
	      this._byCid = {};
	    },

	    /**
	     * Prepare a model or hash of attributes to be added to this collection.
	     */
	    _prepareModel: function(model, options) {
	      if (!(model instanceof Parse.Object)) {
	        var attrs = model;
	        options.collection = this;
	        model = new this.model(attrs, options);
	        if (!model._validate(model.attributes, options)) {
	          model = false;
	        }
	      } else if (!model.collection) {
	        model.collection = this;
	      }
	      return model;
	    },

	    /**
	     * Internal method to remove a model's ties to a collection.
	     */
	    _removeReference: function(model) {
	      if (this === model.collection) {
	        delete model.collection;
	      }
	      model.off('all', this._onModelEvent, this);
	    },

	    /**
	     * Internal method called every time a model in the set fires an event.
	     * Sets need to update their indexes when models change ids. All other
	     * events simply proxy through. "add" and "remove" events that originate
	     * in other collections are ignored.
	     */
	    _onModelEvent: function(ev, model, collection, options) {
	      if ((ev === 'add' || ev === 'remove') && collection !== this) {
	        return;
	      }
	      if (ev === 'destroy') {
	        this.remove(model, options);
	      }
	      if (model && ev === 'change:objectId') {
	        delete this._byId[model.previous("objectId")];
	        this._byId[model.id] = model;
	      }
	      this.trigger.apply(this, arguments);
	    }

	  });

	  // Underscore methods that we want to implement on the Collection.
	  var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find',
	    'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any',
	    'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex',
	    'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf',
	    'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];

	  // Mix in each Underscore method as a proxy to `Collection#models`.
	  Parse._arrayEach(methods, function(method) {
	    Parse.Collection.prototype[method] = function() {
	      return _[method].apply(_, [this.models].concat(_.toArray(arguments)));
	    };
	  });

	  /**
	   * Creates a new subclass of <code>Parse.Collection</code>.  For example,<pre>
	   *   var MyCollection = Parse.Collection.extend({
	   *     // Instance properties
	   *
	   *     model: MyClass,
	   *     query: MyQuery,
	   *
	   *     getFirst: function() {
	   *       return this.at(0);
	   *     }
	   *   }, {
	   *     // Class properties
	   *
	   *     makeOne: function() {
	   *       return new MyCollection();
	   *     }
	   *   });
	   *
	   *   var collection = new MyCollection();
	   * </pre>
	   *
	   * @function
	   * @param {Object} instanceProps Instance properties for the collection.
	   * @param {Object} classProps Class properies for the collection.
	   * @return {Class} A new subclass of <code>Parse.Collection</code>.
	   */
	  Parse.Collection.extend = Parse._extend;

	}(this));

	/*global _: false, document: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Creating a Parse.View creates its initial element outside of the DOM,
	   * if an existing element is not provided...
	   * @class
	   *
	   * <p>A fork of Backbone.View, provided for your convenience.  If you use this
	   * class, you must also include jQuery, or another library that provides a
	   * jQuery-compatible $ function.  For more information, see the
	   * <a href="http://documentcloud.github.com/backbone/#View">Backbone
	   * documentation</a>.</p>
	   * <p><strong><em>Available in the client SDK only.</em></strong></p>
	   */
	  Parse.View = function(options) {
	    this.cid = _.uniqueId('view');
	    this._configure(options || {});
	    this._ensureElement();
	    this.initialize.apply(this, arguments);
	    this.delegateEvents();
	  };

	  // Cached regex to split keys for `delegate`.
	  var eventSplitter = /^(\S+)\s*(.*)$/;

	  // List of view options to be merged as properties.
	  // TODO: include objectId, createdAt, updatedAt?
	  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes',
	                     'className', 'tagName'];

	  // Set up all inheritable **Parse.View** properties and methods.
	  _.extend(Parse.View.prototype, Parse.Events,
	           /** @lends Parse.View.prototype */ {

	    // The default `tagName` of a View's element is `"div"`.
	    tagName: 'div',

	    /**
	     * jQuery delegate for element lookup, scoped to DOM elements within the
	     * current view. This should be prefered to global lookups where possible.
	     */
	    $: function(selector) {
	      return this.$el.find(selector);
	    },

	    /**
	     * Initialize is an empty function by default. Override it with your own
	     * initialization logic.
	     */
	    initialize: function(){},

	    /**
	     * The core function that your view should override, in order
	     * to populate its element (`this.el`), with the appropriate HTML. The
	     * convention is for **render** to always return `this`.
	     */
	    render: function() {
	      return this;
	    },

	    /**
	     * Remove this view from the DOM. Note that the view isn't present in the
	     * DOM by default, so calling this method may be a no-op.
	     */
	    remove: function() {
	      this.$el.remove();
	      return this;
	    },

	    /**
	     * For small amounts of DOM Elements, where a full-blown template isn't
	     * needed, use **make** to manufacture elements, one at a time.
	     * <pre>
	     *     var el = this.make('li', {'class': 'row'},
	     *                        this.model.escape('title'));</pre>
	     */
	    make: function(tagName, attributes, content) {
	      var el = document.createElement(tagName);
	      if (attributes) {
	        Parse.$(el).attr(attributes);
	      }
	      if (content) {
	        Parse.$(el).html(content);
	      }
	      return el;
	    },

	    /**
	     * Changes the view's element (`this.el` property), including event
	     * re-delegation.
	     */
	    setElement: function(element, delegate) {
	      this.$el = Parse.$(element);
	      this.el = this.$el[0];
	      if (delegate !== false) {
	        this.delegateEvents();
	      }
	      return this;
	    },

	    /**
	     * Set callbacks.  <code>this.events</code> is a hash of
	     * <pre>
	     * *{"event selector": "callback"}*
	     *
	     *     {
	     *       'mousedown .title':  'edit',
	     *       'click .button':     'save'
	     *       'click .open':       function(e) { ... }
	     *     }
	     * </pre>
	     * pairs. Callbacks will be bound to the view, with `this` set properly.
	     * Uses event delegation for efficiency.
	     * Omitting the selector binds the event to `this.el`.
	     * This only works for delegate-able events: not `focus`, `blur`, and
	     * not `change`, `submit`, and `reset` in Internet Explorer.
	     */
	    delegateEvents: function(events) {
	      events = events || Parse._getValue(this, 'events');
	      if (!events) {
	        return;
	      }
	      this.undelegateEvents();
	      var self = this;
	      Parse._objectEach(events, function(method, key) {
	        if (!_.isFunction(method)) {
	          method = self[events[key]];
	        }
	        if (!method) {
	          throw new Error('Event "' + events[key] + '" does not exist');
	        }
	        var match = key.match(eventSplitter);
	        var eventName = match[1], selector = match[2];
	        method = _.bind(method, self);
	        eventName += '.delegateEvents' + self.cid;
	        if (selector === '') {
	          self.$el.bind(eventName, method);
	        } else {
	          self.$el.delegate(selector, eventName, method);
	        }
	      });
	    },

	    /**
	     * Clears all callbacks previously bound to the view with `delegateEvents`.
	     * You usually don't need to use this, but may wish to if you have multiple
	     * Backbone views attached to the same DOM element.
	     */
	    undelegateEvents: function() {
	      this.$el.unbind('.delegateEvents' + this.cid);
	    },

	    /**
	     * Performs the initial configuration of a View with a set of options.
	     * Keys with special meaning *(model, collection, id, className)*, are
	     * attached directly to the view.
	     */
	    _configure: function(options) {
	      if (this.options) {
	        options = _.extend({}, this.options, options);
	      }
	      var self = this;
	      _.each(viewOptions, function(attr) {
	        if (options[attr]) {
	          self[attr] = options[attr];
	        }
	      });
	      this.options = options;
	    },

	    /**
	     * Ensure that the View has a DOM element to render into.
	     * If `this.el` is a string, pass it through `$()`, take the first
	     * matching element, and re-assign it to `el`. Otherwise, create
	     * an element from the `id`, `className` and `tagName` properties.
	     */
	    _ensureElement: function() {
	      if (!this.el) {
	        var attrs = Parse._getValue(this, 'attributes') || {};
	        if (this.id) {
	          attrs.id = this.id;
	        }
	        if (this.className) {
	          attrs['class'] = this.className;
	        }
	        this.setElement(this.make(this.tagName, attrs), false);
	      } else {
	        this.setElement(this.el, false);
	      }
	    }

	  });

	  /**
	   * @function
	   * @param {Object} instanceProps Instance properties for the view.
	   * @param {Object} classProps Class properies for the view.
	   * @return {Class} A new subclass of <code>Parse.View</code>.
	   */
	  Parse.View.extend = Parse._extend;

	}(this));

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * @class
	   *
	   * <p>A Parse.User object is a local representation of a user persisted to the
	   * Parse cloud. This class is a subclass of a Parse.Object, and retains the
	   * same functionality of a Parse.Object, but also extends it with various
	   * user specific methods, like authentication, signing up, and validation of
	   * uniqueness.</p>
	   */
	  Parse.User = Parse.Object.extend("_User", /** @lends Parse.User.prototype */ {
	    // Instance Variables
	    _isCurrentUser: false,


	    // Instance Methods
	    
	    /**
	     * Merges another object's attributes into this object.
	     */
	    _mergeFromObject: function(other) {
	      if (other.getSessionToken()) {
	        this._sessionToken = other.getSessionToken();      
	      }    
	      Parse.User.__super__._mergeFromObject.call(this, other);
	    },    

	    /**
	     * Internal method to handle special fields in a _User response.
	     */
	    _mergeMagicFields: function(attrs) {
	      if (attrs.sessionToken) {
	        this._sessionToken = attrs.sessionToken;
	        delete attrs.sessionToken;
	      }
	      Parse.User.__super__._mergeMagicFields.call(this, attrs);
	    },

	    /**
	     * Removes null values from authData (which exist temporarily for
	     * unlinking)
	     */
	    _cleanupAuthData: function() {
	      if (!this.isCurrent()) {
	        return;
	      }
	      var authData = this.get('authData');
	      if (!authData) {
	        return;
	      }
	      Parse._objectEach(this.get('authData'), function(value, key) {
	        if (!authData[key]) {
	          delete authData[key];
	        }
	      });
	    },

	    /**
	     * Synchronizes authData for all providers.
	     */
	    _synchronizeAllAuthData: function() {
	      var authData = this.get('authData');
	      if (!authData) {
	        return;
	      }

	      var self = this;
	      Parse._objectEach(this.get('authData'), function(value, key) {
	        self._synchronizeAuthData(key);
	      });
	    },

	    /**
	     * Synchronizes auth data for a provider (e.g. puts the access token in the
	     * right place to be used by the Facebook SDK).
	     */
	    _synchronizeAuthData: function(provider) {
	      if (!this.isCurrent()) {
	        return;
	      }
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	        provider = Parse.User._authProviders[authType];
	      } else {
	        authType = provider.getAuthType();
	      }
	      var authData = this.get('authData');
	      if (!authData || !provider) {
	        return;
	      }
	      var success = provider.restoreAuthentication(authData[authType]);
	      if (!success) {
	        this._unlinkFrom(provider);
	      }
	    },

	    _handleSaveResult: function(makeCurrent) {
	      // Clean up and synchronize the authData object, removing any unset values
	      if (makeCurrent) {
	        this._isCurrentUser = true;
	      }
	      this._cleanupAuthData();
	      this._synchronizeAllAuthData();
	      // Don't keep the password around.
	      delete this._serverData.password;
	      this._rebuildEstimatedDataForKey("password");
	      this._refreshCache();
	      if (makeCurrent || this.isCurrent()) {
	        Parse.User._saveCurrentUser(this);
	      }
	    },

	    /**
	     * Unlike in the Android/iOS SDKs, logInWith is unnecessary, since you can
	     * call linkWith on the user (even if it doesn't exist yet on the server).
	     */
	    _linkWith: function(provider, options) {
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	        provider = Parse.User._authProviders[provider];
	      } else {
	        authType = provider.getAuthType();
	      }
	      if (_.has(options, 'authData')) {
	        var authData = this.get('authData') || {};
	        authData[authType] = options.authData;
	        this.set('authData', authData);

	        // Overridden so that the user can be made the current user.
	        var newOptions = _.clone(options) || {};
	        newOptions.success = function(model) {
	          model._handleSaveResult(true);
	          if (options.success) {
	            options.success.apply(this, arguments);
	          }
	        };
	        return this.save({'authData': authData}, newOptions);
	      } else {
	        var self = this;
	        var promise = new Parse.Promise();
	        provider.authenticate({
	          success: function(provider, result) {
	            self._linkWith(provider, {
	              authData: result,
	              success: options.success,
	              error: options.error
	            }).then(function() {
	              promise.resolve(self);
	            });
	          },
	          error: function(provider, error) {
	            if (options.error) {
	              options.error(self, error);
	            }
	            promise.reject(error);
	          }
	        });
	        return promise;
	      }
	    },

	    /**
	     * Unlinks a user from a service.
	     */
	    _unlinkFrom: function(provider, options) {
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	        provider = Parse.User._authProviders[provider];
	      } else {
	        authType = provider.getAuthType();
	      }
	      var newOptions = _.clone(options);
	      var self = this;
	      newOptions.authData = null;
	      newOptions.success = function(model) {
	        self._synchronizeAuthData(provider);
	        if (options.success) {
	          options.success.apply(this, arguments);
	        }
	      };
	      return this._linkWith(provider, newOptions);
	    },

	    /**
	     * Checks whether a user is linked to a service.
	     */
	    _isLinked: function(provider) {
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	      } else {
	        authType = provider.getAuthType();
	      }
	      var authData = this.get('authData') || {};
	      return !!authData[authType];
	    },

	    /**
	     * Deauthenticates all providers.
	     */
	    _logOutWithAll: function() {
	      var authData = this.get('authData');
	      if (!authData) {
	        return;
	      }
	      var self = this;
	      Parse._objectEach(this.get('authData'), function(value, key) {
	        self._logOutWith(key);
	      });
	    },

	    /**
	     * Deauthenticates a single provider (e.g. removing access tokens from the
	     * Facebook SDK).
	     */
	    _logOutWith: function(provider) {
	      if (!this.isCurrent()) {
	        return;
	      }
	      if (_.isString(provider)) {
	        provider = Parse.User._authProviders[provider];
	      }
	      if (provider && provider.deauthenticate) {
	        provider.deauthenticate();
	      }
	    },

	    /**
	     * Signs up a new user. You should call this instead of save for
	     * new Parse.Users. This will create a new Parse.User on the server, and
	     * also persist the session on disk so that you can access the user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling signUp.</p>
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {Object} attrs Extra fields to set on the new user, or null.
	     * @param {Object} options A Backbone-style options object.
	     * @return {Parse.Promise} A promise that is fulfilled when the signup
	     *     finishes.
	     * @see Parse.User.signUp
	     */
	    signUp: function(attrs, options) {
	      var error;
	      options = options || {};

	      var username = (attrs && attrs.username) || this.get("username");
	      if (!username || (username === "")) {
	        error = new Parse.Error(
	            Parse.Error.OTHER_CAUSE,
	            "Cannot sign up user with an empty name.");
	        if (options && options.error) {
	          options.error(this, error);
	        }
	        return Parse.Promise.error(error);
	      }

	      var password = (attrs && attrs.password) || this.get("password");
	      if (!password || (password === "")) {
	        error = new Parse.Error(
	            Parse.Error.OTHER_CAUSE,
	            "Cannot sign up user with an empty password.");
	        if (options && options.error) {
	          options.error(this, error);
	        }
	        return Parse.Promise.error(error);
	      }

	      // Overridden so that the user can be made the current user.
	      var newOptions = _.clone(options);
	      newOptions.success = function(model) {
	        model._handleSaveResult(true);
	        if (options.success) {
	          options.success.apply(this, arguments);
	        }
	      };
	      return this.save(attrs, newOptions);
	    },

	    /**
	     * Logs in a Parse.User. On success, this saves the session to localStorage,
	     * so you can retrieve the currently logged in user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling logIn.</p>
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {Object} options A Backbone-style options object.
	     * @see Parse.User.logIn
	     * @return {Parse.Promise} A promise that is fulfilled with the user when
	     *     the login is complete.
	     */
	    logIn: function(options) {
	      var model = this;
	      options = options || {};
	      var request = Parse._request({
	        route: "login",
	        method: "GET",
	        useMasterKey: options.useMasterKey,
	        data: this.toJSON()
	      });
	      return request.then(function(resp, status, xhr) {
	        var serverAttrs = model.parse(resp, status, xhr);
	        model._finishFetch(serverAttrs);
	        model._handleSaveResult(true);
	        return model;
	      })._thenRunCallbacks(options, this);
	    },

	    /**
	     * @see Parse.Object#save
	     */
	    save: function(arg1, arg2, arg3) {
	      var i, attrs, current, options, saved;
	      if (_.isObject(arg1) || _.isNull(arg1) || _.isUndefined(arg1)) {
	        attrs = arg1;
	        options = arg2;
	      } else {
	        attrs = {};
	        attrs[arg1] = arg2;
	        options = arg3;
	      }
	      options = options || {};

	      var newOptions = _.clone(options);
	      newOptions.success = function(model) {
	        model._handleSaveResult(false);
	        if (options.success) {
	          options.success.apply(this, arguments);
	        }
	      };
	      return Parse.Object.prototype.save.call(this, attrs, newOptions);
	    },

	    /**
	     * @see Parse.Object#fetch
	     */
	    fetch: function(options) {
	      var newOptions = options ? _.clone(options) : {};
	      newOptions.success = function(model) {
	        model._handleSaveResult(false);
	        if (options && options.success) {
	          options.success.apply(this, arguments);
	        }
	      };
	      return Parse.Object.prototype.fetch.call(this, newOptions);
	    },

	    /**
	     * Returns true if <code>current</code> would return this user.
	     * @see Parse.User#current
	     */
	    isCurrent: function() {
	      return this._isCurrentUser;
	    },

	    /**
	     * Returns get("username").
	     * @return {String}
	     * @see Parse.Object#get
	     */
	    getUsername: function() {
	      return this.get("username");
	    },

	    /**
	     * Calls set("username", username, options) and returns the result.
	     * @param {String} username
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see Parse.Object.set
	     */
	    setUsername: function(username, options) {
	      return this.set("username", username, options);
	    },

	    /**
	     * Calls set("password", password, options) and returns the result.
	     * @param {String} password
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see Parse.Object.set
	     */
	    setPassword: function(password, options) {
	      return this.set("password", password, options);
	    },

	    /**
	     * Returns get("email").
	     * @return {String}
	     * @see Parse.Object#get
	     */
	    getEmail: function() {
	      return this.get("email");
	    },

	    /**
	     * Calls set("email", email, options) and returns the result.
	     * @param {String} email
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see Parse.Object.set
	     */
	    setEmail: function(email, options) {
	      return this.set("email", email, options);
	    },

	    /**
	     * Checks whether this user is the current user and has been authenticated.
	     * @return (Boolean) whether this user is the current user and is logged in.
	     */
	    authenticated: function() {
	      return !!this._sessionToken &&
	          (Parse.User.current() && Parse.User.current().id === this.id);
	    },

	    /**
	     * Returns the session token for this user, if the user has been logged in,
	     * or if it is the result of a query with the master key. Otherwise, returns
	     * undefined.
	     * @return {String} the session token, or undefined
	     */
	    getSessionToken: function() {
	      return this._sessionToken;
	    },

	    /**
	     * Request a revocable session token to replace the older style of token.
	     * @param {Object} options A Backbone-style options object.
	     *
	     * @return {Parse.Promise} A promise that is resolved when the replacement
	     *   token has been fetched.
	     */
	    _upgradeToRevocableSession: function(options) {
	      options = options || {};
	      if (!Parse.User.current()) {
	        return Parse.Promise.as()._thenRunCallbacks(options);
	      }
	      var currentSession = Parse.User.current().getSessionToken();
	      if (Parse.Session._isRevocable(currentSession)) {
	        return Parse.Promise.as()._thenRunCallbacks(options);
	      }
	      return Parse._request({
	        route: 'upgradeToRevocableSession',
	        method: 'POST',
	        useMasterKey: options.useMasterKey,
	        sessionToken: currentSession
	      }).then(function(result) {
	        var session = new Parse.Session();
	        session._finishFetch(result);
	        var currentUser = Parse.User.current();
	        currentUser._sessionToken = session.getSessionToken();
	        Parse.User._saveCurrentUser(currentUser);
	      })._thenRunCallbacks(options);
	    },

	  }, /** @lends Parse.User */ {
	    // Class Variables

	    // The currently logged-in user.
	    _currentUser: null,

	    // Whether currentUser is known to match the serialized version on disk.
	    // This is useful for saving a localstorage check if you try to load
	    // _currentUser frequently while there is none stored.
	    _currentUserMatchesDisk: false,

	    // The localStorage key suffix that the current user is stored under.
	    _CURRENT_USER_KEY: "currentUser",

	    // The mapping of auth provider names to actual providers
	    _authProviders: {},

	    // Whether to rewrite className User to _User
	    _performUserRewrite: true,

	    // Whether to send a Revocable Session header
	    _isRevocableSessionEnabled: false,


	    // Class Methods

	    /**
	     * Signs up a new user with a username (or email) and password.
	     * This will create a new Parse.User on the server, and also persist the
	     * session in localStorage so that you can access the user using
	     * {@link #current}.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} username The username (or email) to sign up with.
	     * @param {String} password The password to sign up with.
	     * @param {Object} attrs Extra fields to set on the new user.
	     * @param {Object} options A Backbone-style options object.
	     * @return {Parse.Promise} A promise that is fulfilled with the user when
	     *     the signup completes.
	     * @see Parse.User#signUp
	     */
	    signUp: function(username, password, attrs, options) {
	      attrs = attrs || {};
	      attrs.username = username;
	      attrs.password = password;
	      var user = Parse.Object._create("_User");
	      return user.signUp(attrs, options);
	    },

	    /**
	     * Logs in a user with a username (or email) and password. On success, this
	     * saves the session to disk, so you can retrieve the currently logged in
	     * user using <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} username The username (or email) to log in with.
	     * @param {String} password The password to log in with.
	     * @param {Object} options A Backbone-style options object.
	     * @return {Parse.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     * @see Parse.User#logIn
	     */
	    logIn: function(username, password, options) {
	      var user = Parse.Object._create("_User");
	      user._finishFetch({ username: username, password: password });
	      return user.logIn(options);
	    },

	    /**
	     * Logs in a user with a session token. On success, this saves the session
	     * to disk, so you can retrieve the currently logged in user using
	     * <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} sessionToken The sessionToken to log in with.
	     * @param {Object} options A Backbone-style options object.
	     * @return {Parse.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     */
	    become: function(sessionToken, options) {
	      options = options || {};

	      var user = Parse.Object._create("_User");
	      return Parse._request({
	        route: "users",
	        className: "me",
	        method: "GET",
	        useMasterKey: options.useMasterKey,
	        sessionToken: sessionToken
	      }).then(function(resp, status, xhr) {
	        var serverAttrs = user.parse(resp, status, xhr);
	        user._finishFetch(serverAttrs);
	        user._handleSaveResult(true);
	        return user;

	      })._thenRunCallbacks(options, user);
	    },

	    /**
	     * Logs out the currently logged in user session. This will remove the
	     * session from disk, log out of linked services, and future calls to
	     * <code>current</code> will return <code>null</code>.
	     * @return {Parse.Promise} A promise that is resolved when the session is
	     *   destroyed on the server.
	     */
	    logOut: function() {
	      return Parse.User._currentAsync().then(function(currentUser) {
	        var promise = Parse.Storage.removeItemAsync(
	          Parse._getParsePath(Parse.User._CURRENT_USER_KEY));

	        if (currentUser !== null) {
	          var currentSession = currentUser.getSessionToken();
	          if (Parse.Session._isRevocable(currentSession)) {
	            promise.then(function() {
	              return Parse._request({
	                route: 'logout',
	                method: 'POST',
	                sessionToken: currentSession
	              });
	            });
	          }
	          currentUser._logOutWithAll();
	          currentUser._isCurrentUser = false;
	        }
	        Parse.User._currentUserMatchesDisk = true;
	        Parse.User._currentUser = null;

	        return promise;
	      });
	    },

	    /**
	     * Requests a password reset email to be sent to the specified email address
	     * associated with the user account. This email allows the user to securely
	     * reset their password on the Parse site.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} email The email address associated with the user that
	     *     forgot their password.
	     * @param {Object} options A Backbone-style options object.
	     */
	    requestPasswordReset: function(email, options) {
	      options = options || {};
	      var request = Parse._request({
	        route: "requestPasswordReset",
	        method: "POST",
	        useMasterKey: options.useMasterKey,
	        data: { email: email }
	      });
	      return request._thenRunCallbacks(options);
	    },

	    /**
	     * Retrieves the currently logged in ParseUser with a valid session,
	     * either from memory or localStorage, if necessary.
	     * @return {Parse.Object} The currently logged in Parse.User.
	     */
	    current: function() {
	      if (Parse.Storage.async) {
	        // We can't return the current user synchronously
	        Parse.User._currentAsync();
	        return Parse.User._currentUser;
	      }
	      
	      if (Parse.User._currentUser) {
	        return Parse.User._currentUser;
	      }

	      if (Parse.User._currentUserMatchesDisk) {
	        // TODO: Lazily log in anonymous user.
	        return Parse.User._currentUser;
	      }

	      // Load the user from local storage.
	      Parse.User._currentUserMatchesDisk = true;

	      var userData = Parse.Storage.getItem(Parse._getParsePath(
	          Parse.User._CURRENT_USER_KEY));
	      if (!userData) {
	        // TODO: Lazily log in anonymous user.
	        return null;
	      }
	      Parse.User._currentUser = Parse.Object._create("_User");
	      Parse.User._currentUser._isCurrentUser = true;

	      var json = JSON.parse(userData);
	      Parse.User._currentUser.id = json._id;
	      delete json._id;
	      Parse.User._currentUser._sessionToken = json._sessionToken;
	      delete json._sessionToken;
	      Parse.User._currentUser._finishFetch(json);

	      Parse.User._currentUser._synchronizeAllAuthData();
	      Parse.User._currentUser._refreshCache();
	      Parse.User._currentUser._opSetQueue = [{}];
	      return Parse.User._currentUser;
	    },

	    /**
	     * Retrieves the currently logged in ParseUser from asynchronous Storage.
	     * @return {Parse.Promise} A Promise that is resolved with the currently
	     *   logged in Parse User
	     */
	    _currentAsync: function() {
	      if (Parse.User._currentUser) {
	        return Parse.Promise.as(Parse.User._currentUser);
	      }

	      if (Parse.User._currentUserMatchesDisk) {
	        return Parse.Promise.as(Parse.User._currentUser);
	      }

	      // Load the user from Storage
	      return Parse.Storage.getItemAsync(Parse._getParsePath(
	        Parse.User._CURRENT_USER_KEY)).then(function(userData) {
	        if (!userData) {
	          return null;
	        }
	        Parse.User._currentUser = Parse.Object._create("_User");
	        Parse.User._currentUser._isCurrentUser = true;

	        var json = JSON.parse(userData);
	        Parse.User._currentUser.id = json._id;
	        delete json._id;
	        Parse.User._currentUser._sessionToken = json._sessionToken;
	        delete json._sessionToken;
	        Parse.User._currentUser._finishFetch(json);

	        Parse.User._currentUser._synchronizeAllAuthData();
	        Parse.User._currentUser._refreshCache();
	        Parse.User._currentUser._opSetQueue = [{}];
	        return Parse.User._currentUser;
	      });
	    },

	    /**
	     * Allow someone to define a custom User class without className
	     * being rewritten to _User. The default behavior is to rewrite
	     * User to _User for legacy reasons. This allows developers to
	     * override that behavior.
	     *
	     * @param {Boolean} isAllowed Whether or not to allow custom User class
	     */
	    allowCustomUserClass: function(isAllowed) {
	      this._performUserRewrite = !isAllowed;
	    },

	    /**
	     * Allow a legacy application to start using revocable sessions. If the
	     * current session token is not revocable, a request will be made for a new,
	     * revocable session.
	     * It is not necessary to call this method from cloud code unless you are
	     * handling user signup or login from the server side. In a cloud code call,
	     * this function will not attempt to upgrade the current token.
	     * @param {Object} options A Backbone-style options object.
	     *
	     * @return {Parse.Promise} A promise that is resolved when the process has
	     *   completed. If a replacement session token is requested, the promise
	     *   will be resolved after a new token has been fetched.
	     */
	    enableRevocableSession: function(options) {
	      options = options || {};
	      Parse.User._isRevocableSessionEnabled = true;
	      if (!Parse._isNode && Parse.User.current()) {
	        return Parse.User.current()._upgradeToRevocableSession(options);
	      }
	      return Parse.Promise.as()._thenRunCallbacks(options);
	    },

	    /**
	     * Persists a user as currentUser to localStorage, and into the singleton.
	     */
	    _saveCurrentUser: function(user) {
	      if (Parse.User._currentUser !== null &&
	          Parse.User._currentUser !== user) {
	        Parse.User.logOut();
	      }
	      user._isCurrentUser = true;
	      Parse.User._currentUser = user;
	      Parse.User._currentUserMatchesDisk = true;

	      var json = user.toJSON();
	      json._id = user.id;
	      json._sessionToken = user._sessionToken;
	      if (Parse.Storage.async) {
	        Parse.Storage.setItemAsync(
	          Parse._getParsePath(Parse.User._CURRENT_USER_KEY),
	          JSON.stringify(json));
	      } else {
	        Parse.Storage.setItem(
	          Parse._getParsePath(Parse.User._CURRENT_USER_KEY),
	          JSON.stringify(json));
	      }
	    },

	    _registerAuthenticationProvider: function(provider) {
	      Parse.User._authProviders[provider.getAuthType()] = provider;
	      // Synchronize the current user with the auth provider.
	      if (Parse.User.current()) {
	        Parse.User.current()._synchronizeAuthData(provider.getAuthType());
	      }
	    },

	    _logInWith: function(provider, options) {
	      var user = Parse.Object._create("_User");
	      return user._linkWith(provider, options);
	    }

	  });
	}(this));


	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;

	  /**
	   * @class
	   *
	   * <p>A Parse.Session object is a local representation of a revocable session.
	   * This class is a subclass of a Parse.Object, and retains the same
	   * functionality of a Parse.Object.</p>
	   */
	  Parse.Session = Parse.Object.extend('_Session',
	  /** @lends Parse.Session.prototype */
	  {
	    /**
	     * Returns the session token string.
	     * @return {String}
	     */
	    getSessionToken: function() {
	      return this._sessionToken;
	    },

	    /**
	     * Internal method to handle special fields in a _Session response.
	     */
	    _mergeMagicFields: function(attrs) {
	      if (attrs.sessionToken) {
	        this._sessionToken = attrs.sessionToken;
	        delete attrs.sessionToken;
	      }
	      Parse.Session.__super__._mergeMagicFields.call(this, attrs);
	    },
	  }, /** @lends Parse.Session */ {

	    // Throw an error when modifying these read-only fields
	    readOnlyAttributes: {
	      createdWith: true,
	      expiresAt: true,
	      installationId: true,
	      restricted: true,
	      sessionToken: true,
	      user: true
	    },

	    /**
	     * Retrieves the Session object for the currently logged in session.
	     * @return {Parse.Promise} A promise that is resolved with the Parse.Session
	     *   object after it has been fetched.
	     */
	    current: function(options) {
	      options = options || {};

	      var session = Parse.Object._create('_Session');
	      var currentToken = Parse.User.current().getSessionToken();
	      return Parse._request({
	        route: 'sessions',
	        className: 'me',
	        method: 'GET',
	        useMasterKey: options.useMasterKey,
	        sessionToken: currentToken
	      }).then(function(resp, status, xhr) {
	        var serverAttrs = session.parse(resp, status, xhr);
	        session._finishFetch(serverAttrs);
	        return session;
	      })._thenRunCallbacks(options, session);
	    },

	    /**
	     * Determines whether a session token is revocable.
	     * @return {Boolean}
	     */
	    _isRevocable: function(token) {
	      return token.indexOf('r:') > -1;
	    },

	    /**
	     * Determines whether the current session token is revocable.
	     * This method is useful for migrating Express.js or Node.js web apps to
	     * use revocable sessions. If you are migrating an app that uses the Parse
	     * SDK in the browser only, please use Parse.User.enableRevocableSession()
	     * instead, so that sessions can be automatically upgraded.
	     * @return {Boolean}
	     */
	    isCurrentSessionRevocable: function() {
	      if (Parse.User.current() !== null) {
	        return Parse.Session._isRevocable(
	          Parse.User.current().getSessionToken()
	        );
	      }
	    }
	  });
	})(this);

	// Parse.Query is a way to create a list of Parse.Objects.
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Creates a new parse Parse.Query for the given Parse.Object subclass.
	   * @param objectClass -
	   *   An instance of a subclass of Parse.Object, or a Parse className string.
	   * @class
	   *
	   * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The
	   * most common use case is finding all objects that match a query through the
	   * <code>find</code> method. For example, this sample code fetches all objects
	   * of class <code>MyClass</code>. It calls a different function depending on
	   * whether the fetch succeeded or not.
	   * 
	   * <pre>
	   * var query = new Parse.Query(MyClass);
	   * query.find({
	   *   success: function(results) {
	   *     // results is an array of Parse.Object.
	   *   },
	   *
	   *   error: function(error) {
	   *     // error is an instance of Parse.Error.
	   *   }
	   * });</pre></p>
	   * 
	   * <p>A Parse.Query can also be used to retrieve a single object whose id is
	   * known, through the get method. For example, this sample code fetches an
	   * object of class <code>MyClass</code> and id <code>myId</code>. It calls a
	   * different function depending on whether the fetch succeeded or not.
	   * 
	   * <pre>
	   * var query = new Parse.Query(MyClass);
	   * query.get(myId, {
	   *   success: function(object) {
	   *     // object is an instance of Parse.Object.
	   *   },
	   *
	   *   error: function(object, error) {
	   *     // error is an instance of Parse.Error.
	   *   }
	   * });</pre></p>
	   * 
	   * <p>A Parse.Query can also be used to count the number of objects that match
	   * the query without retrieving all of those objects. For example, this
	   * sample code counts the number of objects of the class <code>MyClass</code>
	   * <pre>
	   * var query = new Parse.Query(MyClass);
	   * query.count({
	   *   success: function(number) {
	   *     // There are number instances of MyClass.
	   *   },
	   *
	   *   error: function(error) {
	   *     // error is an instance of Parse.Error.
	   *   }
	   * });</pre></p>
	   */
	  Parse.Query = function(objectClass) {
	    if (_.isString(objectClass)) {
	      objectClass = Parse.Object._getSubclass(objectClass);
	    }

	    this.objectClass = objectClass;

	    this.className = objectClass.prototype.className;

	    this._where = {};
	    this._include = [];
	    this._limit = -1; // negative limit means, do not send a limit
	    this._skip = 0;
	    this._extraOptions = {};
	  };

	  /**
	   * Constructs a Parse.Query that is the OR of the passed in queries.  For
	   * example:
	   * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>
	   *
	   * will create a compoundQuery that is an or of the query1, query2, and
	   * query3.
	   * @param {...Parse.Query} var_args The list of queries to OR.
	   * @return {Parse.Query} The query that is the OR of the passed in queries.
	   */
	  Parse.Query.or = function() {
	    var queries = _.toArray(arguments);
	    var className = null;
	    Parse._arrayEach(queries, function(q) {
	      if (_.isNull(className)) {
	        className = q.className;
	      }

	      if (className !== q.className) {
	        throw "All queries must be for the same class";
	      }
	    });
	    var query = new Parse.Query(className);
	    query._orQuery(queries);
	    return query;
	  };

	  Parse.Query.prototype = {
	    /**
	     * Constructs a Parse.Object whose id is already known by fetching data from
	     * the server.  Either options.success or options.error is called when the
	     * find completes.
	     *
	     * @param {String} objectId The id of the object to be fetched.
	     * @param {Object} options A Backbone-style options object.
	     * Valid options are:<ul>
	     *   <li>success: A Backbone-style success callback
	     *   <li>error: An Backbone-style error callback.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     */
	    get: function(objectId, options) {
	      var self = this;
	      self.equalTo('objectId', objectId);

	      var firstOptions = {};
	      if (options && _.has(options, 'useMasterKey')) {
	        firstOptions = { useMasterKey: options.useMasterKey };
	      }

	      return self.first(firstOptions).then(function(response) {
	        if (response) {
	          return response;
	        }

	        var errorObject = new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,
	                                          "Object not found.");
	        return Parse.Promise.error(errorObject);

	      })._thenRunCallbacks(options, null);
	    },

	    /**
	     * Returns a JSON representation of this query.
	     * @return {Object} The JSON representation of the query.
	     */
	    toJSON: function() {
	      var params = {
	        where: this._where
	      };

	      if (this._include.length > 0) {
	        params.include = this._include.join(",");
	      }
	      if (this._select) {
	        params.keys = this._select.join(",");
	      }
	      if (this._limit >= 0) {
	        params.limit = this._limit;
	      }
	      if (this._skip > 0) {
	        params.skip = this._skip;
	      }
	      if (this._order !== undefined) {
	        params.order = this._order.join(",");
	      }

	      Parse._objectEach(this._extraOptions, function(v, k) {
	        params[k] = v;
	      });

	      return params;
	    },

	    /**
	     * Retrieves a list of ParseObjects that satisfy this query.
	     * Either options.success or options.error is called when the find
	     * completes.
	     *
	     * @param {Object} options A Backbone-style options object. Valid options
	     * are:<ul>
	     *   <li>success: Function to call when the find completes successfully.
	     *   <li>error: Function to call when the find fails.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     *
	     * @return {Parse.Promise} A promise that is resolved with the results when
	     * the query completes.
	     */
	    find: function(options) {
	      var self = this;
	      options = options || {};

	      var request = Parse._request({
	        route: "classes",
	        className: this.className,
	        method: "GET",
	        useMasterKey: options.useMasterKey,
	        data: this.toJSON()
	      });

	      return request.then(function(response) {
	        return _.map(response.results, function(json) {
	          var obj;
	          if (response.className) {
	            obj = new Parse.Object(response.className);
	          } else {
	            obj = new self.objectClass();
	          }
	          obj._finishFetch(json, true);
	          return obj;
	        });
	      })._thenRunCallbacks(options);
	    },

	    /**
	     * Counts the number of objects that match this query.
	     * Either options.success or options.error is called when the count
	     * completes.
	     *
	     * @param {Object} options A Backbone-style options object. Valid options
	     * are:<ul>
	     *   <li>success: Function to call when the count completes successfully.
	     *   <li>error: Function to call when the find fails.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     *
	     * @return {Parse.Promise} A promise that is resolved with the count when
	     * the query completes.
	     */
	    count: function(options) {
	      var self = this;
	      options = options || {};

	      var params = this.toJSON();
	      params.limit = 0;
	      params.count = 1;
	      var request = Parse._request({
	        route: "classes",
	        className: self.className, 
	        method: "GET",
	        useMasterKey: options.useMasterKey,
	        data: params
	      });

	      return request.then(function(response) {
	        return response.count;
	      })._thenRunCallbacks(options);
	    },

	    /**
	     * Retrieves at most one Parse.Object that satisfies this query.
	     *
	     * Either options.success or options.error is called when it completes.
	     * success is passed the object if there is one. otherwise, undefined.
	     *
	     * @param {Object} options A Backbone-style options object. Valid options
	     * are:<ul>
	     *   <li>success: Function to call when the find completes successfully.
	     *   <li>error: Function to call when the find fails.
	     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to
	     *     be used for this request.
	     * </ul>
	     *
	     * @return {Parse.Promise} A promise that is resolved with the object when
	     * the query completes.
	     */
	    first: function(options) {
	      var self = this;
	      options = options || {};

	      var params = this.toJSON();
	      params.limit = 1;
	      var request = Parse._request({
	        route: "classes",
	        className: this.className, 
	        method: "GET",
	        useMasterKey: options.useMasterKey,
	        data: params
	      });

	      return request.then(function(response) {
	        return _.map(response.results, function(json) {
	          var obj;
	          if (response.className) {
	            obj = new Parse.Object(response.className);
	          } else {
	            obj = new self.objectClass();
	          }
	          obj._finishFetch(json, true);
	          return obj;
	        })[0];
	      })._thenRunCallbacks(options);
	    },

	    /**
	     * Returns a new instance of Parse.Collection backed by this query.
	     * @param {Array} items An array of instances of <code>Parse.Object</code>
	     *     with which to start this Collection.
	     * @param {Object} options An optional object with Backbone-style options.
	     * Valid options are:<ul>
	     *   <li>model: The Parse.Object subclass that this collection contains.
	     *   <li>query: An instance of Parse.Query to use when fetching items.
	     *   <li>comparator: A string property name or function to sort by.
	     * </ul>
	     * @return {Parse.Collection}
	     */
	    collection: function(items, options) {
	      options = options || {};
	      return new Parse.Collection(items, _.extend(options, {
	        model: this.objectClass,
	        query: this
	      }));
	    },

	    /**
	     * Sets the number of results to skip before returning any results.
	     * This is useful for pagination.
	     * Default is to skip zero results.
	     * @param {Number} n the number of results to skip.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    skip: function(n) {
	      this._skip = n;
	      return this;
	    },

	    /**
	     * Sets the limit of the number of results to return. The default limit is
	     * 100, with a maximum of 1000 results being returned at a time.
	     * @param {Number} n the number of results to limit to.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    limit: function(n) {
	      this._limit = n;
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that the Parse.Object must contain.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    equalTo: function(key, value) {
	      if (_.isUndefined(value)) {
	        return this.doesNotExist(key);
	      } 

	      this._where[key] = Parse._encode(value);
	      return this;
	    },

	    /**
	     * Helper for condition queries
	     */
	    _addCondition: function(key, condition, value) {
	      // Check if we already have a condition
	      if (!this._where[key]) {
	        this._where[key] = {};
	      }
	      this._where[key][condition] = Parse._encode(value);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be not equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that must not be equalled.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    notEqualTo: function(key, value) {
	      this._addCondition(key, "$ne", value);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be less than the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an upper bound.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    lessThan: function(key, value) {
	      this._addCondition(key, "$lt", value);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be greater than the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an lower bound.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    greaterThan: function(key, value) {
	      this._addCondition(key, "$gt", value);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be less than or equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an upper bound.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    lessThanOrEqualTo: function(key, value) {
	      this._addCondition(key, "$lte", value);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be greater than or equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an lower bound.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    greaterThanOrEqualTo: function(key, value) {
	      this._addCondition(key, "$gte", value);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be contained in the provided list of values.
	     * @param {String} key The key to check.
	     * @param {Array} values The values that will match.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    containedIn: function(key, values) {
	      this._addCondition(key, "$in", values);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * not be contained in the provided list of values.
	     * @param {String} key The key to check.
	     * @param {Array} values The values that will not match.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    notContainedIn: function(key, values) {
	      this._addCondition(key, "$nin", values);
	      return this;
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * contain each one of the provided list of values.
	     * @param {String} key The key to check.  This key's value must be an array.
	     * @param {Array} values The values that will match.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    containsAll: function(key, values) {
	      this._addCondition(key, "$all", values);
	      return this;
	    },


	    /**
	     * Add a constraint for finding objects that contain the given key.
	     * @param {String} key The key that should exist.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    exists: function(key) {
	      this._addCondition(key, "$exists", true);
	      return this;
	    },

	    /**
	     * Add a constraint for finding objects that do not contain a given key.
	     * @param {String} key The key that should not exist
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    doesNotExist: function(key) {
	      this._addCondition(key, "$exists", false);
	      return this;
	    },

	    /**
	     * Add a regular expression constraint for finding string values that match
	     * the provided regular expression.
	     * This may be slow for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {RegExp} regex The regular expression pattern to match.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    matches: function(key, regex, modifiers) {
	      this._addCondition(key, "$regex", regex);
	      if (!modifiers) { modifiers = ""; }
	      // Javascript regex options support mig as inline options but store them 
	      // as properties of the object. We support mi & should migrate them to
	      // modifiers
	      if (regex.ignoreCase) { modifiers += 'i'; }
	      if (regex.multiline) { modifiers += 'm'; }

	      if (modifiers && modifiers.length) {
	        this._addCondition(key, "$options", modifiers);
	      }
	      return this;
	    },

	    /**
	     * Add a constraint that requires that a key's value matches a Parse.Query
	     * constraint.
	     * @param {String} key The key that the contains the object to match the
	     *                     query.
	     * @param {Parse.Query} query The query that should match.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    matchesQuery: function(key, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$inQuery", queryJSON);
	      return this;
	    },

	   /**
	     * Add a constraint that requires that a key's value not matches a
	     * Parse.Query constraint.
	     * @param {String} key The key that the contains the object to match the
	     *                     query.
	     * @param {Parse.Query} query The query that should not match.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    doesNotMatchQuery: function(key, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$notInQuery", queryJSON);
	      return this;
	    },


	    /**
	     * Add a constraint that requires that a key's value matches a value in
	     * an object returned by a different Parse.Query.
	     * @param {String} key The key that contains the value that is being
	     *                     matched.
	     * @param {String} queryKey The key in the objects returned by the query to
	     *                          match against.
	     * @param {Parse.Query} query The query to run.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    matchesKeyInQuery: function(key, queryKey, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$select",
	                         { key: queryKey, query: queryJSON });
	      return this;
	    },

	    /**
	     * Add a constraint that requires that a key's value not match a value in
	     * an object returned by a different Parse.Query.
	     * @param {String} key The key that contains the value that is being
	     *                     excluded.
	     * @param {String} queryKey The key in the objects returned by the query to
	     *                          match against.
	     * @param {Parse.Query} query The query to run.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    doesNotMatchKeyInQuery: function(key, queryKey, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$dontSelect",
	                         { key: queryKey, query: queryJSON });
	      return this;
	    },

	    /**
	     * Add constraint that at least one of the passed in queries matches.
	     * @param {Array} queries
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    _orQuery: function(queries) {
	      var queryJSON = _.map(queries, function(q) {
	        return q.toJSON().where;
	      });

	      this._where.$or = queryJSON;
	      return this;
	    },

	    /**
	     * Converts a string into a regex that matches it.
	     * Surrounding with \Q .. \E does this, we just need to escape \E's in
	     * the text separately.
	     */
	    _quote: function(s) {
	      return "\\Q" + s.replace("\\E", "\\E\\\\E\\Q") + "\\E";
	    },

	    /**
	     * Add a constraint for finding string values that contain a provided
	     * string.  This may be slow for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {String} substring The substring that the value must contain.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    contains: function(key, value) {
	      this._addCondition(key, "$regex", this._quote(value));
	      return this;
	    },

	    /**
	     * Add a constraint for finding string values that start with a provided
	     * string.  This query will use the backend index, so it will be fast even
	     * for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {String} prefix The substring that the value must start with.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    startsWith: function(key, value) {
	      this._addCondition(key, "$regex", "^" + this._quote(value));
	      return this;
	    },

	    /**
	     * Add a constraint for finding string values that end with a provided
	     * string.  This will be slow for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {String} suffix The substring that the value must end with.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    endsWith: function(key, value) {
	      this._addCondition(key, "$regex", this._quote(value) + "$");
	      return this;
	    },

	    /**
	     * Sorts the results in ascending order by the given key.
	     * 
	     * @param {(String|String[]|...String} key The key to order by, which is a 
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    ascending: function() {
	      this._order = [];
	      return this.addAscending.apply(this, arguments);
	    },

	    /**
	     * Sorts the results in ascending order by the given key, 
	     * but can also add secondary sort descriptors without overwriting _order.
	     * 
	     * @param {(String|String[]|...String} key The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    addAscending: function(key) {
	      var self = this; 
	      if (!this._order) {
	        this._order = [];
	      }
	      Parse._arrayEach(arguments, function(key) {
	        if (Array.isArray(key)) {
	          key = key.join();
	        }
	        self._order = self._order.concat(key.replace(/\s/g, "").split(","));
	      });
	      return this;
	    },

	    /**
	     * Sorts the results in descending order by the given key.
	     * 
	     * @param {(String|String[]|...String} key The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    descending: function(key) {
	      this._order = [];
	      return this.addDescending.apply(this, arguments);
	    },

	    /**
	     * Sorts the results in descending order by the given key,
	     * but can also add secondary sort descriptors without overwriting _order.
	     * 
	     * @param {(String|String[]|...String} key The key to order by, which is a
	     * string of comma separated values, or an Array of keys, or multiple keys.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    addDescending: function(key) {
	      var self = this; 
	      if (!this._order) {
	        this._order = [];
	      }
	      Parse._arrayEach(arguments, function(key) {
	        if (Array.isArray(key)) {
	          key = key.join();
	        }
	        self._order = self._order.concat(
	          _.map(key.replace(/\s/g, "").split(","), 
	            function(k) { return "-" + k; }));
	      });
	      return this;
	    },

	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given.
	     * @param {String} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    near: function(key, point) {
	      if (!(point instanceof Parse.GeoPoint)) {
	        // Try to cast it to a GeoPoint, so that near("loc", [20,30]) works.
	        point = new Parse.GeoPoint(point);
	      }
	      this._addCondition(key, "$nearSphere", point);
	      return this;
	    },

	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * @param {String} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @param {Number} maxDistance Maximum distance (in radians) of results to
	     *   return.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    withinRadians: function(key, point, distance) {
	      this.near(key, point);
	      this._addCondition(key, "$maxDistance", distance);
	      return this;
	    },

	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * Radius of earth used is 3958.8 miles.
	     * @param {String} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @param {Number} maxDistance Maximum distance (in miles) of results to
	     *     return.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    withinMiles: function(key, point, distance) {
	      return this.withinRadians(key, point, distance / 3958.8);
	    },

	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * Radius of earth used is 6371.0 kilometers.
	     * @param {String} key The key that the Parse.GeoPoint is stored in.
	     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.
	     * @param {Number} maxDistance Maximum distance (in kilometers) of results
	     *     to return.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    withinKilometers: function(key, point, distance) {
	      return this.withinRadians(key, point, distance / 6371.0);
	    },

	    /**
	     * Add a constraint to the query that requires a particular key's
	     * coordinates be contained within a given rectangular geographic bounding
	     * box.
	     * @param {String} key The key to be constrained.
	     * @param {Parse.GeoPoint} southwest
	     *     The lower-left inclusive corner of the box.
	     * @param {Parse.GeoPoint} northeast
	     *     The upper-right inclusive corner of the box.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    withinGeoBox: function(key, southwest, northeast) {
	      if (!(southwest instanceof Parse.GeoPoint)) {
	        southwest = new Parse.GeoPoint(southwest);
	      }
	      if (!(northeast instanceof Parse.GeoPoint)) {
	        northeast = new Parse.GeoPoint(northeast);
	      }
	      this._addCondition(key, '$within', { '$box': [southwest, northeast] });
	      return this;
	    },

	    /**
	     * Include nested Parse.Objects for the provided key.  You can use dot
	     * notation to specify which fields in the included object are also fetched.
	     * @param {String} key The name of the key to include.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    include: function() {
	      var self = this;
	      Parse._arrayEach(arguments, function(key) {
	        if (_.isArray(key)) {
	          self._include = self._include.concat(key);
	        } else {
	          self._include.push(key);
	        }
	      });
	      return this;
	    },

	    /**
	     * Restrict the fields of the returned Parse.Objects to include only the
	     * provided keys.  If this is called multiple times, then all of the keys
	     * specified in each of the calls will be included.
	     * @param {Array} keys The names of the keys to include.
	     * @return {Parse.Query} Returns the query, so you can chain this call.
	     */
	    select: function() {
	      var self = this;
	      this._select = this._select || [];
	      Parse._arrayEach(arguments, function(key) {
	        if (_.isArray(key)) {
	          self._select = self._select.concat(key);
	        } else {
	          self._select.push(key);
	        }
	      });
	      return this;
	    },

	    /**
	     * Iterates over each result of a query, calling a callback for each one. If
	     * the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are
	     * processed in an unspecified order. The query may not have any sort order,
	     * and may not use limit or skip.
	     * @param {Function} callback Callback that will be called with each result
	     *     of the query.
	     * @param {Object} options An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     * @return {Parse.Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */
	    each: function(callback, options) {
	      options = options || {};

	      if (this._order || this._skip || (this._limit >= 0)) {
	        var error =
	          "Cannot iterate on a query with sort, skip, or limit.";
	        return Parse.Promise.error(error)._thenRunCallbacks(options);
	      }

	      var promise = new Parse.Promise();

	      var query = new Parse.Query(this.objectClass);
	      // We can override the batch size from the options.
	      // This is undocumented, but useful for testing.
	      query._limit = options.batchSize || 100;
	      query._where = _.clone(this._where);
	      query._include = _.clone(this._include);
	      if (this._select) {
	        query._select = _.clone(this._select);
	      }

	      query.ascending('objectId');

	      var findOptions = {};
	      if (_.has(options, "useMasterKey")) {
	        findOptions.useMasterKey = options.useMasterKey;
	      }

	      var finished = false;
	      return Parse.Promise._continueWhile(function() {
	        return !finished;

	      }, function() {
	        return query.find(findOptions).then(function(results) {
	          var callbacksDone = Parse.Promise.as();
	          Parse._.each(results, function(result) {
	            callbacksDone = callbacksDone.then(function() {
	              return callback(result);
	            });
	          });

	          return callbacksDone.then(function() {
	            if (results.length >= query._limit) {
	              query.greaterThan("objectId", results[results.length - 1].id);
	            } else {
	              finished = true;
	            }
	          });
	        });
	      })._thenRunCallbacks(options);
	    }
	  };

	}(this));

	/*global FB: false , console: false*/
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  var PUBLIC_KEY = "*";

	  var initialized = false;
	  var requestedPermissions;
	  var initOptions;
	  var provider = {
	    authenticate: function(options) {
	      var self = this;
	      FB.login(function(response) {
	        if (response.authResponse) {
	          if (options.success) {
	            options.success(self, {
	              id: response.authResponse.userID,
	              access_token: response.authResponse.accessToken,
	              expiration_date: new Date(response.authResponse.expiresIn * 1000 +
	                  (new Date()).getTime()).toJSON()
	            });
	          }
	        } else {
	          if (options.error) {
	            options.error(self, response);
	          }
	        }
	      }, {
	        scope: requestedPermissions
	      });
	    },
	    restoreAuthentication: function(authData) {
	      if (authData) {
	        var authResponse = {
	          userID: authData.id,
	          accessToken: authData.access_token,
	          expiresIn: (Parse._parseDate(authData.expiration_date).getTime() -
	              (new Date()).getTime()) / 1000
	        };
	        var newOptions = _.clone(initOptions);
	        newOptions.authResponse = authResponse;

	        // Suppress checks for login status from the browser.
	        newOptions.status = false;

	        // If the user doesn't match the one known by the FB SDK, log out.
	        // Most of the time, the users will match -- it's only in cases where
	        // the FB SDK knows of a different user than the one being restored
	        // from a Parse User that logged in with username/password.
	        var existingResponse = FB.getAuthResponse();
	        if (existingResponse &&
	            existingResponse.userID !== authResponse.userID) {
	          FB.logout();
	        }

	        FB.init(newOptions);
	      }
	      return true;
	    },
	    getAuthType: function() {
	      return "facebook";
	    },
	    deauthenticate: function() {
	      this.restoreAuthentication(null);
	    }
	  };

	  /**
	   * Provides a set of utilities for using Parse with Facebook.
	   * @namespace
	   * Provides a set of utilities for using Parse with Facebook.
	   */
	  Parse.FacebookUtils = {
	    /**
	     * Initializes Parse Facebook integration.  Call this function after you
	     * have loaded the Facebook Javascript SDK with the same parameters
	     * as you would pass to<code>
	     * <a href=
	     * "https://developers.facebook.com/docs/reference/javascript/FB.init/">
	     * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you
	     * with these arguments.
	     *
	     * @param {Object} options Facebook options argument as described here:
	     *   <a href=
	     *   "https://developers.facebook.com/docs/reference/javascript/FB.init/">
	     *   FB.init()</a>. The status flag will be coerced to 'false' because it
	     *   interferes with Parse Facebook integration. Call FB.getLoginStatus()
	     *   explicitly if this behavior is required by your application.
	     */
	    init: function(options) {
	      if (typeof(FB) === 'undefined') {
	        throw "The Facebook JavaScript SDK must be loaded before calling init.";
	      } 
	      initOptions = _.clone(options) || {};
	      if (initOptions.status && typeof(console) !== "undefined") {
	        var warn = console.warn || console.log || function() {};
	        warn.call(console, "The 'status' flag passed into" +
	          " FB.init, when set to true, can interfere with Parse Facebook" +
	          " integration, so it has been suppressed. Please call" +
	          " FB.getLoginStatus() explicitly if you require this behavior.");
	      }
	      initOptions.status = false;
	      FB.init(initOptions);
	      Parse.User._registerAuthenticationProvider(provider);
	      initialized = true;
	    },

	    /**
	     * Gets whether the user has their account linked to Facebook.
	     * 
	     * @param {Parse.User} user User to check for a facebook link.
	     *     The user must be logged in on this device.
	     * @return {Boolean} <code>true</code> if the user has their account
	     *     linked to Facebook.
	     */
	    isLinked: function(user) {
	      return user._isLinked("facebook");
	    },

	    /**
	     * Logs in a user using Facebook. This method delegates to the Facebook
	     * SDK to authenticate the user, and then automatically logs in (or
	     * creates, in the case where it is a new user) a Parse.User.
	     * 
	     * @param {String, Object} permissions The permissions required for Facebook
	     *    log in.  This is a comma-separated string of permissions.
	     *    Alternatively, supply a Facebook authData object as described in our
	     *    REST API docs if you want to handle getting facebook auth tokens
	     *    yourself.
	     * @param {Object} options Standard options object with success and error
	     *    callbacks.
	     */
	    logIn: function(permissions, options) {
	      if (!permissions || _.isString(permissions)) {
	        if (!initialized) {
	          throw "You must initialize FacebookUtils before calling logIn.";
	        }
	        requestedPermissions = permissions;
	        return Parse.User._logInWith("facebook", options);
	      } else {
	        var newOptions = _.clone(options) || {};
	        newOptions.authData = permissions;
	        return Parse.User._logInWith("facebook", newOptions);
	      }
	    },

	    /**
	     * Links Facebook to an existing PFUser. This method delegates to the
	     * Facebook SDK to authenticate the user, and then automatically links
	     * the account to the Parse.User.
	     *
	     * @param {Parse.User} user User to link to Facebook. This must be the
	     *     current user.
	     * @param {String, Object} permissions The permissions required for Facebook
	     *    log in.  This is a comma-separated string of permissions. 
	     *    Alternatively, supply a Facebook authData object as described in our
	     *    REST API docs if you want to handle getting facebook auth tokens
	     *    yourself.
	     * @param {Object} options Standard options object with success and error
	     *    callbacks.
	     */
	    link: function(user, permissions, options) {
	      if (!permissions || _.isString(permissions)) {
	        if (!initialized) {
	          throw "You must initialize FacebookUtils before calling link.";
	        }
	        requestedPermissions = permissions;
	        return user._linkWith("facebook", options);
	      } else {
	        var newOptions = _.clone(options) || {};
	        newOptions.authData = permissions;
	        return user._linkWith("facebook", newOptions);
	      }
	    },

	    /**
	     * Unlinks the Parse.User from a Facebook account. 
	     * 
	     * @param {Parse.User} user User to unlink from Facebook. This must be the
	     *     current user.
	     * @param {Object} options Standard options object with success and error
	     *    callbacks.
	     */
	    unlink: function(user, options) {
	      if (!initialized) {
	        throw "You must initialize FacebookUtils before calling unlink.";
	      }
	      return user._unlinkFrom("facebook", options);
	    }
	  };
	  
	}(this));

	/*global _: false, document: false, window: false, navigator: false */
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * History serves as a global router (per frame) to handle hashchange
	   * events or pushState, match the appropriate route, and trigger
	   * callbacks. You shouldn't ever have to create one of these yourself
	   * — you should use the reference to <code>Parse.history</code>
	   * that will be created for you automatically if you make use of 
	   * Routers with routes.
	   * @class
	   *   
	   * <p>A fork of Backbone.History, provided for your convenience.  If you 
	   * use this class, you must also include jQuery, or another library 
	   * that provides a jQuery-compatible $ function.  For more information,
	   * see the <a href="http://documentcloud.github.com/backbone/#History">
	   * Backbone documentation</a>.</p>
	   * <p><strong><em>Available in the client SDK only.</em></strong></p>
	   */
	  Parse.History = function() {
	    this.handlers = [];
	    _.bindAll(this, 'checkUrl');
	  };

	  // Cached regex for cleaning leading hashes and slashes .
	  var routeStripper = /^[#\/]/;

	  // Cached regex for detecting MSIE.
	  var isExplorer = /msie [\w.]+/;

	  // Has the history handling already been started?
	  Parse.History.started = false;

	  // Set up all inheritable **Parse.History** properties and methods.
	  _.extend(Parse.History.prototype, Parse.Events,
	           /** @lends Parse.History.prototype */ {

	    // The default interval to poll for hash changes, if necessary, is
	    // twenty times a second.
	    interval: 50,

	    // Gets the true hash value. Cannot use location.hash directly due to bug
	    // in Firefox where location.hash will always be decoded.
	    getHash: function(windowOverride) {
	      var loc = windowOverride ? windowOverride.location : window.location;
	      var match = loc.href.match(/#(.*)$/);
	      return match ? match[1] : '';
	    },

	    // Get the cross-browser normalized URL fragment, either from the URL,
	    // the hash, or the override.
	    getFragment: function(fragment, forcePushState) {
	      if (Parse._isNullOrUndefined(fragment)) {
	        if (this._hasPushState || forcePushState) {
	          fragment = window.location.pathname;
	          var search = window.location.search;
	          if (search) {
	            fragment += search;
	          }
	        } else {
	          fragment = this.getHash();
	        }
	      }
	      if (!fragment.indexOf(this.options.root)) {
	        fragment = fragment.substr(this.options.root.length);
	      }
	      return fragment.replace(routeStripper, '');
	    },

	    /**
	     * Start the hash change handling, returning `true` if the current
	     * URL matches an existing route, and `false` otherwise.
	     */
	    start: function(options) {
	      if (Parse.History.started) {
	        throw new Error("Parse.history has already been started");
	      }
	      Parse.History.started = true;

	      // Figure out the initial configuration. Do we need an iframe?
	      // Is pushState desired ... is it available?
	      this.options = _.extend({}, {root: '/'}, this.options, options);
	      this._wantsHashChange = this.options.hashChange !== false;
	      this._wantsPushState = !!this.options.pushState;
	      this._hasPushState = !!(this.options.pushState && 
	                              window.history &&
	                              window.history.pushState);
	      var fragment = this.getFragment();
	      var docMode = document.documentMode;
	      var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) &&
	                   (!docMode || docMode <= 7));

	      if (oldIE) {
	        this.iframe = Parse.$('<iframe src="javascript:0" tabindex="-1" />')
	                      .hide().appendTo('body')[0].contentWindow;
	        this.navigate(fragment);
	      }

	      // Depending on whether we're using pushState or hashes, and whether
	      // 'onhashchange' is supported, determine how we check the URL state.
	      if (this._hasPushState) {
	        Parse.$(window).bind('popstate', this.checkUrl);
	      } else if (this._wantsHashChange &&
	                 ('onhashchange' in window) &&
	                 !oldIE) {
	        Parse.$(window).bind('hashchange', this.checkUrl);
	      } else if (this._wantsHashChange) {
	        this._checkUrlInterval = window.setInterval(this.checkUrl,
	                                                    this.interval);
	      }

	      // Determine if we need to change the base url, for a pushState link
	      // opened by a non-pushState browser.
	      this.fragment = fragment;
	      var loc = window.location;
	      var atRoot  = loc.pathname === this.options.root;

	      // If we've started off with a route from a `pushState`-enabled browser,
	      // but we're currently in a browser that doesn't support it...
	      if (this._wantsHashChange && 
	          this._wantsPushState && 
	          !this._hasPushState &&
	          !atRoot) {
	        this.fragment = this.getFragment(null, true);
	        window.location.replace(this.options.root + '#' + this.fragment);
	        // Return immediately as browser will do redirect to new url
	        return true;

	      // Or if we've started out with a hash-based route, but we're currently
	      // in a browser where it could be `pushState`-based instead...
	      } else if (this._wantsPushState &&
	                 this._hasPushState && 
	                 atRoot &&
	                 loc.hash) {
	        this.fragment = this.getHash().replace(routeStripper, '');
	        window.history.replaceState({}, document.title,
	            loc.protocol + '//' + loc.host + this.options.root + this.fragment);
	      }

	      if (!this.options.silent) {
	        return this.loadUrl();
	      }
	    },

	    // Disable Parse.history, perhaps temporarily. Not useful in a real app,
	    // but possibly useful for unit testing Routers.
	    stop: function() {
	      Parse.$(window).unbind('popstate', this.checkUrl)
	                     .unbind('hashchange', this.checkUrl);
	      window.clearInterval(this._checkUrlInterval);
	      Parse.History.started = false;
	    },

	    // Add a route to be tested when the fragment changes. Routes added later
	    // may override previous routes.
	    route: function(route, callback) {
	      this.handlers.unshift({route: route, callback: callback});
	    },

	    // Checks the current URL to see if it has changed, and if it has,
	    // calls `loadUrl`, normalizing across the hidden iframe.
	    checkUrl: function(e) {
	      var current = this.getFragment();
	      if (current === this.fragment && this.iframe) {
	        current = this.getFragment(this.getHash(this.iframe));
	      }
	      if (current === this.fragment) {
	        return false;
	      }
	      if (this.iframe) {
	        this.navigate(current);
	      }
	      if (!this.loadUrl()) {
	        this.loadUrl(this.getHash());
	      }
	    },

	    // Attempt to load the current URL fragment. If a route succeeds with a
	    // match, returns `true`. If no defined routes matches the fragment,
	    // returns `false`.
	    loadUrl: function(fragmentOverride) {
	      var fragment = this.fragment = this.getFragment(fragmentOverride);
	      var matched = _.any(this.handlers, function(handler) {
	        if (handler.route.test(fragment)) {
	          handler.callback(fragment);
	          return true;
	        }
	      });
	      return matched;
	    },

	    // Save a fragment into the hash history, or replace the URL state if the
	    // 'replace' option is passed. You are responsible for properly URL-encoding
	    // the fragment in advance.
	    //
	    // The options object can contain `trigger: true` if you wish to have the
	    // route callback be fired (not usually desirable), or `replace: true`, if
	    // you wish to modify the current URL without adding an entry to the
	    // history.
	    navigate: function(fragment, options) {
	      if (!Parse.History.started) {
	        return false;
	      }
	      if (!options || options === true) {
	        options = {trigger: options};
	      }
	      var frag = (fragment || '').replace(routeStripper, '');
	      if (this.fragment === frag) {
	        return;
	      }

	      // If pushState is available, we use it to set the fragment as a real URL.
	      if (this._hasPushState) {
	        if (frag.indexOf(this.options.root) !== 0) {
	          frag = this.options.root + frag;
	        }
	        this.fragment = frag;
	        var replaceOrPush = options.replace ? 'replaceState' : 'pushState';
	        window.history[replaceOrPush]({}, document.title, frag);

	      // If hash changes haven't been explicitly disabled, update the hash
	      // fragment to store history.
	      } else if (this._wantsHashChange) {
	        this.fragment = frag;
	        this._updateHash(window.location, frag, options.replace);
	        if (this.iframe &&
	            (frag !== this.getFragment(this.getHash(this.iframe)))) {
	          // Opening and closing the iframe tricks IE7 and earlier
	          // to push a history entry on hash-tag change.
	          // When replace is true, we don't want this.
	          if (!options.replace) {
	            this.iframe.document.open().close();
	          }
	          this._updateHash(this.iframe.location, frag, options.replace);
	        }

	      // If you've told us that you explicitly don't want fallback hashchange-
	      // based history, then `navigate` becomes a page refresh.
	      } else {
	        window.location.assign(this.options.root + fragment);
	      }
	      if (options.trigger) {
	        this.loadUrl(fragment);
	      }
	    },

	    // Update the hash location, either replacing the current entry, or adding
	    // a new one to the browser history.
	    _updateHash: function(location, fragment, replace) {
	      if (replace) {
	        var s = location.toString().replace(/(javascript:|#).*$/, '');
	        location.replace(s + '#' + fragment);
	      } else {
	        location.hash = fragment;
	      }
	    }
	  });
	}(this));

	/*global _: false*/
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * Routers map faux-URLs to actions, and fire events when routes are
	   * matched. Creating a new one sets its `routes` hash, if not set statically.
	   * @class
	   *
	   * <p>A fork of Backbone.Router, provided for your convenience.
	   * For more information, see the
	   * <a href="http://documentcloud.github.com/backbone/#Router">Backbone
	   * documentation</a>.</p>
	   * <p><strong><em>Available in the client SDK only.</em></strong></p>
	   */
	  Parse.Router = function(options) {
	    options = options || {};
	    if (options.routes) {
	      this.routes = options.routes;
	    }
	    this._bindRoutes();
	    this.initialize.apply(this, arguments);
	  };

	  // Cached regular expressions for matching named param parts and splatted
	  // parts of route strings.
	  var namedParam    = /:\w+/g;
	  var splatParam    = /\*\w+/g;
	  var escapeRegExp  = /[\-\[\]{}()+?.,\\\^\$\|#\s]/g;

	  // Set up all inheritable **Parse.Router** properties and methods.
	  _.extend(Parse.Router.prototype, Parse.Events,
	           /** @lends Parse.Router.prototype */ {

	    /**
	     * Initialize is an empty function by default. Override it with your own
	     * initialization logic.
	     */
	    initialize: function(){},

	    /**
	     * Manually bind a single named route to a callback. For example:
	     *
	     * <pre>this.route('search/:query/p:num', 'search', function(query, num) {
	     *       ...
	     *     });</pre>
	     */
	    route: function(route, name, callback) {
	      Parse.history = Parse.history || new Parse.History();
	      if (!_.isRegExp(route)) {
	        route = this._routeToRegExp(route);
	      } 
	      if (!callback) {
	        callback = this[name];
	      }
	      Parse.history.route(route, _.bind(function(fragment) {
	        var args = this._extractParameters(route, fragment);
	        if (callback) {
	          callback.apply(this, args);
	        }
	        this.trigger.apply(this, ['route:' + name].concat(args));
	        Parse.history.trigger('route', this, name, args);
	      }, this));
	      return this;
	    },

	    /**
	     * Whenever you reach a point in your application that you'd
	     * like to save as a URL, call navigate in order to update the
	     * URL. If you wish to also call the route function, set the 
	     * trigger option to true. To update the URL without creating
	     * an entry in the browser's history, set the replace option
	     * to true.
	     */
	    navigate: function(fragment, options) {
	      Parse.history.navigate(fragment, options);
	    },

	    // Bind all defined routes to `Parse.history`. We have to reverse the
	    // order of the routes here to support behavior where the most general
	    // routes can be defined at the bottom of the route map.
	    _bindRoutes: function() {
	      if (!this.routes) { 
	        return;
	      }
	      var routes = [];
	      for (var route in this.routes) {
	        if (this.routes.hasOwnProperty(route)) {
	          routes.unshift([route, this.routes[route]]);
	        }
	      }
	      for (var i = 0, l = routes.length; i < l; i++) {
	        this.route(routes[i][0], routes[i][1], this[routes[i][1]]);
	      }
	    },

	    // Convert a route string into a regular expression, suitable for matching
	    // against the current location hash.
	    _routeToRegExp: function(route) {
	      route = route.replace(escapeRegExp, '\\$&')
	                   .replace(namedParam, '([^\/]+)')
	                   .replace(splatParam, '(.*?)');
	      return new RegExp('^' + route + '$');
	    },

	    // Given a route, and a URL fragment that it matches, return the array of
	    // extracted parameters.
	    _extractParameters: function(route, fragment) {
	      return route.exec(fragment).slice(1);
	    }
	  });

	  /**
	   * @function
	   * @param {Object} instanceProps Instance properties for the router.
	   * @param {Object} classProps Class properies for the router.
	   * @return {Class} A new subclass of <code>Parse.Router</code>.
	   */
	  Parse.Router.extend = Parse._extend;
	}(this));
	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;
	  var _ = Parse._;

	  /**
	   * @namespace Contains functions for calling and declaring
	   * <a href="/docs/cloud_code_guide#functions">cloud functions</a>.
	   * <p><strong><em>
	   *   Some functions are only available from Cloud Code.
	   * </em></strong></p>
	   */
	  Parse.Cloud = Parse.Cloud || {};

	  _.extend(Parse.Cloud, /** @lends Parse.Cloud */ {
	    /**
	     * Makes a call to a cloud function.
	     * @param {String} name The function name.
	     * @param {Object} data The parameters to send to the cloud function.
	     * @param {Object} options A Backbone-style options object
	     * options.success, if set, should be a function to handle a successful
	     * call to a cloud function.  options.error should be a function that
	     * handles an error running the cloud function.  Both functions are
	     * optional.  Both functions take a single argument.
	     * @return {Parse.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    run: function(name, data, options) {
	      options = options || {};

	      var request = Parse._request({
	        route: "functions",
	        className: name,
	        method: 'POST',
	        useMasterKey: options.useMasterKey,
	        data: Parse._encode(data, null, true)
	      });

	      return request.then(function(resp) {
	        return Parse._decode(null, resp).result;
	      })._thenRunCallbacks(options);
	    }
	  });
	}(this));

	(function(root) {
	  root.Parse = root.Parse || {};
	  var Parse = root.Parse;

	  Parse.Installation = Parse.Object.extend("_Installation");

	  /**
	   * Contains functions to deal with Push in Parse
	   * @name Parse.Push
	   * @namespace
	   */
	  Parse.Push = Parse.Push || {};

	  /**
	   * Sends a push notification.
	   * @param {Object} data -  The data of the push notification.  Valid fields
	   * are:
	   *   <ol>
	   *     <li>channels - An Array of channels to push to.</li>
	   *     <li>push_time - A Date object for when to send the push.</li>
	   *     <li>expiration_time -  A Date object for when to expire
	   *         the push.</li>
	   *     <li>expiration_interval - The seconds from now to expire the push.</li>
	   *     <li>where - A Parse.Query over Parse.Installation that is used to match
	   *         a set of installations to push to.</li>
	   *     <li>data - The data to send as part of the push</li>
	   *   <ol>
	   * @param {Object} options An object that has an optional success function,
	   * that takes no arguments and will be called on a successful push, and
	   * an error function that takes a Parse.Error and will be called if the push
	   * failed.
	   * @return {Parse.Promise} A promise that is fulfilled when the push request
	   *     completes.
	   */
	  Parse.Push.send = function(data, options) {
	    options = options || {};

	    if (data.where) {
	      data.where = data.where.toJSON().where;
	    }

	    if (data.push_time) {
	      data.push_time = data.push_time.toJSON();
	    }

	    if (data.expiration_time) {
	      data.expiration_time = data.expiration_time.toJSON();
	    }

	    if (data.expiration_time && data.expiration_interval) {
	      throw "Both expiration_time and expiration_interval can't be set";
	    }

	    var request = Parse._request({
	      route: 'push',
	      method: 'POST',
	      data: data,
	      useMasterKey: options.useMasterKey
	    });
	    return request._thenRunCallbacks(options);
	  };
	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  AppBar: __webpack_require__(40),
	  AppCanvas: __webpack_require__(41),
	  Checkbox: __webpack_require__(42),
	  DatePicker: __webpack_require__(43),
	  Dialog: __webpack_require__(44),
	  DialogWindow: __webpack_require__(45),
	  DropDownIcon: __webpack_require__(46),
	  DropDownMenu: __webpack_require__(47),
	  EnhancedButton: __webpack_require__(48),
	  FlatButton: __webpack_require__(49),
	  FloatingActionButton: __webpack_require__(50),
	  FontIcon: __webpack_require__(51),
	  IconButton: __webpack_require__(52),
	  Input: __webpack_require__(53),
	  LeftNav: __webpack_require__(54),
	  Menu: __webpack_require__(55),
	  MenuItem: __webpack_require__(56),
	  Mixins: {
	    Classable: __webpack_require__(57),
	    ClickAwayable: __webpack_require__(58),
	    WindowListenable: __webpack_require__(59)
	  },
	  Paper: __webpack_require__(60),
	  RadioButton: __webpack_require__(61),
	  RadioButtonGroup: __webpack_require__(62),
	  RaisedButton: __webpack_require__(63),
	  Slider: __webpack_require__(64),
	  SvgIcon: __webpack_require__(65),
	  Icons: {
	    NavigationMenu: __webpack_require__(66),
	    NavigationChevronLeft: __webpack_require__(67),
	    NavigationChevronRight: __webpack_require__(68)
	  },
	  Tab: __webpack_require__(69),
	  Tabs: __webpack_require__(70),
	  Toggle: __webpack_require__(71),
	  Snackbar: __webpack_require__(72),
	  TextField: __webpack_require__(73),
	  Toolbar: __webpack_require__(74),
	  ToolbarGroup: __webpack_require__(75),
	  Tooltip: __webpack_require__(76),
	  Utils: {
	    CssEvent: __webpack_require__(77),
	    Dom: __webpack_require__(78),
	    Events: __webpack_require__(79),
	    KeyCode: __webpack_require__(80),
	    KeyLine: __webpack_require__(81)
	  }
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(33);


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  Particles: (function () {
	      "use strict";

	      // particles objects collection
	      var particles = [];
	      var sprites = [];

	      var count = 500;
	      var clipImg;
	      var particleSprites;
	      var particleMovement;
	      var particleDynamics

	      var defaults = {
	          particleMovement: {
	              // particle movement parameters:
	              // we'll advance each particle vertically at least by this amount (think gravity and resistance)
	              "minVerticalVelocity": -4,
	              // we'll advance each particle vertically at most by this amount (think gravity and resistance)
	              "maxVerticalVelocity": -2,
	              // we'll shift each particle horizontally at least by this amound (think wind and resistance)
	              "minHorizontalVelocity": -3,
	              // we'll shift each particle horizontally at least by this amound (think wind and resistance)
	              "maxHorizontalVelocity": 3,
	              // each particle sprite will be scaled down maxScale / this (this < maxScale) at max
	              "minScale": 0.5,
	              // each particle sprite will be scaled down this / minScale (this > minScale) at max
	              "maxScale": 1.25,
	              // each particle also "bobs" on horizontal axis (think volumetric resistance) by this amount at least
	              "minHorizontalDelta": 2,
	              // each particle also "bobs" on horizontal axis (think volumetric resistance) by this amount at most
	              "maxHorizontalDelta": 3,
	              // each particle is at least this opaque
	              "minOpacity": 0.5,
	              // each particle is at least this opaque
	              "maxOpacity": 1,
	              // change opacity by at max 1/maxOpacityIncrement
	              "maxOpacityIncrement": 50,
	              // global speed
	              "speedFactor": 0.5
	          },
	          particleDynamics: {
	              // we increment particles with this rate
	              "countIncrement": 0.1,
	              // we can remove aggressively (to quicker free system resources), 
	              // basically we remove at countIncrement*removeFactor rate
	              "removeFactor": 2
	          }
	      };

	      // canvas bounds used for particles animation
	      var bounds = { width: window.innerWidth, height: window.innerHeight };
	      
	      function extend (target, source) {
	          if(!source) source={};
	          var a = Object.create(target);
	          Object.keys(source).map(function (prop) {
	              prop in a && (a[prop] = source[prop]);
	          });
	          return a;
	      };

	      function init(context, config) {
	          if(config.count) count = config.count;
	          if(config.clip){
	            context.beginPath();
	            context.moveTo.apply(context,config.clip[0]);
	            for (var i = 1; i < config.clip.length; i++) {
	              context.lineTo.apply(context,config.clip[i]);
	            };
	            context.clip();
	          } 
	          particleSprites = config.particleSprites;
	          particleMovement = extend(defaults.particleMovement, config.particleMovement);
	          particleDynamics = extend(defaults.particleMovement, config.particleDynamics);
	      }
	      
	      // create particles adding if required (or regenerate from scratch)
	      function generate(add) {
	          // initialize sprite
	          var image = new Image();
	          image.onload = function () {
	              for (var ii = 0; ii < particleSprites.count; ii++) {
	                  var sprite = document.createElement("canvas");
	                  sprite.width = particleSprites.individualWidth;
	                  sprite.height = particleSprites.individualHeight;
	                  var context = sprite.getContext("2d");
	                  context.drawImage(
	                  // source image
	                      image,
	                  // source x
	                      ii * sprite.width,
	                  // source y
	                      0,
	                  // source width
	                      sprite.width,
	                  // source height
	                      sprite.height,
	                  // target x
	                      0,
	                  //target y
	                      0,
	                  // target width
	                      sprite.width,
	                  // target height
	                      sprite.height);
	                  sprites.push(sprite);
	              }

	              if (!add) {
	                  particles = [];
	              }
	              for (var ii = 0; ii < count; ii++) {
	                  particles.push(generateSingleParticle());
	              }
	          }
	          image.src = particleSprites.url;
	      }

	      function generateSingleParticle() {
	          // particle generation
	          var scale = Math.random() * (particleMovement.maxScale - particleMovement.minScale) + particleMovement.minScale;
	          return {
	              // x position
	              x: Math.random() * bounds.width,
	              // y position
	              y: Math.random() * bounds.height,
	              // vertical velocity
	              vv: Math.random() *
	                  (particleMovement.maxVerticalVelocity - particleMovement.minVerticalVelocity) + particleMovement.minVerticalVelocity,
	              // horizontal velocity
	              hv: Math.random() * (particleMovement.maxHorizontalVelocity - particleMovement.minHorizontalVelocity) + particleMovement.minHorizontalVelocity,
	              // scaled sprite width
	              sw: scale * particleSprites.individualWidth,
	              // scaled sprite width
	              sh: scale * particleSprites.individualHeight,
	              // maximum horizontal delta
	              mhd: Math.random() * (particleMovement.maxHorizontalDelta - particleMovement.minHorizontalDelta) + particleMovement.minHorizontalDelta,
	              // horizontal delta
	              hd: 0,
	              // horizontal delta increment
	              hdi: Math.random() / (particleMovement.maxHorizontalVelocity * particleMovement.minHorizontalDelta),
	              // opacity
	              o: Math.random() * (particleMovement.maxOpacity - particleMovement.minOpacity) + particleMovement.minOpacity,
	              // opacity increment
	              oi: Math.random() / particleMovement.maxOpacityIncrement,
	              // sprite index
	              si: Math.ceil(Math.random() * (particleSprites.count - 1)),
	              // not landing flag
	              nl: false
	          }
	      }

	      // help particles move
	      function advanceParticles() {
	          for (var ii = 0; ii < particles.length; ii++) {
	              var p = particles[ii];
	              // we obey the gravity, 'cause it's the law
	              p.y += p.vv * particleMovement.speedFactor;
	              // while we're obeying the gravity, we do it with style
	              p.x += (p.hd + p.hv) * particleMovement.speedFactor;
	              // advance horizontal axis "bobbing"                
	              p.hd += p.hdi;
	              // inverse "bobbing" direction if we get to maximum delta limit
	              if (p.hd < -p.mhd || p.hd > p.mhd) {
	                  p.hdi = -p.hdi;
	              };

	              // increment opacity and check opacity value bounds
	              p.o += p.oi;
	              if (p.o > particleMovement.maxOpacity || p.o < particleMovement.minOpacity) { p.oi = -p.oi };
	              if (p.o > particleMovement.maxOpacity) p.o = particleMovement.maxOpacity;
	              if (p.o < particleMovement.minOpacity) p.o = particleMovement.minOpacity;
	              // return within dimensions bounds if we've crossed them
	              // and don't forget to reset the not-landing (sf.nl) flag
	              var resetNotLanding = false;
	              if (p.y > bounds.height + particleSprites.individualHeight / 2) {
	                  p.y = 0
	                  resetNotLanding = true;
	              };
	              if (p.y < -p.sh) {
	                  p.y = bounds.height
	                  resetNotLanding = true;
	              };
	              if (p.x > bounds.width + particleSprites.individualWidth / 2) {
	                  p.x = 0
	                  resetNotLanding = true;
	              };
	              if (p.x < -p.sw) {
	                  p.x = bounds.width
	                  resetNotLanding = true;
	              };
	              if (resetNotLanding) { p.nl = false; }
	          }
	      }

	      function renderFrame(context) {
	          // fall down one iteration            
	          advanceParticles();
	          // clear context and save it 
	          context.clearRect(0, 0, context.canvas.width, context.canvas.height);
	          for (var ii = 0; ii < particles.length; ii++) {
	              var p = particles[ii];
	              context.globalAlpha = p.o;
	              
	              context.drawImage(
	              // image
	                  sprites[p.si],
	              // source x
	                  0,
	              // source y
	                  0,
	              // source width
	                  particleSprites.individualWidth,
	              // source height
	                  particleSprites.individualWidth,
	              // target x
	                  p.x,
	              // target y
	                  p.y,
	              // target width
	                  p.sw,
	              // target height
	                  p.sh);

	          }
	      }

	      function updateBounds(width, height) {
	          if(!width) width = window.innerWidth;
	          if(!height) height = window.innerHeight;
	          bounds.width = width;
	          bounds.height = height;
	      }

	      function count() {
	          return particles.length;
	      }

	      // increase number of moving particles
	      function add(number) {
	          if (!number) { number = particles.length * particleDynamics.countIncrement; }
	          generate(number, true);
	      }

	      // remove some particles
	      // by default we remove more aggressively (than adding) to free resources faster
	      function remove(number) {
	          if (!number) { number = particles.length * particleDynamics.countIncrement * particleDynamics.removeFactor; }
	          if (particles.length - number > 0) {
	              particles = particles.slice(0, particles.length - number);
	          }
	      }

	      return {
	          "init": init,
	          "generate": generate,
	          "add": add,
	          "remove": remove,
	          "render": renderFrame,
	          "count": count,
	          "updateBounds": updateBounds
	      }

	  })(),

	  ParticleAnimation: (function () {

	      "use strict";

	      // collection of function to render single frame (particles falling, background gradient animation)
	      var frameRenderersCollection = [];
	      // each animation should be rendered on corresponding context. 
	      // If animation doesn't have context (non-visual parameter change every frame) - it should be last (several framerenderers can be last without contexts)
	      var renderContextesCollection = [];
	      // if animation is running
	      var isRunning = false;
	      // callback pointer for cancelling
	      var animationCallback;
	      // if browser doesn't support requestAnimationFrame - we use setInterval for 60Hz displays (16.7ms per frame)
	      var minInterval = 16.7;

	      // fps tracking
	      var avgTime = 0;
	      var trackFrames = 60;
	      var frameCounter = 0;

	      // register new renderer and corresponding context
	      function addFrameRenderer(frameRender, renderContext) {
	          if (frameRender && typeof (frameRender) === "function") {
	              frameRenderersCollection.push(frameRender);
	              renderContextesCollection.push(renderContext);
	          }
	      }

	      function removeFrameRenderers() {
	          frameRenderersCollection = [];
	          renderContextesCollection = [];
	      }

	      // detecting requestAnimationFrame feature
	      function getRequestAnimationFrame(code) {
	          if (window.requestAnimationFrame) {
	              return window.requestAnimationFrame(code);
	          } else if (window.msRequestAnimationFrame) {
	              return window.msRequestAnimationFrame(code);
	          } else if (window.webkitRequestAnimationFrame) {
	              return window.webkitRequestAnimationFrame(code);
	          } else if (window.mozRequestAnimationFrame) {
	              return window.mozRequestAnimationFrame(code);
	          } else if (window.oRequestAnimationFrame) {
	              return window.oRequestAnimationFrame(code);
	          } else {
	              return setTimeout(code, minInterval);
	          }
	      }

	      // iterate and render all registered renderers
	      function frameRenderCore() {

	          var startDate = new Date();

	          for (var ii = 0; ii < frameRenderersCollection.length; ii++) {
	              if (frameRenderersCollection[ii]) {
	                  frameRenderersCollection[ii](renderContextesCollection[ii]);
	              }
	          }

	          if (isRunning) {
	              animationCallback = getRequestAnimationFrame(frameRenderCore);
	          }

	          var endDate = new Date();
	          var duration = (endDate - startDate);
	          avgTime += duration;

	          // we count fps every trackFrames frame
	          frameCounter++;
	          if (frameCounter >= trackFrames) {
	              avgTime = avgTime / trackFrames;
	              var avgFps = Math.floor(1000 / avgTime);
	              if (avgFps > 60) avgFps = 60;

	              avgTime = 0;
	              frameCounter = 0;
	          }
	      }

	      // playback control: play, pause, toggle
	      function start() {
	          if (isRunning) return;
	          animationCallback = getRequestAnimationFrame(frameRenderCore);
	          isRunning = true;
	      }

	      function stop() {
	          if (!isRunning) return;
	          clearInterval(animationCallback);
	          isRunning = false;
	      }

	      function toggle() {
	          var playbackControl = (isRunning) ? stop : start;
	          playbackControl();
	      }

	      return {
	          "addFrameRenderer": addFrameRenderer,
	          "removeFrameRenderers": removeFrameRenderers,
	          "start": start,
	          "stop": stop,
	          "toggle": toggle,
	          "getRequestAnimationFrame": getRequestAnimationFrame
	      }
	  })()
	}

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			label: React.PropTypes.string,
			onChange: React.PropTypes.func,
		},
		getDefaultProps: function() {
			return {
				className: ''
			};
		},
		getInitialState: function() {
			return {
				value: this.props.value
			};
		},
		updateInputValue: function(event) {
			this.setState({
				value: event.target.value
			});
			this.props.onChange(event.target.value);
		},
		render: function() {
			// Set Classes
			var className = classnames(this.props.className, {
				'list-item': true
			});

			// Map Options
			var options = this.props.options.map(function(op) {
				return (
					React.createElement("option", {key: 'option-' + op.value, value: op.value}, 
						op.label
					)
				);
			}.bind(this));

			return (
				React.createElement("label", {className: className}, 
					React.createElement("div", {className: "item-inner"}, 
						React.createElement("div", {className: "field-label"}, this.props.label), 
						React.createElement("div", {className: "field-control"}, 
							React.createElement("select", {value: this.state.value, onChange: this.updateInputValue, className: "select-field"}, 
								options
							), 
							React.createElement("div", {className: "select-field-indicator"}, 
								React.createElement("div", {className: "select-field-indicator-arrow"})
							)
						)
					)
				)
			);
		}
	});


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    Tappable = __webpack_require__(30);

	var backgrounds = ["#dee2eb", "#efeff4" ];

	module.exports = React.createClass({displayName: "exports",
	  propTypes: {
	    styleNum: React.PropTypes.number.isRequired,
	    product: React.PropTypes.object.isRequired,
	    onBuyClick: React.PropTypes.func.isRequired
	  },

	  render:function() {
	    itemStyle={
	      width: '100%',
	      height: '200px',
	      padding: '10px',
	      backgroundColor: backgrounds[this.props.styleNum]
	    };

	    leftImageStyle = {
	      display: 'block',
	      float: 'left',
	      marginRight: '20px',
	    };
	    rightImageStyle = {
	      display: 'block',
	      float: 'left',
	      marginLeft: '10px',
	    };

	    leftImage = null;
	    rightImage = null;

	    if(this.props.styleNum === 0){
	      leftImage = React.createElement("img", {style: leftImageStyle, src: this.props.product.imageURL, width: "130"})
	    } else {
	      rightImage = React.createElement("img", {style: rightImageStyle, src: this.props.product.imageURL, width: "130"})
	    }

	    return(
	      React.createElement("div", {style: itemStyle}, 
	        leftImage, 
	        React.createElement("div", {className: "gift-item__description"}, 
	          React.createElement("div", {className: "red-text"}, this.props.product.name), 
	          React.createElement("div", {className: "blue-text"}, "R$ ", parseInt(this.props.product.value), ",00"), 
	          React.createElement(Tappable, {onTap: this.props.onBuyClick.bind(null, this.props.product), component: "div", className: "gift-item__buy-button"})
	        ), 
	        rightImage
	      )
	    );
	  },
	});


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);
	var ReactCanvas = __webpack_require__(31);

	var Group = ReactCanvas.Group;
	var Image = ReactCanvas.Image;
	var Text = ReactCanvas.Text;
	var FontFace = ReactCanvas.FontFace;
	var measureText = ReactCanvas.measureText;

	var CONTENT_INSET = 14;
	var TEXT_SCROLL_SPEED_MULTIPLIER = 0.6;
	var TEXT_ALPHA_SPEED_OUT_MULTIPLIER = 1.25;
	var TEXT_ALPHA_SPEED_IN_MULTIPLIER = 2.6;
	var IMAGE_LAYER_INDEX = 2;
	var TEXT_LAYER_INDEX = 1;

	var Page = React.createClass({displayName: "Page",

	  propTypes: {
	    width: React.PropTypes.number.isRequired,
	    height: React.PropTypes.number.isRequired,
	    article: React.PropTypes.object.isRequired,
	    scrollTop: React.PropTypes.number.isRequired
	  },

	  componentWillMount: function () {
	    // Pre-compute headline/excerpt text dimensions.
	    var article = this.props.article;
	    var maxWidth = this.props.width - 2 * CONTENT_INSET;
	    var titleStyle = this.getTitleStyle();
	    var excerptStyle = this.getExcerptStyle();
	    this.titleMetrics = measureText(article.title, maxWidth, titleStyle.fontFace, titleStyle.fontSize, titleStyle.lineHeight);
	    this.excerptMetrics = measureText(article.excerpt, maxWidth, excerptStyle.fontFace, excerptStyle.fontSize, excerptStyle.lineHeight);
	  },

	  render: function () {
	    var groupStyle = this.getGroupStyle();
	    var imageStyle = this.getImageStyle();
	    var titleStyle = this.getTitleStyle();
	    var excerptStyle = this.getExcerptStyle();

	    // Layout title and excerpt below image.
	    titleStyle.height = this.titleMetrics.height;
	    excerptStyle.top = titleStyle.top + titleStyle.height + CONTENT_INSET;
	    excerptStyle.height = this.props.height - excerptStyle.top - CONTENT_INSET;

	    return (
	      React.createElement(Group, {style: groupStyle}, 
	        React.createElement(Image, {style: imageStyle, src: this.props.article.imageUrl, fadeIn: true, useBackingStore: true}), 
	        React.createElement(Group, {style: this.getTextGroupStyle(), useBackingStore: true}, 
	          React.createElement(Text, {style: titleStyle}, this.props.article.title), 
	          React.createElement(Text, {style: excerptStyle}, this.props.article.excerpt)
	        )
	      )
	    );
	  },

	  // Styles
	  // ======

	  getGroupStyle: function () {
	    return {
	      top: 0,
	      left: 0,
	      width: this.props.width,
	      height: this.props.height,
	    };
	  },

	  getImageHeight: function () {
	    return Math.round(this.props.height * 0.35);
	  },

	  getImageStyle: function () {
	    return {
	      top: 0,
	      left: 0,
	      width: this.props.width,
	      height: this.getImageHeight(),
	      backgroundColor: '#eee',
	      zIndex: IMAGE_LAYER_INDEX
	    };
	  },

	  getTitleStyle: function () {
	    return {
	      top: this.getImageHeight() + CONTENT_INSET,
	      left: CONTENT_INSET,
	      width: this.props.width - 2 * CONTENT_INSET,
	      fontSize: 14,
	      lineHeight: 14,
	      fontFace: FontFace('Avenir Next Condensed, Helvetica, sans-serif', null, {weight: 500})
	    };
	  },

	  getExcerptStyle: function () {
	    return {
	      left: CONTENT_INSET,
	      width: this.props.width - 2 * CONTENT_INSET,
	      fontFace: FontFace('Georgia, serif'),
	      fontSize: 11,
	      lineHeight: 19
	    };
	  },

	  getTextGroupStyle: function () {
	    var imageHeight = this.getImageHeight();
	    var translateY = 0;
	    var alphaMultiplier = (this.props.scrollTop <= 0) ? -TEXT_ALPHA_SPEED_OUT_MULTIPLIER : TEXT_ALPHA_SPEED_IN_MULTIPLIER;
	    var alpha = 1 - (this.props.scrollTop / this.props.height) * alphaMultiplier;
	    alpha = Math.min(Math.max(alpha, 0), 1);
	    translateY = -this.props.scrollTop * TEXT_SCROLL_SPEED_MULTIPLIER;

	    return {
	      width: this.props.width,
	      height: this.props.height - imageHeight,
	      top: imageHeight,
	      left: 0,
	      alpha: alpha,
	      translateY: translateY,
	      zIndex: TEXT_LAYER_INDEX
	    };
	  }

	});

	module.exports = Page;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function () {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	function replaceText(source, id, replacement) {
		var boundaries = ["/** >>" + id + " **/", "/** " + id + "<< **/"];
		var start = source.lastIndexOf(boundaries[0]);
		var wrappedReplacement = replacement
			? (boundaries[0] + replacement + boundaries[1])
			: "";
		if (source.lastIndexOf(boundaries[0]) >= 0) {
			var end = source.lastIndexOf(boundaries[1]) + boundaries[1].length;
			return source.slice(0, start) + wrappedReplacement + source.slice(end);
		} else {
			return source + wrappedReplacement;
		}
	}

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(styleElement.styleSheet.cssText, index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap && typeof btoa === "function") {
			try {
				css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(JSON.stringify(sourceMap)) + " */";
				css = "@import url(\"data:text/css;base64," + btoa(css) + "\")";
			} catch(e) {}
		}

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(29)
	var React = __webpack_require__(9)
	var UI = __webpack_require__(25)

	var DEFAULT_TRANSITION = 'none';
	var TRANSITION_KEYS = [
		'none',
		'fade',
		'fade-contract',
		'fade-expand',
		'show-from-left',
		'show-from-right',
		'show-from-top',
		'show-from-bottom',
		'reveal-from-left',
		'reveal-from-right',
		'reveal-from-top',
		'reveal-from-bottom'
	];

	/**
	 * Touchstone App
	 * ==============
	 *
	 * This function should be called with your app's config and views.
	 *
	 * It returns a Mixin which should be added to your App.
	 */

	function createApp(views) {
		return {

			getInitialState: function() {
				return {
					viewTransition: this.getViewTransition(DEFAULT_TRANSITION)
				};
			},

			componentWillMount: function() {
				this.views = {};
				_.each(views, function(view, key) {
					this.views[key] = React.createFactory(view);
				}, this);
			},

			childContextTypes: {
				currentView: React.PropTypes.string,
				app: React.PropTypes.object.isRequired
			},

			getChildContext: function() {
				return {
					currentView: this.state.currentView,
					app: this
				}
			},

			getView: function(key) {
				var view = views[key],
					props = _.extend({}, this.state[key + '_props']);

				if (!view) {
					return (
						React.createElement(UI.FlexLayout, {className: "view"}, 
							React.createElement(UI.FlexBlock, null, 
								React.createElement(UI.Feedback, {iconKey: "ion-alert-circled", iconType: "danger", text: 'Sorry, the view <strong>"' + this.state.currentView + '"</strong> is not available.', actionText: "Okay, take me home", actionFn: this.gotoDefaultView})
							)
						)
					);
				}

				if (this.getViewProps) {
					_.extend(props, this.getViewProps());
				}

				return React.createElement(view, _.extend(props, {
					key: key,
					app: this,
					viewClassName: this.state[key + '_class'] || 'view'
				}));

			},

			getCurrentView: function() {
				var viewsData = {};
				viewsData[this.state.currentView] = this.getView(this.state.currentView);
				var views = React.addons.createFragment(viewsData)
				return views;
			},

			getViewTransition: function(key) {
				if (!_.contains(TRANSITION_KEYS, key)) {
					console.log('Invalid View Transition: ' + key);
					key = 'none';
				}
				var transition = {
					key: key,
					name: 'view-transition-' + key,
					in: false,
					out: false
				};
				if (_.contains(['reveal-from-top', 'reveal-from-bottom'], key)) {
					transition.out = true;
				} else if (_.contains(['show-from-left', 'show-from-right', 'reveal-from-left', 'reveal-from-right'], key)) {
					transition.in = true;
					transition.out = true;
				} else if (_.contains(['fade', 'fade-contract', 'fade-expand', 'show-from-top', 'show-from-bottom'], key)) {
					transition.in = true;
					transition.out = true;
				}
				return transition;
			},

			showView: function(key, transition, props, state) {
				if (_.isObject(transition)) {
					props = transition;
					transition = DEFAULT_TRANSITION;
				}
				if (!_.isString(transition)) {
					transition = DEFAULT_TRANSITION;
				}

				transition = this.getViewTransition(transition);

				if (!props) props = {};
				console.log('Showing view |' + key + '| with transition |' + transition.key + '| and options ' + JSON.stringify(props));

				var previous = this.state.currentView;
				var newState = {
					currentView: key,
					previousView: previous,
					viewTransition: transition
				};
				newState[key + '_class'] = 'view';
				newState[key + '_props'] = props;
				if (state) {
					_.extend(newState, state);
				}
				this.setState(newState);
			},

			goto: function() {
				var args = arguments;
				return function() {
					this.showView.apply(this, args);
				}.bind(this);
			}

		}
	}

	module.exports = createApp;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9);

	/**
	 * Touchstone Navigation Mixin
	 * ===========================
	 */

	module.exports = {
		
		contextTypes: {
			currentView: React.PropTypes.string,
			app: React.PropTypes.object.isRequired
		},
		
		showView: function() {
			this.context.app.showView.apply(this.context.app, arguments);
		},
		
		showViewFn: function() {
			var args = arguments;
			return function() {
				this.context.app.showView.apply(this.context.app, args);
			}.bind(this);
		}
		
	};


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {

		// ALERT
		// Options: (message, [title], [buttonName])
		showAlertDialog: function(options, alertCallback) {
			setTimeout(function() {
				if (navigator.notification && navigator.notification.alert) {
					navigator.notification.alert(
						options.message,
						alertCallback,
						options.title || 'Alert',
						options.buttonLabel || 'OK'
					);
				} else {
					var msg = options.title ? options.title + '\n\n' : '';
						msg += options.message;
					alert(msg);
					setTimeout(alertCallback, 0);
				}
			}, 1);
		},

		// CONFIRM
		// Options: (message, [title], [buttonLabels])
		// Callback: invoke with index of button pressed (1, 2, or 3) or when the dialog is dismissed without a button press (0)
		showConfirmDialog: function(options, done) {
			function confirmCallback(buttonIndex) {
				return done(buttonIndex === 1)
			}

			setTimeout(function() {
				if (navigator.notification && navigator.notification.confirm) {
					navigator.notification.confirm(
						options.message,
						confirmCallback,
						options.title || 'Confirm',
						options.buttonLabels || ['OK', 'Cancel']
					);
				} else {
					var msg = options.title ? options.title + '\n\n' : '';
						msg += options.message;
					var result = confirm(msg) ? 1 : 0;
					setTimeout(confirmCallback.bind(undefined, result), 0);
				}
			}, 1);
		}

	}


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		Tappable = __webpack_require__(30),
		Navigation = __webpack_require__(22);

	/**
	 * Touchstone Link Component
	 * =========================
	 */

	module.exports = React.createClass({
		
		displayName: 'Link',

		mixins: [Navigation],

		propTypes: {
			to: React.PropTypes.string.isRequired,
			params: React.PropTypes.object,
			viewTransition: React.PropTypes.string,
			component: React.PropTypes.any,
			className: React.PropTypes.string
		},

		getDefaultProps: function() {
			return {
				viewTransition: 'none',
				component: 'span'
			};
		},

		action: function() {
			var params = this.props.params;

			if ('function' === typeof params) {
				params = params.call(this);
			}

			this.showView(this.props.to, this.props.viewTransition, params);
		},

		render: function() {
			return (
				React.createElement(Tappable, {onTap: this.action, className: this.props.className, component: this.props.component}, 
					this.props.children
				)
			);
		}
		
	});


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		Keypad: __webpack_require__(83),
		Passcode: __webpack_require__(84),
		LoadingButton: __webpack_require__(85),

		Feedback: __webpack_require__(86),
		Toggle: __webpack_require__(87),
		Modal: __webpack_require__(88),

		ActionButtons: __webpack_require__(89),
		ActionButton: __webpack_require__(90),

		Headerbar: __webpack_require__(91),
		HeaderbarButton: __webpack_require__(92),

		Footerbar: __webpack_require__(93),
		FooterbarButton: __webpack_require__(94),

		FlexLayout: __webpack_require__(95),
		FlexBlock: __webpack_require__(96),

		RadioList: __webpack_require__(97),
		Input: __webpack_require__(98),
		Textarea: __webpack_require__(99),

		LabelInput: __webpack_require__(100),
		LabelSelect: __webpack_require__(101),
		LabelTextarea: __webpack_require__(102)
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(103);
	var EventPluginUtils = __webpack_require__(104);

	var accumulateInto = __webpack_require__(105);
	var forEachAccumulated = __webpack_require__(106);
	var invariant = __webpack_require__(107);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ResponderEventPlugin
	 */

	"use strict";

	var EventConstants = __webpack_require__(108);
	var EventPluginUtils = __webpack_require__(104);
	var EventPropagators = __webpack_require__(109);
	var SyntheticEvent = __webpack_require__(110);

	var accumulateInto = __webpack_require__(105);
	var keyOf = __webpack_require__(111);

	var isStartish = EventPluginUtils.isStartish;
	var isMoveish = EventPluginUtils.isMoveish;
	var isEndish = EventPluginUtils.isEndish;
	var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
	var hasDispatches = EventPluginUtils.hasDispatches;
	var executeDispatchesInOrderStopAtTrue =
	  EventPluginUtils.executeDispatchesInOrderStopAtTrue;

	/**
	 * ID of element that should respond to touch/move types of interactions, as
	 * indicated explicitly by relevant callbacks.
	 */
	var responderID = null;
	var isPressing = false;

	var eventTypes = {
	  /**
	   * On a `touchStart`/`mouseDown`, is it desired that this element become the
	   * responder?
	   */
	  startShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onStartShouldSetResponder: null}),
	      captured: keyOf({onStartShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * On a `scroll`, is it desired that this element become the responder? This
	   * is usually not needed, but should be used to retroactively infer that a
	   * `touchStart` had occured during momentum scroll. During a momentum scroll,
	   * a touch start will be immediately followed by a scroll event if the view is
	   * currently scrolling.
	   */
	  scrollShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScrollShouldSetResponder: null}),
	      captured: keyOf({onScrollShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * On a `touchMove`/`mouseMove`, is it desired that this element become the
	   * responder?
	   */
	  moveShouldSetResponder: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMoveShouldSetResponder: null}),
	      captured: keyOf({onMoveShouldSetResponderCapture: null})
	    }
	  },

	  /**
	   * Direct responder events dispatched directly to responder. Do not bubble.
	   */
	  responderMove: {registrationName: keyOf({onResponderMove: null})},
	  responderRelease: {registrationName: keyOf({onResponderRelease: null})},
	  responderTerminationRequest: {
	    registrationName: keyOf({onResponderTerminationRequest: null})
	  },
	  responderGrant: {registrationName: keyOf({onResponderGrant: null})},
	  responderReject: {registrationName: keyOf({onResponderReject: null})},
	  responderTerminate: {registrationName: keyOf({onResponderTerminate: null})}
	};

	/**
	 * Performs negotiation between any existing/current responder, checks to see if
	 * any new entity is interested in becoming responder, performs that handshake
	 * and returns any events that must be emitted to notify the relevant parties.
	 *
	 * A note about event ordering in the `EventPluginHub`.
	 *
	 * Suppose plugins are injected in the following order:
	 *
	 * `[R, S, C]`
	 *
	 * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for
	 * `onClick` etc) and `R` is `ResponderEventPlugin`.
	 *
	 * "Deferred-Dispatched Events":
	 *
	 * - The current event plugin system will traverse the list of injected plugins,
	 *   in order, and extract events by collecting the plugin's return value of
	 *   `extractEvents()`.
	 * - These events that are returned from `extractEvents` are "deferred
	 *   dispatched events".
	 * - When returned from `extractEvents`, deferred-dispatched events contain an
	 *   "accumulation" of deferred dispatches.
	 * - These deferred dispatches are accumulated/collected before they are
	 *   returned, but processed at a later time by the `EventPluginHub` (hence the
	 *   name deferred).
	 *
	 * In the process of returning their deferred-dispatched events, event plugins
	 * themselves can dispatch events on-demand without returning them from
	 * `extractEvents`. Plugins might want to do this, so that they can use event
	 * dispatching as a tool that helps them decide which events should be extracted
	 * in the first place.
	 *
	 * "On-Demand-Dispatched Events":
	 *
	 * - On-demand-dispatched events are not returned from `extractEvents`.
	 * - On-demand-dispatched events are dispatched during the process of returning
	 *   the deferred-dispatched events.
	 * - They should not have side effects.
	 * - They should be avoided, and/or eventually be replaced with another
	 *   abstraction that allows event plugins to perform multiple "rounds" of event
	 *   extraction.
	 *
	 * Therefore, the sequence of event dispatches becomes:
	 *
	 * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)
	 * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)
	 * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)
	 * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)
	 *
	 * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`
	 * on-demand dispatch returns `true` (and some other details are satisfied) the
	 * `onResponderGrant` deferred dispatched event is returned from
	 * `extractEvents`. The sequence of dispatch executions in this case
	 * will appear as follows:
	 *
	 * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)
	 * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)
	 * - `touchStart`              (`EventPluginHub` dispatches as usual)
	 * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {string} topLevelTargetID ID of deepest React rendered element.
	 * @param {object} nativeEvent Native browser event.
	 * @return {*} An accumulation of synthetic events.
	 */
	function setResponderAndExtractTransfer(
	    topLevelType,
	    topLevelTargetID,
	    nativeEvent) {
	  var shouldSetEventType =
	    isStartish(topLevelType) ? eventTypes.startShouldSetResponder :
	    isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder :
	    eventTypes.scrollShouldSetResponder;

	  var bubbleShouldSetFrom = responderID || topLevelTargetID;
	  var shouldSetEvent = SyntheticEvent.getPooled(
	    shouldSetEventType,
	    bubbleShouldSetFrom,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
	  var wantsResponderID = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
	  if (!shouldSetEvent.isPersistent()) {
	    shouldSetEvent.constructor.release(shouldSetEvent);
	  }

	  if (!wantsResponderID || wantsResponderID === responderID) {
	    return null;
	  }
	  var extracted;
	  var grantEvent = SyntheticEvent.getPooled(
	    eventTypes.responderGrant,
	    wantsResponderID,
	    nativeEvent
	  );

	  EventPropagators.accumulateDirectDispatches(grantEvent);
	  if (responderID) {
	    var terminationRequestEvent = SyntheticEvent.getPooled(
	      eventTypes.responderTerminationRequest,
	      responderID,
	      nativeEvent
	    );
	    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
	    var shouldSwitch = !hasDispatches(terminationRequestEvent) ||
	      executeDirectDispatch(terminationRequestEvent);
	    if (!terminationRequestEvent.isPersistent()) {
	      terminationRequestEvent.constructor.release(terminationRequestEvent);
	    }

	    if (shouldSwitch) {
	      var terminateType = eventTypes.responderTerminate;
	      var terminateEvent = SyntheticEvent.getPooled(
	        terminateType,
	        responderID,
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(terminateEvent);
	      extracted = accumulateInto(extracted, [grantEvent, terminateEvent]);
	      responderID = wantsResponderID;
	    } else {
	      var rejectEvent = SyntheticEvent.getPooled(
	        eventTypes.responderReject,
	        wantsResponderID,
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(rejectEvent);
	      extracted = accumulateInto(extracted, rejectEvent);
	    }
	  } else {
	    extracted = accumulateInto(extracted, grantEvent);
	    responderID = wantsResponderID;
	  }
	  return extracted;
	}

	/**
	 * A transfer is a negotiation between a currently set responder and the next
	 * element to claim responder status. Any start event could trigger a transfer
	 * of responderID. Any move event could trigger a transfer, so long as there is
	 * currently a responder set (in other words as long as the user is pressing
	 * down).
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @return {boolean} True if a transfer of responder could possibly occur.
	 */
	function canTriggerTransfer(topLevelType) {
	  return topLevelType === EventConstants.topLevelTypes.topScroll ||
	         isStartish(topLevelType) ||
	         (isPressing && isMoveish(topLevelType));
	}

	/**
	 * Event plugin for formalizing the negotiation between claiming locks on
	 * receiving touches.
	 */
	var ResponderEventPlugin = {

	  getResponderID: function() {
	    return responderID;
	  },

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var extracted;
	    // Must have missed an end event - reset the state here.
	    if (responderID && isStartish(topLevelType)) {
	      responderID = null;
	    }
	    if (isStartish(topLevelType)) {
	      isPressing = true;
	    } else if (isEndish(topLevelType)) {
	      isPressing = false;
	    }
	    if (canTriggerTransfer(topLevelType)) {
	      var transfer = setResponderAndExtractTransfer(
	        topLevelType,
	        topLevelTargetID,
	        nativeEvent
	      );
	      if (transfer) {
	        extracted = accumulateInto(extracted, transfer);
	      }
	    }
	    // Now that we know the responder is set correctly, we can dispatch
	    // responder type events (directly to the responder).
	    var type = isMoveish(topLevelType) ? eventTypes.responderMove :
	      isEndish(topLevelType) ? eventTypes.responderRelease :
	      isStartish(topLevelType) ? eventTypes.responderStart : null;
	    if (type) {
	      var gesture = SyntheticEvent.getPooled(
	        type,
	        responderID || '',
	        nativeEvent
	      );
	      EventPropagators.accumulateDirectDispatches(gesture);
	      extracted = accumulateInto(extracted, gesture);
	    }
	    if (type === eventTypes.responderRelease) {
	      responderID = null;
	    }
	    return extracted;
	  }

	};

	module.exports = ResponderEventPlugin;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TapEventPlugin
	 * @typechecks static-only
	 */

	"use strict";

	var EventConstants = __webpack_require__(108);
	var EventPluginUtils = __webpack_require__(104);
	var EventPropagators = __webpack_require__(109);
	var SyntheticUIEvent = __webpack_require__(112);
	var TouchEventUtils = __webpack_require__(113);
	var ViewportMetrics = __webpack_require__(114);

	var keyOf = __webpack_require__(111);
	var topLevelTypes = EventConstants.topLevelTypes;

	var isStartish = EventPluginUtils.isStartish;
	var isEndish = EventPluginUtils.isEndish;

	var isTouch = function(topLevelType) {
	  var touchTypes = [
	    topLevelTypes.topTouchCancel,
	    topLevelTypes.topTouchEnd,
	    topLevelTypes.topTouchStart,
	    topLevelTypes.topTouchMove
	  ];
	  return touchTypes.indexOf(topLevelType) >= 0;
	}

	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var ignoreMouseThreshold = 750;
	var startCoords = {x: null, y: null};
	var lastTouchEvent = null;

	var Axis = {
	  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
	  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
	};

	function getAxisCoordOfEvent(axis, nativeEvent) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return axis.page in nativeEvent ?
	    nativeEvent[axis.page] :
	    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
	}

	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(
	    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
	    0.5
	  );
	}

	var dependencies = [
	  topLevelTypes.topMouseDown,
	  topLevelTypes.topMouseMove,
	  topLevelTypes.topMouseUp
	];

	if (EventPluginUtils.useTouchEvents) {
	  dependencies.push(
	    topLevelTypes.topTouchEnd,
	    topLevelTypes.topTouchStart,
	    topLevelTypes.topTouchMove
	  );
	}

	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchTap: null}),
	      captured: keyOf({onTouchTapCapture: null})
	    },
	    dependencies: dependencies
	  }
	};

	var TapEventPlugin = {

	  tapMoveThreshold: tapMoveThreshold,

	  ignoreMouseThreshold: ignoreMouseThreshold,

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    if (isTouch(topLevelType)) {
	      lastTouchEvent = nativeEvent.timeStamp;
	    } else {
	      if (lastTouchEvent && (nativeEvent.timeStamp - lastTouchEvent) < ignoreMouseThreshold) {
	        return null;
	      }
	    }

	    if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	      return null;
	    }
	    var event = null;
	    var distance = getDistance(startCoords, nativeEvent);
	    if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	      event = SyntheticUIEvent.getPooled(
	        eventTypes.touchTap,
	        topLevelTargetID,
	        nativeEvent
	      );
	    }
	    if (isStartish(topLevelType)) {
	      startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	      startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	    } else if (isEndish(topLevelType)) {
	      startCoords.x = 0;
	      startCoords.y = 0;
	    }
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = TapEventPlugin;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);

	// Enable React Touch Events
	React.initializeTouchEvents(true);

	function getTouchProps(touch) {
		if (!touch) return {};
		return {
			pageX: touch.pageX,
			pageY: touch.pageY,
			clientX: touch.clientX,
			clientY: touch.clientY
		};
	}

	function extend(target, source) {
		if (!source || Object.prototype.toString.call(source) !== '[object Object]') return target;
		for (var key in source) {
			if (source.hasOwnProperty(key)) {
				target[key] = source[key];
			}
		}
		return target;
	}

	/**
	 * Tappable Component
	 * ==================
	 */

	module.exports = React.createClass({
		
		displayName: 'Tappable',
		
		propTypes: {
			
			component: React.PropTypes.any,              // component to create
			className: React.PropTypes.string,           // optional className
			classBase: React.PropTypes.string,           // base for generated classNames
			style: React.PropTypes.object,               // additional style properties for the component
			disabled: React.PropTypes.bool,              // only applies to buttons
			
			moveThreshold: React.PropTypes.number,       // pixels to move before cancelling tap
			pressDelay: React.PropTypes.number,          // ms to wait before detecting a press
			pressMoveThreshold: React.PropTypes.number,  // pixels to move before cancelling press
			preventDefault: React.PropTypes.bool,        // whether to preventDefault on all events
			stopPropagation: React.PropTypes.bool,       // whether to stopPropagation on all events
			
			onTap: React.PropTypes.func,                 // fires when a tap is detected
			onPress: React.PropTypes.func,               // fires when a press is detected
			onTouchStart: React.PropTypes.func,          // pass-through touch event
			onTouchMove: React.PropTypes.func,           // pass-through touch event
			onTouchEnd: React.PropTypes.func,            // pass-through touch event
			onMouseDown: React.PropTypes.func,           // pass-through mouse event
			onMouseUp: React.PropTypes.func,             // pass-through mouse event
			onMouseMove: React.PropTypes.func,           // pass-through mouse event
			onMouseOut: React.PropTypes.func             // pass-through mouse event
			
		},
		
		getDefaultProps: function() {
			return {
				component: 'span',
				classBase: 'Tappable',
				moveThreshold: 100,
				pressDelay: 1000,
				pressMoveThreshold: 5
			};
		},
		
		getInitialState: function() {
			return {
				isActive: false,
				touchActive: false
			};
		},
		
		componentWillUnmount: function() {
			this.cleanupScrollDetection();
			this.cancelPressDetection();
		},
		
		processEvent: function(event) {
			if (this.props.preventDefault) event.preventDefault();
			if (this.props.stopPropagation) event.stopPropagation();
		},
		
		onTouchStart: function(event) {
			if (this.props.onTouchStart && this.props.onTouchStart(event) === false) return;
			this.processEvent(event);
			window._blockMouseEvents = true;
			this._initialTouch = this._lastTouch = getTouchProps(event.touches[0]);
			this.initScrollDetection();
			this.initPressDetection(this.endTouch);
			this.setState({
				isActive: true
			});
		},
		
		initScrollDetection: function() {
			this._scrollParents = [];
			this._scrollPos = { top: 0, left: 0 };
			var node = this.getDOMNode();
			while (node) {
				if (node.scrollHeight > node.offsetHeight || node.scrollWidth > node.offsetWidth) {
					this._scrollParents.push(node);
					this._scrollPos.top += node.scrollTop;
					this._scrollPos.left += node.scrollLeft;
				}
				node = node.parentNode;
			}
		},
		
		calculateMovement: function(touch) {
			return {
				x: Math.abs(touch.clientX - this._initialTouch.clientX),
				y: Math.abs(touch.clientY - this._initialTouch.clientY)
			};
		},
		
		detectScroll: function() {
			var currentScrollPos = { top: 0, left: 0 };
			for (var i = 0; i < this._scrollParents.length; i++) {
				currentScrollPos.top += this._scrollParents[i].scrollTop;
				currentScrollPos.left += this._scrollParents[i].scrollLeft;
			}
			return !(currentScrollPos.top === this._scrollPos.top && currentScrollPos.left === this._scrollPos.left);
		},
		
		cleanupScrollDetection: function() {
			this._scrollParents = undefined;
			this._scrollPos = undefined;
		},
		
		initPressDetection: function(callback) {
			if (!this.props.onPress) return;
			this._pressTimeout = setTimeout(function() {
				this.props.onPress();
				callback();
			}.bind(this), this.props.pressDelay);
		},
		
		cancelPressDetection: function() {
			clearTimeout(this._pressTimeout);
		},
		
		onTouchMove: function(event) {
			if (!this._initialTouch) return;
			this.processEvent(event);
			if (this.detectScroll()) {
				return this.endTouch(event);
			}
			this.props.onTouchMove && this.props.onTouchMove(event);
			this._lastTouch = getTouchProps(event.touches[0]);
			var movement = this.calculateMovement(this._lastTouch);
			if (movement.x > this.props.pressMoveThreshold || movement.y > this.props.pressMoveThreshold) {
				this.cancelPressDetection();
			}
			if (movement.x > this.props.moveThreshold || movement.y > this.props.moveThreshold) {
				if (this.state.isActive) {
					this.setState({
						isActive: false
					});
				}
			} else {
				if (!this.state.isActive) {
					this.setState({
						isActive: true
					});
				}
			}
		},
		
		onTouchEnd: function(event) {
			if (!this._initialTouch) return;
			this.processEvent(event);
			var movement = this.calculateMovement(this._lastTouch);
			if (movement.x <= this.props.moveThreshold && movement.y <= this.props.moveThreshold) {
				this.props.onTap && this.props.onTap(event);
			}
			this.endTouch(event);
		},
		
		endTouch: function() {
			this.cancelPressDetection();
			this.props.onTouchEnd && this.props.onTouchEnd(event);
			this._initialTouch = null;
			this._lastTouch = null;
			this.setState({
				isActive: false
			});
		},
		
		onMouseDown: function(event) {
			if (window._blockMouseEvents) {
				window._blockMouseEvents = false;
				return;
			}
			if (this.props.onMouseDown && this.props.onMouseDown(event) === false) return;
			this.processEvent(event);
			this.initPressDetection(this.endMouseEvent);
			this._mouseDown = true;
			this.setState({
				isActive: true
			});
		},
		
		onMouseMove: function(event) {
			if (window._blockMouseEvents || !this._mouseDown) return;
			this.processEvent(event);
			this.props.onMouseMove && this.props.onMouseMove(event);
		},
		
		onMouseUp: function(event) {
			if (window._blockMouseEvents || !this._mouseDown) return;
			this.processEvent(event);
			this.props.onMouseUp && this.props.onMouseUp(event);
			this.props.onTap && this.props.onTap(event);
			this.endMouseEvent();
		},
		
		onMouseOut: function(event) {
			if (window._blockMouseEvents || !this._mouseDown) return;
			this.processEvent(event);
			this.props.onMouseOut && this.props.onMouseOut(event);
			this.endMouseEvent();
		},
		
		endMouseEvent: function() {
			this.cancelPressDetection();
			this._mouseDown = false;
			this.setState({
				isActive: false
			});
		},
		
		render: function() {
			
			var className = this.props.classBase + (this.state.isActive ? '-active' : '-inactive');
			if (this.props.className) {
				className += ' ' + this.props.className;
			}
			
			var style = {
				WebkitTapHighlightColor: 'rgba(0,0,0,0)',
				WebkitTouchCallout: 'none',
				WebkitUserSelect: 'none',
				KhtmlUserSelect: 'none',
				MozUserSelect: 'none',
				msUserSelect: 'none',
				userSelect: 'none',
				cursor: 'pointer'
			};
			
			extend(style, this.props.style);
			
			return React.createElement(this.props.component, {
				style: style,
				className: className,
				disabled: this.props.disabled,
				onTouchStart: this.onTouchStart,
				onTouchMove: this.onTouchMove,
				onTouchEnd: this.onTouchEnd,
				onMouseDown: this.onMouseDown,
				onMouseMove: this.onMouseMove,
				onMouseUp: this.onMouseUp,
				onMouseOut: this.onMouseOut
			}, this.props.children);
			
		}
		
	});


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ReactCanvas = {
	  Surface: __webpack_require__(181),

	  Layer: __webpack_require__(182),
	  Group: __webpack_require__(183),
	  Image: __webpack_require__(184),
	  Text: __webpack_require__(185),
	  ListView: __webpack_require__(186),

	  FontFace: __webpack_require__(187),
	  measureText: __webpack_require__(188)
	};

	module.exports = ReactCanvas;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(115);
	var React = __webpack_require__(33);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(116);
	var ReactCSSTransitionGroup = __webpack_require__(117);
	var ReactFragment = __webpack_require__(118);
	var ReactTransitionGroup = __webpack_require__(119);
	var ReactUpdates = __webpack_require__(120);

	var cx = __webpack_require__(121);
	var cloneWithProps = __webpack_require__(122);
	var update = __webpack_require__(123);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(124);
	  React.addons.TestUtils = __webpack_require__(125);
	}

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(104);
	var ReactChildren = __webpack_require__(126);
	var ReactComponent = __webpack_require__(127);
	var ReactClass = __webpack_require__(128);
	var ReactContext = __webpack_require__(129);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactElement = __webpack_require__(131);
	var ReactElementValidator = __webpack_require__(132);
	var ReactDOM = __webpack_require__(133);
	var ReactDOMTextComponent = __webpack_require__(134);
	var ReactDefaultInjection = __webpack_require__(135);
	var ReactInstanceHandles = __webpack_require__(136);
	var ReactMount = __webpack_require__(137);
	var ReactPerf = __webpack_require__(138);
	var ReactPropTypes = __webpack_require__(139);
	var ReactReconciler = __webpack_require__(140);
	var ReactServerRendering = __webpack_require__(141);

	var assign = __webpack_require__(142);
	var findDOMNode = __webpack_require__(143);
	var onlyChild = __webpack_require__(144);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(145);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'http://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'http://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.1';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var IconButton = __webpack_require__(52);
	var NavigationMenu = __webpack_require__(66);
	var Paper = __webpack_require__(60);

	var AppBar = React.createClass({displayName: "AppBar",

	  mixins: [Classable],

	  propTypes: {
	    onMenuIconButtonTouchTap: React.PropTypes.func,
	    showMenuIconButton: React.PropTypes.bool,
	    iconClassNameLeft: React.PropTypes.string,
	    iconElementLeft: React.PropTypes.element,
	    iconElementRight: React.PropTypes.element,
	    title : React.PropTypes.node,
	    zDepth: React.PropTypes.number,
	  },

	  getDefaultProps: function() {
	    return {
	      showMenuIconButton: true,
	      title: '',
	      zDepth: 1
	    }
	  },

	  componentDidMount: function() {
	    if (process.NODE_ENV !== 'production' && 
	       (this.props.iconElementLeft && this.props.iconClassNameLeft)) {
	        var warning = 'Properties iconClassNameLeft and iconElementLeft cannot be simultaneously ' +
	                      'defined. Please use one or the other.';
	        console.warn(warning);
	    }
	  },

	  render: function() {
	    var $__0=
	      
	      
	      this.props,onTouchTap=$__0.onTouchTap,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{onTouchTap:1});

	    var classes = this.getClasses('mui-app-bar'),
	      title, menuElementLeft, menuElementRight;

	    if (this.props.title) {
	      // If the title is a string, wrap in an h1 tag.
	      // If not, just use it as a node.
	      title = toString.call(this.props.title) === '[object String]' ?
	        React.createElement("h1", {className: "mui-app-bar-title"}, this.props.title) :
	        this.props.title;
	    }

	    if (this.props.showMenuIconButton) {
	      if (this.props.iconElementLeft) {
	        menuElementLeft = (
	          React.createElement("div", {className: "mui-app-bar-navigation-icon-button"}, 
	            this.props.iconElementLeft
	          )
	        );
	      } else {
	        var child = (this.props.iconClassNameLeft) ? '' : React.createElement(NavigationMenu, null);
	        menuElementLeft = (
	          React.createElement(IconButton, {
	            className: "mui-app-bar-navigation-icon-button", 
	            iconClassName: this.props.iconClassNameLeft, 
	            onTouchTap: this._onMenuIconButtonTouchTap}, 
	              child
	          )
	        );
	      }
	    }

	    menuElementRight = (this.props.children) ? this.props.children : 
	                       (this.props.iconElementRight) ? this.props.iconElementRight : '';

	    return (
	      React.createElement(Paper, {rounded: false, className: classes, zDepth: this.props.zDepth}, 
	        menuElementLeft, 
	        title, 
	        menuElementRight
	      )
	    );
	  },

	  _onMenuIconButtonTouchTap: function(e) {
	    if (this.props.onMenuIconButtonTouchTap) this.props.onMenuIconButtonTouchTap(e);
	  }

	});

	module.exports = AppBar;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	  Classable = __webpack_require__(57);

	var AppCanvas = React.createClass({displayName: "AppCanvas",

	  mixins: [Classable],

	  propTypes: {
	    predefinedLayout: React.PropTypes.number
	  },

	  render: function() {
	    var classes = this.getClasses({
	      'mui-app-canvas': true,
	      'mui-predefined-layout-1': this.props.predefinedLayout === 1
	    });

	    return (
	      React.createElement("div", {className: classes}, 
	        this.props.children
	      )
	    );
	  }

	});

	module.exports = AppCanvas;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var EnhancedSwitch = __webpack_require__(189);
	var Classable = __webpack_require__(57);
	var CheckboxOutline = __webpack_require__(190);
	var CheckboxChecked = __webpack_require__(191);

	var Checkbox = React.createClass({displayName: "Checkbox",

	  mixins: [Classable],

	  propTypes: {
	    onCheck: React.PropTypes.func,
	  },

	  render: function() {
	    var $__0=
	      
	      
	      this.props,onCheck=$__0.onCheck,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{onCheck:1});

	    var classes = this.getClasses("mui-checkbox");

	    var checkboxElement = (
	      React.createElement("div", null, 
	        React.createElement(CheckboxOutline, {className: "mui-checkbox-box"}), 
	        React.createElement(CheckboxChecked, {className: "mui-checkbox-check"})
	      )
	    );

	    var enhancedSwitchProps = {
	      ref: "enhancedSwitch",
	      inputType: "checkbox",
	      switchElement: checkboxElement,
	      className: classes,
	      iconClassName: "mui-checkbox-icon",
	      onSwitch: this._handleCheck,
	      labelPosition: (this.props.labelPosition) ? this.props.labelPosition : "right"
	    };

	    return (
	      React.createElement(EnhancedSwitch, React.__spread({},  
	        other, 
	        enhancedSwitchProps))
	    );
	  },

	  isChecked: function() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setChecked: function(newCheckedValue) {
	    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	  },

	  _handleCheck: function(e, isInputChecked) {
	    if (this.props.onCheck) this.props.onCheck(e, isInputChecked);
	  }
	});

	module.exports = Checkbox;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var WindowListenable = __webpack_require__(59);
	var DateTime = __webpack_require__(192);
	var KeyCode = __webpack_require__(80);
	var DatePickerDialog = __webpack_require__(193);
	var TextField = __webpack_require__(73);

	var DatePicker = React.createClass({displayName: "DatePicker",

	  mixins: [Classable, WindowListenable],

	  propTypes: {
	    defaultDate: React.PropTypes.object,
	    formatDate: React.PropTypes.func,
	    mode: React.PropTypes.oneOf(['portrait', 'landscape', 'inline']),
	    onFocus: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	  },

	  windowListeners: {
	    'keyup': '_handleWindowKeyUp'
	  },

	  getDefaultProps: function() {
	    return {
	      formatDate: DateTime.format
	    };
	  },

	  getInitialState: function() {
	    return {
	      date: this.props.defaultDate,
	      dialogDate: new Date()
	    };
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      
	      
	      
	      this.props,formatDate=$__0.formatDate,mode=$__0.mode,onFocus=$__0.onFocus,onTouchTap=$__0.onTouchTap,onShow=$__0.onShow,onDismiss=$__0.onDismiss,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{formatDate:1,mode:1,onFocus:1,onTouchTap:1,onShow:1,onDismiss:1});
	    var classes = this.getClasses('mui-date-picker', {
	      'mui-is-landscape': this.props.mode === 'landscape',
	      'mui-is-inline': this.props.mode === 'inline'
	    });
	    var defaultInputValue;

	    if (this.props.defaultDate) {
	      defaultInputValue = this.props.formatDate(this.props.defaultDate);
	    }

	    return (
	      React.createElement("div", {className: classes}, 
	        React.createElement(TextField, React.__spread({}, 
	          other, 
	          {ref: "input", 
	          defaultValue: defaultInputValue, 
	          onFocus: this._handleInputFocus, 
	          onTouchTap: this._handleInputTouchTap})), 
	        React.createElement(DatePickerDialog, {
	          ref: "dialogWindow", 
	          initialDate: this.state.dialogDate, 
	          onAccept: this._handleDialogAccept, 
	          onShow: onShow, 
	          onDismiss: onDismiss})
	      )

	    );
	  },

	  getDate: function() {
	    return this.state.date;
	  },

	  setDate: function(d) {
	    this.setState({
	      date: d
	    });
	    this.refs.input.setValue(this.props.formatDate(d));
	  },

	  _handleDialogAccept: function(d) {
	    this.setDate(d);
	    if (this.props.onChange) this.props.onChange(null, d);
	  },

	  _handleInputFocus: function(e) {
	    e.target.blur();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputTouchTap: function(e) {
	    this.setState({
	      dialogDate: this.getDate()
	    });

	    this.refs.dialogWindow.show();
	    if (this.props.onTouchTap) this.props.onTouchTap(e);
	  },

	  _handleWindowKeyUp: function(e) {
	    //TO DO: open the dialog if input has focus
	  }

	});

	module.exports = DatePicker;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var DialogWindow = __webpack_require__(45);

	var Dialog = React.createClass({displayName: "Dialog",

	  mixins: [Classable],

	  propTypes: {
	    title: React.PropTypes.node
	  },

	  render: function() {
	    var $__0=
	      
	      
	      this.props,className=$__0.className,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1});
	    var classes = this.getClasses('mui-dialog');
	    var title;

	    if (this.props.title) {
	      // If the title is a string, wrap in an h3 tag.
	      // If not, just use it as a node.
	      title = toString.call(this.props.title) === '[object String]' ?
	        React.createElement("h3", {className: "mui-dialog-title"}, this.props.title) :
	        this.props.title;
	    }

	    return (
	      React.createElement(DialogWindow, React.__spread({}, 
	        other, 
	        {ref: "dialogWindow", 
	        className: classes}), 

	        title, 
	        React.createElement("div", {ref: "dialogContent", className: "mui-dialog-content"}, 
	          this.props.children
	        )

	      )
	    );
	  },

	  dismiss: function() {
	    this.refs.dialogWindow.dismiss();
	  },

	  show: function() {
	    this.refs.dialogWindow.show();
	  }

	});

	module.exports = Dialog;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var WindowListenable = __webpack_require__(59);
	var CssEvent = __webpack_require__(77);
	var KeyCode = __webpack_require__(80);
	var Classable = __webpack_require__(57);
	var FlatButton = __webpack_require__(49);
	var Overlay = __webpack_require__(194);
	var Paper = __webpack_require__(60);

	var DialogWindow = React.createClass({displayName: "DialogWindow",

	  mixins: [Classable, WindowListenable],

	  propTypes: {
	    actions: React.PropTypes.array,
	    contentClassName: React.PropTypes.string,
	    openImmediately: React.PropTypes.bool,
	    onClickAway: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    repositionOnUpdate: React.PropTypes.bool
	  },

	  windowListeners: {
	    'keyup': '_handleWindowKeyUp'
	  },

	  getDefaultProps: function() {
	    return {
	      actions: [],
	      repositionOnUpdate: true
	    };
	  },

	  getInitialState: function() {
	    return {
	      open: this.props.openImmediately || false
	    };
	  },

	  componentDidMount: function() {
	    this._positionDialog();
	    if (this.props.openImmediately) {
	      this.refs.dialogOverlay.preventScrolling();
	      this._onShow();
	    }
	  },

	  componentDidUpdate: function (prevProps, prevState) {
	    this._positionDialog();
	  },

	  render: function() {
	    var classes = this.getClasses('mui-dialog-window', { 
	      'mui-is-shown': this.state.open
	    });
	    var contentClasses = 'mui-dialog-window-contents';
	    var actions = this._getActionsContainer(this.props.actions);

	    if (this.props.contentClassName) {
	      contentClasses += ' ' + this.props.contentClassName;
	    }

	    return (
	      React.createElement("div", {className: classes}, 
	        React.createElement(Paper, {ref: "dialogWindow", className: contentClasses, zDepth: 4}, 
	          this.props.children, 
	          actions
	        ), 
	        React.createElement(Overlay, {ref: "dialogOverlay", show: this.state.open, autoLockScrolling: false, onTouchTap: this._handleOverlayTouchTap})
	      )
	    );
	  },

	  isOpen: function() {
	    return this.state.open;
	  },

	  dismiss: function() {
	    CssEvent.onTransitionEnd(this.getDOMNode(), function() {
	      this.refs.dialogOverlay.allowScrolling();
	    }.bind(this));

	    this.setState({ open: false });
	    this._onDismiss();
	  },

	  show: function() {
	    this.refs.dialogOverlay.preventScrolling();

	    this.setState({ open: true });
	    this._onShow();
	  },

	  _addClassName: function(reactObject, className) {
	    var originalClassName = reactObject.props.className;

	    reactObject.props.className = originalClassName ?
	      originalClassName + ' ' + className : className;
	  },

	  _getAction: function(actionJSON, key) {
	    var onClickHandler = actionJSON.onClick ? actionJSON.onClick : this.dismiss;
	    return (
	      React.createElement(FlatButton, {
	        key: key, 
	        secondary: true, 
	        onClick: onClickHandler, 
	        label: actionJSON.text})
	    );
	  },

	  _getActionsContainer: function(actions) {
	    var actionContainer;
	    var actionObjects = [];

	    if (actions.length) {
	      for (var i = 0; i < actions.length; i++) {
	        currentAction = actions[i];

	        //if the current action isn't a react object, create one
	        if (!React.isValidElement(currentAction)) {
	          currentAction = this._getAction(currentAction, i);
	        }

	        this._addClassName(currentAction, 'mui-dialog-window-action');
	        actionObjects.push(currentAction);
	      };

	      actionContainer = (
	        React.createElement("div", {className: "mui-dialog-window-actions"}, 
	          actionObjects
	        )
	      );
	    }

	    return actionContainer;
	  },

	  _positionDialog: function() {
	    var container, dialogWindow, containerHeight, dialogWindowHeight;

	    if (this.state.open) {

	      container = this.getDOMNode(),
	      dialogWindow = this.refs.dialogWindow.getDOMNode(),
	      containerHeight = container.offsetHeight,

	      //Reset the height in case the window was resized.
	      dialogWindow.style.height = '';
	      dialogWindowHeight = dialogWindow.offsetHeight;

	      //Vertically center the dialog window, but make sure it doesn't
	      //transition to that position.
	      if (this.props.repositionOnUpdate || !container.style.paddingTop) {
	        container.style.paddingTop = 
	          ((containerHeight - dialogWindowHeight) / 2) - 64 + 'px';
	      }
	    }
	  },
	  
	  _onShow: function() {
	    if (this.props.onShow) this.props.onShow();
	  },
	  
	  _onDismiss: function() {
	    if (this.props.onDismiss) this.props.onDismiss();
	  },

	  _handleOverlayTouchTap: function() {
	    this.dismiss();
	    if (this.props.onClickAway) this.props.onClickAway();
	  },

	  _handleWindowKeyUp: function(e) {
	    if (e.keyCode == KeyCode.ESC) {
	      this.dismiss();
	    }
	  }

	});

	module.exports = DialogWindow;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var ClickAwayable = __webpack_require__(58);
	var KeyLine = __webpack_require__(81);
	var Paper = __webpack_require__(60);
	var FontIcon = __webpack_require__(51);
	var Menu = __webpack_require__(55);

	var DropDownIcon = React.createClass({displayName: "DropDownIcon",

	  mixins: [Classable, ClickAwayable],

	  propTypes: {
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    closeOnMenuItemClick: React.PropTypes.bool
	  },

	  getInitialState: function() {
	    return {
	      open: false
	    }
	  },
	  
	  getDefaultProps: function() {
	    return {
	      closeOnMenuItemClick: true
	    }
	  },

	  componentClickAway: function() {
	    this.setState({ open: false });
	  },

	  render: function() {
	    var classes = this.getClasses('mui-drop-down-icon', {
	      'mui-open': this.state.open
	    });

	    var icon;
	    if (this.props.iconClassName) icon = React.createElement(FontIcon, {className: this.props.iconClassName});
	   
	    return (
	      React.createElement("div", {className: classes}, 
	          React.createElement("div", {className: "mui-menu-control", onClick: this._onControlClick}, 
	              icon, 
	              this.props.children
	          ), 
	          React.createElement(Menu, {ref: "menuItems", menuItems: this.props.menuItems, hideable: true, visible: this.state.open, onItemClick: this._onMenuItemClick})
	        )
	    );
	  },

	  _onControlClick: function(e) {
	    this.setState({ open: !this.state.open });
	  },

	  _onMenuItemClick: function(e, key, payload) {
	    if (this.props.onChange) this.props.onChange(e, key, payload);
	    
	    if (this.props.closeOnMenuItemClick) {
	      this.setState({ open: false });
	    }
	  }

	});

	module.exports = DropDownIcon;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var ClickAwayable = __webpack_require__(58);
	var DropDownArrow = __webpack_require__(195);
	var KeyLine = __webpack_require__(81);
	var Paper = __webpack_require__(60);
	var Menu = __webpack_require__(55);

	var DropDownMenu = React.createClass({displayName: "DropDownMenu",

	  mixins: [Classable, ClickAwayable],

	  propTypes: {
	    autoWidth: React.PropTypes.bool,
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired
	  },

	  getDefaultProps: function() {
	    return {
	      autoWidth: true
	    };
	  },

	  getInitialState: function() {
	    return {
	      open: false,
	      selectedIndex: this.props.selectedIndex || 0
	    }
	  },

	  componentClickAway: function() {
	    this.setState({ open: false });
	  },

	  componentDidMount: function() {
	    if (this.props.autoWidth) this._setWidth();
	  },

	  componentWillReceiveProps: function(nextProps) {
	    if (nextProps.hasOwnProperty('selectedIndex')) {
	      this.setState({selectedIndex: nextProps.selectedIndex});
	    }
	  },

	  render: function() {
	    var classes = this.getClasses('mui-drop-down-menu', {
	      'mui-open': this.state.open
	    });

	    return (
	      React.createElement("div", {className: classes}, 
	        React.createElement("div", {className: "mui-menu-control", onClick: this._onControlClick}, 
	          React.createElement(Paper, {className: "mui-menu-control-bg", zDepth: 0}), 
	          React.createElement("div", {className: "mui-menu-label"}, 
	            this.props.menuItems[this.state.selectedIndex].text
	          ), 
	          React.createElement(DropDownArrow, {className: "mui-menu-drop-down-icon"}), 
	          React.createElement("div", {className: "mui-menu-control-underline"})
	        ), 
	        React.createElement(Menu, {
	          ref: "menuItems", 
	          autoWidth: this.props.autoWidth, 
	          selectedIndex: this.state.selectedIndex, 
	          menuItems: this.props.menuItems, 
	          hideable: true, 
	          visible: this.state.open, 
	          onItemClick: this._onMenuItemClick})
	      )
	    );
	  },

	  _setWidth: function() {
	    var el = this.getDOMNode(),
	      menuItemsDom = this.refs.menuItems.getDOMNode();

	    el.style.width = menuItemsDom.offsetWidth + 'px';
	  },

	  _onControlClick: function(e) {
	    this.setState({ open: !this.state.open });
	  },

	  _onMenuItemClick: function(e, key, payload) {
	    if (this.props.onChange && this.state.selectedIndex !== key) this.props.onChange(e, key, payload);
	    this.setState({
	      selectedIndex: key,
	      open: false
	    });
	  }

	});

	module.exports = DropDownMenu;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var KeyCode = __webpack_require__(80);
	var Classable = __webpack_require__(57);
	var WindowListenable = __webpack_require__(59);
	var FocusRipple = __webpack_require__(196);
	var TouchRipple = __webpack_require__(197);

	var EnhancedButton = React.createClass({displayName: "EnhancedButton",

	  mixins: [Classable, WindowListenable],

	  propTypes: {
	    centerRipple: React.PropTypes.bool,
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    disableFocusRipple: React.PropTypes.bool,
	    disableTouchRipple: React.PropTypes.bool,
	    linkButton: React.PropTypes.bool,
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onTouchTap: React.PropTypes.func
	  },

	  windowListeners: {
	    'keydown': '_handleWindowKeydown',
	    'keyup': '_handleWindowKeyup'
	  },

	  getInitialState: function() {
	    return {
	      isKeyboardFocused: false 
	    };
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      
	      
	      
	      
	         this.props,centerRipple=$__0.centerRipple,disabled=$__0.disabled,disableFocusRipple=$__0.disableFocusRipple,disableTouchRipple=$__0.disableTouchRipple,linkButton=$__0.linkButton,onBlur=$__0.onBlur,onFocus=$__0.onFocus,onTouchTap=$__0.onTouchTap,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{centerRipple:1,disabled:1,disableFocusRipple:1,disableTouchRipple:1,linkButton:1,onBlur:1,onFocus:1,onTouchTap:1});
	    var classes = this.getClasses('mui-enhanced-button', {
	      'mui-is-disabled': disabled,
	      'mui-is-keyboard-focused': this.state.isKeyboardFocused,
	      'mui-is-link-button': linkButton
	    });
	    var touchRipple = (
	      React.createElement(TouchRipple, {
	        ref: "touchRipple", 
	        key: "touchRipple", 
	        centerRipple: centerRipple}, 
	        this.props.children
	        )
	    );
	    var focusRipple = (
	      React.createElement(FocusRipple, {
	        key: "focusRipple", 
	        show: this.state.isKeyboardFocused})
	    );
	    var buttonProps = {
	      className: classes,
	      disabled: disabled,
	      onBlur: this._handleBlur,
	      onFocus: this._handleFocus,
	      onTouchTap: this._handleTouchTap
	    };
	    var buttonChildren = [
	      disabled || disableTouchRipple ? this.props.children : touchRipple,
	      disabled || disableFocusRipple ? null : focusRipple
	    ];

	    if (disabled && linkButton) {
	      return (
	        React.createElement("span", React.__spread({},  other, 
	          {className: classes, 
	          disabled: disabled}), 
	          this.props.children
	        )
	      );
	    }

	    return linkButton ? (
	      React.createElement("a", React.__spread({},  other,  buttonProps), 
	        buttonChildren
	      )
	    ) : (
	      React.createElement("button", React.__spread({},  other,  buttonProps), 
	        buttonChildren
	      )
	    );
	  },

	  isKeyboardFocused: function() {
	    return this.state.isKeyboardFocused;
	  },

	  _handleWindowKeydown: function(e) {
	    if (e.keyCode == KeyCode.TAB) this._tabPressed = true;
	    if (e.keyCode == KeyCode.ENTER && this.state.isKeyboardFocused) {
	      this._handleTouchTap(e);
	    }
	  },

	  _handleWindowKeyup: function(e) {
	    if (e.keyCode == KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleTouchTap(e);
	    }
	  },

	  _handleBlur: function(e) {
	    this.setState({
	      isKeyboardFocused: false
	    });

	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleFocus: function(e) {
	    //setTimeout is needed becuase the focus event fires first
	    //Wait so that we can capture if this was a keyboard focus
	    //or touch focus
	    setTimeout(function() {
	      if (this._tabPressed) {
	        this.setState({
	          isKeyboardFocused: true
	        });
	      }
	    }.bind(this), 150);
	    
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleTouchTap: function(e) {
	    this._tabPressed = false;
	    this.setState({
	      isKeyboardFocused: false
	    });
	    if (this.props.onTouchTap) this.props.onTouchTap(e);
	  }

	});

	module.exports = EnhancedButton;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var EnhancedButton = __webpack_require__(48);

	var FlatButton = React.createClass({displayName: "FlatButton",

	  mixins: [Classable],

	  propTypes: {
	    className: React.PropTypes.string,
	    label: function(props, propName, componentName){
	      if (!props.children && !props.label) {
	        return new Error('Warning: Required prop `label` or `children` was not specified in `'+ componentName + '`.')
	      }
	    },
	    primary: React.PropTypes.bool,
	    secondary: React.PropTypes.bool
	  },

	  render: function() {
	    var $__0=
	        
	        
	        
	        
	        this.props,label=$__0.label,primary=$__0.primary,secondary=$__0.secondary,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{label:1,primary:1,secondary:1});
	    var classes = this.getClasses('mui-flat-button', {
	      'mui-is-primary': !this.props.disabled && primary,
	      'mui-is-secondary': !this.props.disabled && !primary && secondary
	    });
	    var children;

	    if (label) children = React.createElement("span", {className: "mui-flat-button-label"}, label);
	    else children = this.props.children;

	    return (
	      React.createElement(EnhancedButton, React.__spread({},  other, 
	        {className: classes}), 
	        children
	      )
	    );
	  }

	});

	module.exports = FlatButton;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var EnhancedButton = __webpack_require__(48);
	var FontIcon = __webpack_require__(51);
	var Paper = __webpack_require__(60);

	var getZDepth = function(disabled) {
	  var zDepth = disabled ? 0 : 2;
	  return {
	    zDepth: zDepth,
	    initialZDepth: zDepth
	  };
	};


	var RaisedButton = React.createClass({displayName: "RaisedButton",

	  mixins: [Classable],

	  propTypes: {
	    className: React.PropTypes.string,
	    iconClassName: React.PropTypes.string,
	    mini: React.PropTypes.bool,
	    onMouseDown: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onMouseOut: React.PropTypes.func,
	    onTouchEnd: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    secondary: React.PropTypes.bool
	  },

	  componentWillMount: function() {
	    this.setState(getZDepth(this.props.disabled));
	  },

	  componentWillReceiveProps: function(newProps) {
	    if(newProps.disabled !== this.props.disabled){
	      this.setState(getZDepth(newProps.disabled));
	    }
	  },

	  componentDidMount: function() {
	    if (process.NODE_ENV !== 'production') {
	      if (this.props.iconClassName && this.props.children) {
	        var warning = 'You have set both an iconClassName and a child icon. ' +
	                      'It is recommended you use only one method when adding ' +
	                      'icons to FloatingActionButtons.';
	        console.warn(warning);
	      }
	    }
	  },


	  render: function() {
	    var $__0=
	      
	      
	      
	         this.props,icon=$__0.icon,mini=$__0.mini,secondary=$__0.secondary,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{icon:1,mini:1,secondary:1});
	    var classes = this.getClasses('mui-floating-action-button', {
	      'mui-is-mini': mini,
	      'mui-is-secondary': !this.props.disabled && secondary
	    });

	    var icon;
	    if (this.props.iconClassName) icon = React.createElement(FontIcon, {className: "mui-floating-action-button-icon " + this.props.iconClassName})


	    return (
	      React.createElement(Paper, {
	        className: classes, 
	        innerClassName: "mui-floating-action-button-inner", 
	        zDepth: this.state.zDepth, 
	        circle: true}, 

	        React.createElement(EnhancedButton, React.__spread({},  other, 
	          {className: "mui-floating-action-button-container", 
	          onMouseDown: this._handleMouseDown, 
	          onMouseUp: this._handleMouseUp, 
	          onMouseOut: this._handleMouseOut, 
	          onTouchStart: this._handleTouchStart, 
	          onTouchEnd: this._handleTouchEnd}), 

	          icon, 
	          this.props.children

	        )

	      )
	    );
	  },

	  _handleMouseDown: function(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	    }
	    if (this.props.onMouseDown) this.props.onMouseDown(e);
	  },

	  _handleMouseUp: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseUp) this.props.onMouseUp(e);
	  },

	  _handleMouseOut: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseOut) this.props.onMouseOut(e);
	  },

	  _handleTouchStart: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth + 1 });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleTouchEnd: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
	  }

	});

	module.exports = RaisedButton;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var FontIcon = React.createClass({displayName: "FontIcon",

	  mixins: [Classable],

	  render: function() {

	    var $__0=
	      
	      
	      this.props,className=$__0.className,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1});
	    var classes = this.getClasses('mui-font-icon');

	    return (
	      React.createElement("span", React.__spread({},  other, {className: classes}))
	    );
	  }

	});

	module.exports = FontIcon;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var EnhancedButton = __webpack_require__(48);
	var FontIcon = __webpack_require__(51);
	var Tooltip = __webpack_require__(76);

	var IconButton = React.createClass({displayName: "IconButton",

	  mixins: [Classable],

	  propTypes: {
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    iconClassName: React.PropTypes.string,
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    tooltip: React.PropTypes.string,
	    touch: React.PropTypes.bool
	  },

	  getInitialState: function() {
	    return {
	      tooltipShown: false 
	    };
	  },

	  componentDidMount: function() {
	    if (this.props.tooltip) {
	      this._positionTooltip();
	    }
	    if (process.NODE_ENV !== 'production') {
	      if (this.props.iconClassName && this.props.children) {
	        var warning = 'You have set both an iconClassName and a child icon. ' +
	                      'It is recommended you use only one method when adding ' +
	                      'icons to IconButtons.';
	        console.warn(warning);
	      }
	    }
	  },

	  render: function() {
	    var $__0=
	      
	      
	         this.props,tooltip=$__0.tooltip,touch=$__0.touch,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{tooltip:1,touch:1});
	    var classes = this.getClasses('mui-icon-button');
	    var tooltip;
	    var fonticon;

	    if (this.props.tooltip) {
	      tooltip = (
	        React.createElement(Tooltip, {
	          ref: "tooltip", 
	          className: "mui-icon-button-tooltip", 
	          label: tooltip, 
	          show: this.state.tooltipShown, 
	          touch: touch})
	      );
	    }

	    if (this.props.iconClassName) {
	      fonticon = (
	        React.createElement(FontIcon, {className: this.props.iconClassName})
	      );
	    }

	    return (
	      React.createElement(EnhancedButton, React.__spread({},  other, 
	        {ref: "button", 
	        centerRipple: true, 
	        className: classes, 
	        onBlur: this._handleBlur, 
	        onFocus: this._handleFocus, 
	        onMouseOut: this._handleMouseOut, 
	        onMouseOver: this._handleMouseOver}), 

	        tooltip, 
	        fonticon, 
	        this.props.children

	      )
	    );
	  },

	  _positionTooltip: function() {
	    var tooltip = this.refs.tooltip.getDOMNode();
	    var tooltipWidth = tooltip.offsetWidth;
	    var buttonWidth = 48;

	    tooltip.style.left = (tooltipWidth - buttonWidth) / 2 * -1 + 'px';
	  },

	  _showTooltip: function() {
	    if (!this.props.disabled) this.setState({ tooltipShown: true });
	  },

	  _hideTooltip: function() {
	    this.setState({ tooltipShown: false });
	  },

	  _handleBlur: function(e) {
	    this._hideTooltip();
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleFocus: function(e) {
	    this._showTooltip();
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleMouseOut: function(e) {
	    if (!this.refs.button.isKeyboardFocused()) this._hideTooltip();
	    if (this.props.onMouseOut) this.props.onMouseOut(e);
	  },

	  _handleMouseOver: function(e) {
	    this._showTooltip();
	    if (this.props.onMouseOver) this.props.onMouseOver(e);
	  }

	});

	module.exports = IconButton;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var ClassNames = __webpack_require__(7);

	var Input = React.createClass({displayName: "Input",

	  propTypes: {
	    multiline: React.PropTypes.bool,
	    inlinePlaceholder: React.PropTypes.bool,
	    rows: React.PropTypes.number,
	    inputStyle: React.PropTypes.string,
	    error: React.PropTypes.string,
	    description: React.PropTypes.string,
	    placeholder: React.PropTypes.string,
	    type: React.PropTypes.string,
	    onChange: React.PropTypes.func
	  },

	  mixins: [Classable],

	  getInitialState: function() {
	    return {
	      value: this.props.defaultValue,
	      rows: this.props.rows
	    };
	  },

	  getDefaultProps: function() {
	    return {
	      multiline: false,
	      type: "text"
	    };
	  },

	  componentDidMount: function() {
	    if (process.NODE_ENV !== 'production') {
	      console.warn('Input has been deprecated. Please use TextField instead. See http://material-ui.com/#/components/text-fields');
	    }
	  },

	  render: function() {
	    var classes = this.getClasses('mui-input', {
	      'mui-floating': this.props.inputStyle === 'floating',
	      'mui-text': this.props.type === 'text',
	      'mui-error': this.props.error || false,
	      'mui-disabled': !!this.props.disabled,
	    });
	    var placeholder = this.props.inlinePlaceholder ? this.props.placeholder : "";
	    var inputIsNotEmpty = !!this.state.value;
	    var inputClassName = ClassNames({
	      'mui-is-not-empty': inputIsNotEmpty
	    });
	    var textareaClassName = ClassNames({
	      'mui-input-textarea': true,
	      'mui-is-not-empty': inputIsNotEmpty
	    });
	    var inputElement = this.props.multiline ?
	      this.props.valueLink ?
	        React.createElement("textarea", React.__spread({},  this.props, {ref: "input", 
	          className: textareaClassName, 
	          placeholder: placeholder, 
	          rows: this.state.rows})) :
	        React.createElement("textarea", React.__spread({},  this.props, {ref: "input", 
	          value: this.state.value, 
	          className: textareaClassName, 
	          placeholder: placeholder, 
	          rows: this.state.rows, 
	          onChange: this._onTextAreaChange})) :
	        this.props.valueLink ?
	          React.createElement("input", React.__spread({},  this.props, {ref: "input", 
	            className: inputClassName, 
	            placeholder: placeholder})) :
	          React.createElement("input", React.__spread({},  this.props, {ref: "input", 
	            className: inputClassName, 
	            value: this.state.value, 
	            placeholder: placeholder, 
	            onChange: this._onInputChange}));
	    var placeholderSpan = this.props.inlinePlaceholder ? null : 
	      React.createElement("span", {className: "mui-input-placeholder", onClick: this._onPlaceholderClick}, 
	        this.props.placeholder
	      );

	    return (
	      React.createElement("div", {ref: this.props.ref, className: classes}, 
	        inputElement, 
	        placeholderSpan, 
	        React.createElement("span", {className: "mui-input-highlight"}), 
	        React.createElement("span", {className: "mui-input-bar"}), 
	        React.createElement("span", {className: "mui-input-description"}, this.props.description), 
	        React.createElement("span", {className: "mui-input-error"}, this.props.error)
	      )
	    );
	  },

	  getValue: function() {
	    return this.state.value;
	  },

	  setValue: function(txt) {
	    this.setState({value: txt});
	  },

	  clearValue: function() {
	    this.setValue('');
	  },

	  blur: function() {
	    if(this.isMounted()) this.refs.input.getDOMNode().blur();
	  },
	  
	  focus: function() {
	    if (this.isMounted()) this.refs.input.getDOMNode().focus();
	  },

	  _onInputChange: function(e) {
	    var value = e.target.value;
	    this.setState({value: value});
	    if (this.props.onChange) this.props.onChange(e, value);
	  },

	  _onPlaceholderClick: function(e) {
	    this.focus();
	  },

	  _onTextAreaChange: function(e) {
	    this._onInputChange(e);
	    this._onLineBreak(e);
	  },

	  _onLineBreak: function(e) {
	    var value = e.target.value;
	    var lines = value.split('\n').length;

	    if (lines > this.state.rows) {
	      if (this.state.rows !== 20) {
	        this.setState({ rows: ((this.state.rows) + 1)});
	      }
	    }
	  }

	});

	module.exports = Input;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	  KeyCode = __webpack_require__(80),
	  Classable = __webpack_require__(57),
	  WindowListenable = __webpack_require__(59),
	  Overlay = __webpack_require__(194),
	  Paper = __webpack_require__(60),
	  Menu = __webpack_require__(55);

	var LeftNav = React.createClass({displayName: "LeftNav",

	  mixins: [Classable, WindowListenable],

	  propTypes: {
	    docked: React.PropTypes.bool,
	    header: React.PropTypes.element,
	    onChange: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    selectedIndex: React.PropTypes.number
	  },

	  windowListeners: {
	    'keyup': '_onWindowKeyUp'
	  },

	  getDefaultProps: function() {
	    return {
	      docked: true
	    };
	  },

	  getInitialState: function() {
	    return {
	      open: this.props.docked
	    };
	  },

	  toggle: function() {
	    this.setState({ open: !this.state.open });
	    return this;
	  },

	  close: function() {
	    this.setState({ open: false });
	    return this;
	  },

	  open: function() {
	    this.setState({ open: true });
	    return this;
	  },

	  render: function() {
	    var classes = this.getClasses('mui-left-nav', {
	        'mui-closed': !this.state.open
	      }),
	      selectedIndex = this.props.selectedIndex,
	      overlay;

	    if (!this.props.docked){
	      overlay = React.createElement(Overlay, {show: this.state.open, onTouchTap: this._onOverlayTouchTap});
	      console.log(overlay)
	    } 

	    return (
	      React.createElement("div", {className: classes}, 

	        overlay, 
	        React.createElement(Paper, {
	          ref: "clickAwayableElement", 
	          className: "mui-left-nav-menu", 
	          zDepth: 2, 
	          rounded: false}, 
	          
	          this.props.header, 
	          React.createElement(Menu, {
	            ref: "menuItems", 
	            zDepth: 0, 
	            menuItems: this.props.menuItems, 
	            selectedIndex: selectedIndex, 
	            onItemClick: this._onMenuItemClick})

	        )
	      )
	    );
	  },

	  _onMenuItemClick: function(e, key, payload) {
	    if (this.props.onChange && this.props.selectedIndex !== key) {
	      this.props.onChange(e, key, payload);
	    }
	    if (!this.props.docked) this.close();
	  },

	  _onOverlayTouchTap: function() {
	    console.log("oi");
	    this.close();
	  },

	  _onWindowKeyUp: function(e) {
	    if (e.keyCode == KeyCode.ESC &&
	        !this.props.docked &&
	        this.state.open) {
	      this.close();
	    }
	  }

	});

	module.exports = LeftNav;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var CssEvent = __webpack_require__(77);
	var Dom = __webpack_require__(78);
	var KeyLine = __webpack_require__(81);
	var Classable = __webpack_require__(57);
	var ClickAwayable = __webpack_require__(58);
	var Paper = __webpack_require__(60);
	var MenuItem = __webpack_require__(56);
	var LinkMenuItem = __webpack_require__(198);
	var SubheaderMenuItem = __webpack_require__(199);

	/***********************
	* Nested Menu Component
	***********************/
	var NestedMenuItem = React.createClass({displayName: "NestedMenuItem",

	  mixins: [Classable, ClickAwayable],

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    text: React.PropTypes.string,
	    menuItems: React.PropTypes.array.isRequired,
	    zDepth: React.PropTypes.number,
	    disabled: React.PropTypes.bool,
	    onItemClick: React.PropTypes.func,
	    onItemTap: React.PropTypes.func
	  },
	  
	  getDefaultProps: function() {
	    return {
	      disabled: false
	    };
	  },

	  getInitialState: function() {
	    return { open: false }
	  },

	  componentClickAway: function() {
	    this._closeNestedMenu();
	  },

	  componentDidMount: function() {
	    this._positionNestedMenu();
	  },

	  componentDidUpdate: function(prevProps, prevState) {
	    this._positionNestedMenu();
	  },

	  render: function() {
	    var classes = this.getClasses('mui-nested-menu-item', {
	      'mui-open': this.state.open,
	      'mui-is-disabled': this.props.disabled
	    });

	    return (
	      React.createElement("div", {className: classes, onMouseEnter: this._openNestedMenu, onMouseLeave: this._closeNestedMenu}, 
	        React.createElement(MenuItem, {index: this.props.index, disabled: this.props.disabled, iconRightClassName: "muidocs-icon-custom-arrow-drop-right", onClick: this._onParentItemClick}, 
	          this.props.text
	        ), 
	        React.createElement(Menu, {
	          ref: "nestedMenu", 
	          menuItems: this.props.menuItems, 
	          onItemClick: this._onMenuItemClick, 
	          onItemTap: this._onMenuItemTap, 
	          hideable: true, 
	          visible: this.state.open, 
	          zDepth: this.props.zDepth + 1})
	      )
	    );
	  },

	  _positionNestedMenu: function() {
	    var el = this.getDOMNode(),
	      nestedMenu = this.refs.nestedMenu.getDOMNode();

	    nestedMenu.style.left = el.offsetWidth + 'px';
	  },
	  
	  _openNestedMenu: function() {
	    if (!this.props.disabled) this.setState({ open: true });
	  },
	  
	  _closeNestedMenu: function() {
	    this.setState({ open: false });
	  },
	  
	  _toggleNestedMenu: function() {
	    if (!this.props.disabled) this.setState({ open: !this.state.open });
	  },

	  _onParentItemClick: function() {
	    this._toggleNestedMenu();
	  },

	  _onMenuItemClick: function(e, index, menuItem) {
	    if (this.props.onItemClick) this.props.onItemClick(e, index, menuItem);
	    this._closeNestedMenu();
	  },
	  
	  _onMenuItemTap: function(e, index, menuItem) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
	    this._closeNestedMenu();
	  }

	});


	/****************
	* Menu Component
	****************/
	var Menu = React.createClass({displayName: "Menu",

	  mixins: [Classable],

	  propTypes: {
	    autoWidth: React.PropTypes.bool,
	    onItemTap: React.PropTypes.func,
	    onItemClick: React.PropTypes.func,
	    onToggleClick: React.PropTypes.func,
	    menuItems: React.PropTypes.array.isRequired,
	    selectedIndex: React.PropTypes.number,
	    hideable: React.PropTypes.bool,
	    visible: React.PropTypes.bool,
	    zDepth: React.PropTypes.number
	  },

	  getInitialState: function() {
	    return { nestedMenuShown: false }
	  },

	  getDefaultProps: function() {
	    return {
	      autoWidth: true,
	      hideable: false,
	      visible: true,
	      zDepth: 1
	    };
	  },

	  componentDidMount: function() {
	    var el = this.getDOMNode();

	    //Set the menu with
	    this._setKeyWidth(el);

	    //Save the initial menu height for later
	    this._initialMenuHeight = el.offsetHeight + KeyLine.Desktop.GUTTER_LESS;

	    //Show or Hide the menu according to visibility
	    this._renderVisibility();
	  },

	  componentDidUpdate: function(prevProps, prevState) {
	    if (this.props.visible !== prevProps.visible) this._renderVisibility();
	  },

	  render: function() {
	    var classes = this.getClasses('mui-menu', {
	      'mui-menu-hideable': this.props.hideable,
	      'mui-visible': this.props.visible
	    });

	    return (
	      React.createElement(Paper, {ref: "paperContainer", zDepth: this.props.zDepth, className: classes}, 
	        this._getChildren()
	      )
	    );
	  },

	  _getChildren: function() {
	    var children = [],
	      menuItem,
	      itemComponent,
	      isSelected,
	      isDisabled;

	    //This array is used to keep track of all nested menu refs
	    this._nestedChildren = [];

	    for (var i=0; i < this.props.menuItems.length; i++) {
	      menuItem = this.props.menuItems[i];
	      isSelected = i === this.props.selectedIndex;
	      isDisabled = (menuItem.disabled === undefined) ? false : menuItem.disabled;

	      var $__0=
	        
	        
	        
	        
	        
	        
	        
	        menuItem,icon=$__0.icon,data=$__0.data,attribute=$__0.attribute,number=$__0.number,toggle=$__0.toggle,onClick=$__0.onClick,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{icon:1,data:1,attribute:1,number:1,toggle:1,onClick:1});

	      switch (menuItem.type) {

	        case MenuItem.Types.LINK:
	          itemComponent = (
	            React.createElement(LinkMenuItem, {
	              key: i, 
	              index: i, 
	              payload: menuItem.payload, 
	              target: menuItem.target, 
	              text: menuItem.text, 
	              disabled: isDisabled})
	          );
	          break;

	        case MenuItem.Types.SUBHEADER:
	          itemComponent = (
	            React.createElement(SubheaderMenuItem, {
	              key: i, 
	              index: i, 
	              text: menuItem.text})
	          );
	          break;

	        case MenuItem.Types.NESTED:
	          itemComponent = (
	            React.createElement(NestedMenuItem, {
	              ref: i, 
	              key: i, 
	              index: i, 
	              text: menuItem.text, 
	              disabled: isDisabled, 
	              menuItems: menuItem.items, 
	              zDepth: this.props.zDepth, 
	              onItemClick: this._onNestedItemClick, 
	              onItemTap: this._onNestedItemClick})
	          );
	          this._nestedChildren.push(i);
	          break;

	        default:
	          itemComponent = (
	            React.createElement(MenuItem, React.__spread({}, 
	              other, 
	              {selected: isSelected, 
	              key: i, 
	              index: i, 
	              icon: menuItem.icon, 
	              data: menuItem.data, 
	              attribute: menuItem.attribute, 
	              number: menuItem.number, 
	              toggle: menuItem.toggle, 
	              disabled: isDisabled, 
	              onClick: this._onItemClick, 
	              onTouchTap: this._onItemTap}), 
	              menuItem.text
	            )
	          );
	      }
	      children.push(itemComponent);
	    }

	    return children;
	  },

	  _setKeyWidth: function(el) {
	    var menuWidth = this.props.autoWidth ?
	      KeyLine.getIncrementalDim(el.offsetWidth) + 'px' :
	      '100%';

	    //Update the menu width
	    Dom.withoutTransition(el, function() {
	      el.style.width = menuWidth;
	    });
	  },

	  _renderVisibility: function() {
	    var el;

	    if (this.props.hideable) {
	      el = this.getDOMNode();
	      var innerContainer = this.refs.paperContainer.getInnerContainer().getDOMNode();
	      
	      if (this.props.visible) {

	        //Open the menu
	        el.style.height = this._initialMenuHeight + 'px';

	        //Set the overflow to visible after the animation is done so
	        //that other nested menus can be shown
	        CssEvent.onTransitionEnd(el, function() {
	          //Make sure the menu is open before setting the overflow.
	          //This is to accout for fast clicks
	          if (this.props.visible) innerContainer.style.overflow = 'visible';
	        }.bind(this));

	      } else {

	        //Close the menu
	        el.style.height = '0px';

	        //Set the overflow to hidden so that animation works properly
	        innerContainer.style.overflow = 'hidden';
	      }
	    }
	  },

	  _onNestedItemClick: function(e, index, menuItem) {
	    if (this.props.onItemClick) this.props.onItemClick(e, index, menuItem);
	  },

	  _onNestedItemTap: function(e, index, menuItem) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, menuItem);
	  },

	  _onItemClick: function(e, index) {
	    if (this.props.onItemClick) this.props.onItemClick(e, index, this.props.menuItems[index]);
	  },

	  _onItemTap: function(e, index) {
	    if (this.props.onItemTap) this.props.onItemTap(e, index, this.props.menuItems[index]);
	  },

	  _onItemToggle: function(e, index, toggled) {
	    if (this.props.onItemToggle) this.props.onItemToggle(e, index, this.props.menuItems[index], toggled);
	  }

	});

	module.exports = Menu;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var FontIcon = __webpack_require__(51);
	var Toggle = __webpack_require__(71);

	var Types = {
	  LINK: 'LINK',
	  SUBHEADER: 'SUBHEADER',
	  NESTED: 'NESTED'
	};

	var MenuItem = React.createClass({displayName: "MenuItem",

	  mixins: [Classable],

	  propTypes: {
	    index: React.PropTypes.number.isRequired,
	    iconClassName: React.PropTypes.string,
	    iconRightClassName: React.PropTypes.string,
	    attribute: React.PropTypes.string,
	    number: React.PropTypes.string,
	    data: React.PropTypes.string,
	    toggle: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    onTouchTap: React.PropTypes.func,
	    onClick: React.PropTypes.func,
	    onToggle: React.PropTypes.func,
	    selected: React.PropTypes.bool
	  },
	  
	  statics: {
	    Types: Types
	  },

	  getDefaultProps: function() {
	    return {
	      toggle: false,
	      disabled: false
	    };
	  },

	  render: function() {
	    var classes = this.getClasses('mui-menu-item', {
	      'mui-is-selected': this.props.selected,
	      'mui-is-disabled': this.props.disabled
	    });
	    var icon;
	    var data;
	    var iconRight;
	    var attribute;
	    var number;
	    var toggle;

	    if (this.props.iconClassName) icon = React.createElement(FontIcon, {className: 'mui-menu-item-icon ' + this.props.iconClassName});
	    if (this.props.iconRightClassName) iconRight = React.createElement(FontIcon, {className: 'mui-menu-item-icon-right ' + this.props.iconRightClassName});
	    if (this.props.data) data = React.createElement("span", {className: "mui-menu-item-data"}, this.props.data);
	    if (this.props.number !== undefined) number = React.createElement("span", {className: "mui-menu-item-number"}, this.props.number);
	    if (this.props.attribute !== undefined) attribute = React.createElement("span", {className: "mui-menu-item-attribute"}, this.props.attribute);
	    
	    if (this.props.toggle) {
	      var $__0=
	        
	        
	        
	        
	        
	        
	        this.props,toggle=$__0.toggle,onClick=$__0.onClick,onToggle=$__0.onToggle,children=$__0.children,label=$__0.label,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{toggle:1,onClick:1,onToggle:1,children:1,label:1});
	      toggle = React.createElement(Toggle, React.__spread({},  other, {onToggle: this._handleToggle}));
	    }

	    return (
	      React.createElement("div", {
	        key: this.props.index, 
	        className: classes, 
	        onTouchTap: this._handleTouchTap, 
	        onClick: this._handleOnClick}, 

	        icon, 
	        this.props.children, 
	        data, 
	        attribute, 
	        number, 
	        toggle, 
	        iconRight
	        
	      )
	    );
	  },

	  _handleTouchTap: function(e) {
	    if (!this.props.disabled && this.props.onTouchTap) this.props.onTouchTap(e, this.props.index);
	  },

	  _handleOnClick: function(e) {
	    if (!this.props.disabled && this.props.onClick) this.props.onClick(e, this.props.index);
	  },

	  _handleToggle: function(e, toggled) {
	    if (!this.props.disabled && this.props.onToggle) this.props.onToggle(e, this.props.index, toggled);
	  }

	});

	module.exports = MenuItem;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var classNames = __webpack_require__(7);

	module.exports = {

	  propTypes: {
	    className: React.PropTypes.string
	  },

	  getClasses: function(initialClasses, additionalClassObj) {
	    var classString = '';

	    //Initialize the classString with the classNames that were passed in
	    if (this.props.className) classString += ' ' + this.props.className;

	    //Add in initial classes
	    if (typeof initialClasses === 'object') {
	      classString += ' ' + classNames(initialClasses);
	    } else {
	      classString += ' ' + initialClasses;
	    }

	    //Add in additional classes
	    if (additionalClassObj) classString += ' ' + classNames(additionalClassObj);

	    //Convert the class string into an object and run it through the class set
	    return classNames(this.getClassSet(classString));
	  },

	  getClassSet: function(classString) {
	    var classObj = {};

	    if (classString) {
	      classString.split(' ').forEach(function(className) {
	        if (className) classObj[className] = true;
	      });
	    }

	    return classObj;
	  }

	}


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var Events = __webpack_require__(79);
	var Dom = __webpack_require__(78);

	module.exports = {

	  //When the component mounts, listen to click events and check if we need to
	  //Call the componentClickAway function.
	  componentDidMount: function() {
	    if (!this.manuallyBindClickAway) this._bindClickAway();
	  },

	  componentWillUnmount: function() {
	    this._unbindClickAway();
	  },

	  _checkClickAway: function(e) {
	    var el = this.getDOMNode();

	    // Check if the target is inside the current component
	    if (this.isMounted() && 
	      e.target != el &&
	      !Dom.isDescendant(el, e.target)) {
	      if (this.componentClickAway) this.componentClickAway();
	    }
	  },

	  _bindClickAway: function() {
	    Events.on(document, 'click', this._checkClickAway);
	  },

	  _unbindClickAway: function() {
	    Events.off(document, 'click', this._checkClickAway);
	  }

	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var Events = __webpack_require__(79);

	module.exports = {

	  componentDidMount: function() {
	    var listeners = this.windowListeners;

	    for (var eventName in listeners) {
	       var callbackName = listeners[eventName];
	       Events.on(window, eventName, this[callbackName]);
	    }
	  },

	  componentWillUnmount: function() {
	    var listeners = this.windowListeners;

	    for (var eventName in listeners) {
	       var callbackName = listeners[eventName];
	       Events.off(window, eventName, this[callbackName]);
	    }
	  }
	  
	}

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	  Classable = __webpack_require__(57);

	var Paper = React.createClass({displayName: "Paper",

	  mixins: [Classable],

	  propTypes: {
	    circle: React.PropTypes.bool,
	    innerClassName: React.PropTypes.string,
	    innerStyle: React.PropTypes.object,
	    rounded: React.PropTypes.bool,
	    zDepth: React.PropTypes.oneOf([0,1,2,3,4,5])
	  },

	  getDefaultProps: function() {
	    return {
	      innerClassName: '',
	      rounded: true,
	      zDepth: 1
	    };
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      
	         this.props,className=$__0.className,circle=$__0.circle,innerClassName=$__0.innerClassName,rounded=$__0.rounded,zDepth=$__0.zDepth,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1,circle:1,innerClassName:1,rounded:1,zDepth:1}),
	      classes = this.getClasses(
	        'mui-paper ' +
	        'mui-z-depth-' + this.props.zDepth, { 
	        'mui-rounded': this.props.rounded,
	        'mui-circle': this.props.circle
	      }),
	      insideClasses = 
	        this.props.innerClassName + ' ' +
	        'mui-paper-container ' +
	        'mui-z-depth-bottom';

	    return (
	      React.createElement("div", React.__spread({},  other, {className: classes}), 
	        React.createElement("div", {ref: "innerContainer", className: insideClasses, style: this.props.innerStyle || {}}, 
	          this.props.children
	        )
	      )
	    );
	  },

	  getInnerContainer: function() {
	    return this.refs.innerContainer;
	  }

	});

	module.exports = Paper;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var EnhancedSwitch = __webpack_require__(189);
	var RadioButtonOff = __webpack_require__(200);
	var RadioButtonOn = __webpack_require__(201);

	var RadioButton = React.createClass({displayName: "RadioButton",

	  mixins: [Classable],

	  propTypes: {
	    onCheck: React.PropTypes.func
	  },

	  render: function() {

	    var $__0=
	      
	      
	      this.props,onCheck=$__0.onCheck,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{onCheck:1});

	    var radioButtonElement = (
	      React.createElement("div", null, 
	          React.createElement(RadioButtonOff, {className: "mui-radio-button-target"}), 
	          React.createElement(RadioButtonOn, {className: "mui-radio-button-fill"})
	      )
	    );

	    var enhancedSwitchProps = {
	      ref: "enhancedSwitch",
	      inputType: "radio",
	      switchElement: radioButtonElement,
	      className: "mui-radio-button",
	      iconClassName: "mui-radio-button-icon",
	      onSwitch: this._handleCheck,
	      labelPosition: (this.props.labelPosition) ? this.props.labelPosition : "right"
	    };

	    return (
	      React.createElement(EnhancedSwitch, React.__spread({},  
	        other, 
	        enhancedSwitchProps))
	    );
	  },

	  // Only called when selected, not when unselected.
	  _handleCheck: function(e) {
	    if (this.props.onCheck) this.props.onCheck(e, this.props.value);
	  },

	  isChecked: function() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setChecked: function(newCheckedValue) {
	    this.refs.enhancedSwitch.setSwitched(newCheckedValue);
	    this.setState({switched: newCheckedValue});
	  },
	  
	  getValue: function() {
	    return this.refs.enhancedSwitch.getValue();
	  }
	});

	module.exports = RadioButton;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var Paper = __webpack_require__(60);
	var Classable = __webpack_require__(57);
	var EnhancedSwitch = __webpack_require__(189);
	var RadioButton = __webpack_require__(61);

	var RadioButtonGroup = React.createClass({displayName: "RadioButtonGroup",

		mixins: [Classable],

		propTypes: {
			name: React.PropTypes.string.isRequired,
	    valueSelected: React.PropTypes.string,
	    defaultSelected: React.PropTypes.string,
	    labelPosition: React.PropTypes.oneOf(['left', 'right']),
			onChange: React.PropTypes.func
		},

	  _hasCheckAttribute: function(radioButton) {
	    return radioButton.props.hasOwnProperty('checked') && 
	      radioButton.props.checked; 
	  },

	  getInitialState: function() {
	    return {
	      numberCheckedRadioButtons: 0,
	      selected: this.props.valueSelected || this.props.defaultSelected || ''
	    };
	  },

	  componentWillMount: function() {
	    var cnt = 0;
	    
	    this.props.children.forEach(function(option) {
	      if (this._hasCheckAttribute(option)) cnt++;
	    }, this);

	    this.setState({numberCheckedRadioButtons: cnt});
	  }, 

	  componentWillReceiveProps: function(nextProps) {
	    if (nextProps.hasOwnProperty('valueSelected')) {
	      this.setState({selected: nextProps.valueSelected});
	    }
	  },

		render: function() {

	    var options = this.props.children.map(function(option) {
	      
	      var $__0=
	        
	         
	        
	        
	        
	        option.props,name=$__0.name,value=$__0.value,label=$__0.label,onCheck=$__0.onCheck,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{name:1,value:1,label:1,onCheck:1});

	      return React.createElement(RadioButton, React.__spread({}, 
	        other, 
	        {ref: option.props.value, 
	        name: this.props.name, 
	        key: option.props.value, 
	        value: option.props.value, 
	        label: option.props.label, 
	        labelPosition: this.props.labelPosition, 
	        onCheck: this._onChange, 
	        checked: option.props.value == this.state.selected}))

			}, this);

			return (
				React.createElement("div", null, 
					options
				)
			);
		},

	  _updateRadioButtons: function(newSelection) {
	    if (this.state.numberCheckedRadioButtons == 0) {
	      this.setState({selected: newSelection});
	    } else if (process.NODE_ENV !== 'production') {
	      var message = "Cannot select a different radio button while another radio button " + 
	                    "has the 'checked' property set to true.";
	      console.error(message);
	    }
	  },

		_onChange: function(e, newSelection) {
	    this._updateRadioButtons(newSelection);

	    // Successful update
	    if (this.state.numberCheckedRadioButtons == 0) {
	      if (this.props.onChange) this.props.onChange(e, newSelection);
	    }
		},

	  getSelectedValue: function() {
	    return this.state.selected;
	  },

	  setSelectedValue: function(newSelection) {
	    this._updateRadioButtons(newSelection);  
	  },

	  clearValue: function() {
	    this.setSelectedValue('');  
	  }

	});

	module.exports = RadioButtonGroup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var EnhancedButton = __webpack_require__(48);
	var Paper = __webpack_require__(60);

	var RaisedButton = React.createClass({displayName: "RaisedButton",

	  mixins: [Classable],

	  propTypes: {
	    className: React.PropTypes.string,
	    label: function(props, propName, componentName){
	      if (!props.children && !props.label) {
	        return new Error('Warning: Required prop `label` or `children` was not specified in `'+ componentName + '`.')
	      }
	    },
	    onMouseDown: React.PropTypes.func,
	    onMouseUp: React.PropTypes.func,
	    onMouseOut: React.PropTypes.func,
	    onTouchEnd: React.PropTypes.func,
	    onTouchStart: React.PropTypes.func,
	    primary: React.PropTypes.bool,
	    secondary: React.PropTypes.bool
	  },

	  getInitialState: function() {
	    var zDepth = this.props.disabled ? 0 : 1;
	    return {
	      zDepth: zDepth,
	      initialZDepth: zDepth
	    };
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var zDepth = nextProps.disabled ? 0 : 1;
	    this.setState({
	      zDepth: zDepth,
	      initialZDepth: zDepth
	    });
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	         this.props,label=$__0.label,primary=$__0.primary,secondary=$__0.secondary,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{label:1,primary:1,secondary:1});
	    var classes = this.getClasses('mui-raised-button', {
	      'mui-is-primary': !this.props.disabled && primary,
	      'mui-is-secondary': !this.props.disabled && !primary && secondary
	    });
	    var children;

	    if (label) children = React.createElement("span", {className: "mui-raised-button-label"}, label);
	    else children = this.props.children;

	    return (
	      React.createElement(Paper, {className: classes, zDepth: this.state.zDepth}, 
	        React.createElement(EnhancedButton, React.__spread({},  other, 
	          {className: "mui-raised-button-container", 
	          onMouseUp: this._handleMouseUp, 
	          onMouseDown: this._handleMouseDown, 
	          onMouseOut: this._handleMouseOut, 
	          onTouchStart: this._handleTouchStart, 
	          onTouchEnd: this._handleTouchEnd}), 
	          children
	        )
	      )
	    );
	  },

	  _handleMouseDown: function(e) {
	    //only listen to left clicks
	    if (e.button === 0) {
	      this.setState({ zDepth: this.state.initialZDepth + 1 });
	    }
	    if (this.props.onMouseDown) this.props.onMouseDown(e);
	  },

	  _handleMouseUp: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseUp) this.props.onMouseUp(e);
	  },

	  _handleMouseOut: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onMouseOut) this.props.onMouseOut(e);
	  },

	  _handleTouchStart: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth + 1 });
	    if (this.props.onTouchStart) this.props.onTouchStart(e);
	  },

	  _handleTouchEnd: function(e) {
	    this.setState({ zDepth: this.state.initialZDepth });
	    if (this.props.onTouchEnd) this.props.onTouchEnd(e);
	  }

	});

	module.exports = RaisedButton;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	    Paper = __webpack_require__(60),
	    Classable = __webpack_require__(57),
	    Draggable = __webpack_require__(334);

	var Slider = React.createClass({displayName: "Slider",

	  propTypes: {
	    required: React.PropTypes.bool,
	    disabled: React.PropTypes.bool,
	    min: React.PropTypes.number,
	    max: React.PropTypes.number,
	    step: React.PropTypes.number,
	    error: React.PropTypes.string,
	    description: React.PropTypes.string,
	    name: React.PropTypes.string.isRequired,
	    onChange: React.PropTypes.func,
	    onDragStart: React.PropTypes.func,
	    onDragStop: React.PropTypes.func
	  },

	  mixins: [Classable],

	  getDefaultProps: function() {
	    return {
	      required: true,
	      disabled: false,
	      defaultValue: 0,
	      min: 0,
	      max: 1,
	      dragging: false
	    };
	  },

	  getInitialState: function() {
	    var value = this.props.value;
	    if (value == null) value = this.props.defaultValue;
	    var percent = (value - this.props.min) / (this.props.max - this.props.min);
	    if (isNaN(percent)) percent = 0;
	    return {
	      value: value,
	      percent: percent
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    if (nextProps.value != null) {
	      this.setValue(nextProps.value);
	    }
	  },

	  render: function() {
	    var classes = this.getClasses('mui-input', {
	      'mui-error': this.props.error != null
	    });

	    var sliderClasses = this.getClasses('mui-slider', {
	      'mui-slider-zero': this.state.percent == 0,
	      'mui-disabled': this.props.disabled
	    });

	    var percent = this.state.percent;
	    if (percent > 1) percent = 1; else if (percent < 0) percent = 0;

	    return (
	      React.createElement("div", {className: classes, style: this.props.style}, 
	        React.createElement("span", {className: "mui-input-highlight"}), 
	        React.createElement("span", {className: "mui-input-bar"}), 
	        React.createElement("span", {className: "mui-input-description"}, this.props.description), 
	        React.createElement("span", {className: "mui-input-error"}, this.props.error), 
	        React.createElement("div", {className: sliderClasses, onClick: this._onClick}, 
	          React.createElement("div", {ref: "track", className: "mui-slider-track"}, 
	            React.createElement(Draggable, {axis: "x", bound: "point", 
	              cancel: this.props.disabled ? '*' : null, 
	              start: {x: (percent * 100) + '%'}, 
	              onStart: this._onDragStart, 
	              onStop: this._onDragStop, 
	              onDrag: this._onDragUpdate}, 
	              React.createElement("div", {className: "mui-slider-handle", tabIndex: 0})
	            ), 
	            React.createElement("div", {className: "mui-slider-selection mui-slider-selection-low", 
	              style: {width: (percent * 100) + '%'}}, 
	              React.createElement("div", {className: "mui-slider-selection-fill"})
	            ), 
	            React.createElement("div", {className: "mui-slider-selection mui-slider-selection-high", 
	              style: {width: ((1 - percent) * 100) + '%'}}, 
	              React.createElement("div", {className: "mui-slider-selection-fill"})
	            )
	          )
	        ), 
	        React.createElement("input", {ref: "input", type: "hidden", 
	          name: this.props.name, 
	          value: this.state.value, 
	          required: this.props.required, 
	          min: this.props.min, 
	          max: this.props.max, 
	          step: this.props.step})
	      )
	    );
	  },

	  getValue: function() {
	    return this.state.value;
	  },

	  setValue: function(i) {
	    // calculate percentage
	    var percent = (i - this.props.min) / (this.props.max - this.props.min);
	    if (isNaN(percent)) percent = 0;
	    // update state
	    this.setState({
	      value: i,
	      percent: percent
	    });
	  },

	  getPercent: function() {
	    return this.state.percent;
	  },

	  setPercent: function (percent) {
	    var value = this._percentToValue(percent);
	    this.setState({value: value, percent: percent});
	  },

	  clearValue: function() {
	    this.setValue(0);
	  },

	  _onClick: function (e) {
	    // let draggable handle the slider
	    if (this.state.dragging || this.props.disabled) return;
	    var value = this.state.value;
	    var node = this.refs.track.getDOMNode();
	    var boundingClientRect = node.getBoundingClientRect();
	    var offset = e.clientX - boundingClientRect.left;
	    this._updateWithChangeEvent(e, offset / node.clientWidth);
	  },

	  _onDragStart: function(e, ui) {
	    this.setState({
	      dragging: true
	    });
	    if (this.props.onDragStart) this.props.onDragStart(e, ui);
	  },

	  _onDragStop: function(e, ui) {
	    this.setState({
	      dragging: false
	    });
	    if (this.props.onDragStop) this.props.onDragStop(e, ui);
	  },

	  _onDragUpdate: function(e, ui) {
	    if (!this.state.dragging) return;
	    if (!this.props.disabled) this._dragX(e, ui.position.left);
	  },

	  _dragX: function(e, pos) {
	    var max = this.refs.track.getDOMNode().clientWidth;
	    if (pos < 0) pos = 0; else if (pos > max) pos = max;
	    this._updateWithChangeEvent(e, pos / max);
	  },

	  _updateWithChangeEvent: function(e, percent) {
	    if (this.state.percent === percent) return;
	    this.setPercent(percent);
	    var value = this._percentToValue(percent);
	    if (this.props.onChange) this.props.onChange(e, value);
	  },

	  _percentToValue: function(percent) {
	    return percent * (this.props.max - this.props.min) + this.props.min;
	  }

	});

	module.exports = Slider;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var SvgIcon = React.createClass({displayName: "SvgIcon",

	  mixins: [Classable],

	  render: function() {
	    var classes = this.getClasses('mui-svg-icon');

	    return (
	      React.createElement("svg", React.__spread({}, 
	        this.props, 
	        {className: classes, 
	        viewBox: "0 0 24 24"}), 
	        this.props.children
	      )
	    );
	  }

	});

	module.exports = SvgIcon;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var NavigationMenu = React.createClass({displayName: "NavigationMenu",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("path", {d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"})
	      )
	    );
	  }

	});

	module.exports = NavigationMenu;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var NavigationChevronLeft = React.createClass({displayName: "NavigationChevronLeft",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("path", {d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"})
	      )
	    );
	  }

	});

	module.exports = NavigationChevronLeft;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var NavigationChevronLeft = React.createClass({displayName: "NavigationChevronLeft",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("path", {d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"})
	      )
	    );
	  }

	});

	module.exports = NavigationChevronLeft;



/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var TabTemplate = __webpack_require__(202);


	var Tab = React.createClass({displayName: "Tab",

	  mixins: [Classable],

	  propTypes: {
	    handleTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool
	  },


	  handleTouchTap: function(){
	    this.props.handleTouchTap(this.props.tabIndex, this);
	  },

	  render: function(){
	    var styles = {
	      width: this.props.width
	    };

	    var classes = this.getClasses('mui-tab-item', {
	      'mui-tab-is-active': this.props.selected
	    });

	    return (
	    React.createElement("div", {className: classes, style: styles, onTouchTap: this.handleTouchTap, routeName: this.props.route}, 
	      this.props.label
	    )
	    )
	  }

	});

	module.exports = Tab;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9);
	var Tab = __webpack_require__(69);
	var TabTemplate = __webpack_require__(202);
	var InkBar = __webpack_require__(203);

	var Tabs = React.createClass({displayName: "Tabs",

	  propTypes: {
	    initialSelectedIndex: React.PropTypes.number,
	    onActive: React.PropTypes.func,
	    tabWidth: React.PropTypes.number
	  },

	  getInitialState: function(){
	    var selectedIndex = 0;
	    if (this.props.initialSelectedIndex && this.props.initialSelectedIndex < this.props.children.length) {
	      selectedIndex = this.props.initialSelectedIndex;
	    }
	    return {
	      selectedIndex: selectedIndex
	    };
	  },

	  getEvenWidth: function(){
	    return (
	      parseInt(window
	        .getComputedStyle(this.getDOMNode())
	        .getPropertyValue('width'), 10)
	    );
	  },

	  componentDidMount: function(){
	    if(this.props.tabWidth) {
	      if(!(this.props.children.length * this.props.tabWidth > this.getEvenWidth())){
	        this.setState({
	          width: this.props.tabWidth,
	          fixed: false
	        });
	        return;
	      }
	    }
	    this.setState({
	      width: this.getEvenWidth(),
	      fixed: true
	    });
	  },

	  handleTouchTap: function(tabIndex, tab){
	    if (this.props.onChange && this.state.selectedIndex !== tabIndex) {
	      this.props.onChange(tabIndex, tab);
	    }

	    this.setState({selectedIndex: tabIndex});
	    //default CB is _onActive. Can be updated in tab.jsx
	    if(tab.props.onActive) tab.props.onActive(tab);
	  },

	  render: function(){
	    var _this = this;
	    var width = this.state.fixed ?
	      this.state.width/this.props.children.length :
	      this.props.tabWidth;
	    var left = width * this.state.selectedIndex || 0;
	    var currentTemplate;
	    var tabs = React.Children.map(this.props.children, function(tab, index){
	      if(tab.type.displayName === "Tab"){
	        if(_this.state.selectedIndex === index) currentTemplate = tab.props.children;
	         return React.addons.cloneWithProps(tab, {
	            key: index,
	            selected: _this.state.selectedIndex === index,
	            tabIndex: index,
	            width: width,
	            handleTouchTap: _this.handleTouchTap
	          })
	      } else {
	        var type = tab.type.displayName || tab.type;
	        throw "Tabs only accepts Tab Components as children. Found " + type + " as child number " + (index + 1) + " of Tabs";
	      }
	    });

	    return (
	      React.createElement("div", {className: "mui-tabs-container"}, 
	        React.createElement("div", {className: "mui-tab-item-container"}, 
	          tabs
	        ), 
	        React.createElement(InkBar, {left: left, width: width}), 
	        React.createElement(TabTemplate, null, 
	          currentTemplate
	        )
	      )
	    )
	  },

	});

	module.exports = Tabs;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var Paper = __webpack_require__(60);
	var EnhancedSwitch = __webpack_require__(189);

	var Toggle = React.createClass({displayName: "Toggle",

	  mixins: [Classable],

	  propTypes: {
	    onToggle: React.PropTypes.func,
	    toggled: React.PropTypes.bool,
	    defaultToggled: React.PropTypes.bool
	  },

	  render: function() {
	    var $__0=
	      
	      
	      this.props,onToggle=$__0.onToggle,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{onToggle:1});

	    var toggleElement = (
	      React.createElement("div", null, 
	        React.createElement("div", {className: "mui-toggle-track"}), 
	        React.createElement(Paper, {className: "mui-toggle-thumb", zDepth: 1})
	      )
	    );

	    var enhancedSwitchProps = {
	      ref: "enhancedSwitch",
	      inputType: "checkbox",
	      switchElement: toggleElement,
	      className: "mui-toggle",
	      iconClassName: "mui-toggle-icon",
	      onSwitch: this._handleToggle,
	      defaultSwitched: this.props.defaultToggled,
	      labelPosition: (this.props.labelPosition) ? this.props.labelPosition : "left"
	    };

	    if (this.props.hasOwnProperty('toggled')) enhancedSwitchProps.checked = this.props.toggled;

	    return (
	      React.createElement(EnhancedSwitch, React.__spread({},  
	        other, 
	        enhancedSwitchProps))
	    );
	  },

	  isToggled: function() {
	    return this.refs.enhancedSwitch.isSwitched();
	  },

	  setToggled: function(newToggledValue) {
	    this.refs.enhancedSwitch.setSwitched(newToggledValue);
	  },

	  _handleToggle: function(e, isInputChecked) {
	    if (this.props.onToggle) this.props.onToggle(e, isInputChecked);
	  }
	});

	module.exports = Toggle;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var CssEvent = __webpack_require__(77);
	var Classable = __webpack_require__(57);
	var ClickAwayable = __webpack_require__(58);
	var FlatButton = __webpack_require__(49);

	var Snackbar = React.createClass({displayName: "Snackbar",

	  mixins: [Classable, ClickAwayable],

	  manuallyBindClickAway: true,

	  propTypes: {
	    action: React.PropTypes.string,
	    message: React.PropTypes.string.isRequired,
	    openOnMount: React.PropTypes.bool,
	    onActionTouchTap: React.PropTypes.func
	  },

	  getInitialState: function() {
	    return {
	      open: this.props.openOnMount || false
	    };
	  },

	  componentClickAway: function() {
	    this.dismiss();
	  },

	  componentDidUpdate: function(prevProps, prevState) {
	    if (prevState.open != this.state.open) {
	      if (this.state.open) {
	        //Only Bind clickaway after transition finishes
	        CssEvent.onTransitionEnd(this.getDOMNode(), function() {
	          this._bindClickAway();
	        }.bind(this));
	      } else {
	        this._unbindClickAway();
	      }
	    }
	  },

	  render: function() {
	    var classes = this.getClasses('mui-snackbar', {
	      'mui-is-open': this.state.open
	    }); 
	    var action;

	    if (this.props.action) {
	      action = (
	        React.createElement(FlatButton, {
	          className: "mui-snackbar-action", 
	          label: this.props.action, 
	          onTouchTap: this.props.onActionTouchTap})
	      );
	    }

	    return (
	      React.createElement("span", {className: classes}, 
	        React.createElement("span", {className: "mui-snackbar-message"}, this.props.message), 
	        action
	      )
	    );
	  },

	  show: function() {
	    this.setState({ open: true });
	  },
	  
	  dismiss: function() {
	    this.setState({ open: false });
	  }

	});

	module.exports = Snackbar;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var UniqueId = __webpack_require__(204);
	var EnhancedTextarea = __webpack_require__(205);

	var TextField = React.createClass({displayName: "TextField",

	  mixins: [Classable],

	  propTypes: {
	    errorText: React.PropTypes.string,
	    floatingLabelText: React.PropTypes.string,
	    hintText: React.PropTypes.string,
	    id: React.PropTypes.string,
	    multiLine: React.PropTypes.bool,
	    onBlur: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onEnterKeyDown: React.PropTypes.func,
	    type: React.PropTypes.string
	  },

	  getDefaultProps: function() {
	    return {
	      type: 'text'
	    };
	  },

	  getInitialState: function() {
	    return {
	      errorText: this.props.errorText,
	      hasValue: this.props.value || this.props.defaultValue ||
	        (this.props.valueLink && this.props.valueLink.value)
	    };
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var hasErrorProp = nextProps.hasOwnProperty('errorText');
	    var hasValueLinkProp = nextProps.hasOwnProperty('valueLink');
	    var hasValueProp = nextProps.hasOwnProperty('value');
	    var hasNewDefaultValue = nextProps.defaultValue !== this.props.defaultValue;
	    var newState = {};

	    if (hasValueProp) {
	      newState.hasValue = nextProps.value;
	    } else if (hasValueLinkProp) {
	      newState.hasValue = nextProps.valueLink.value;
	    } else if (hasNewDefaultValue) {
	      newState.hasValue = nextProps.defaultValue;
	    }

	    if (hasErrorProp) newState.errorText = nextProps.errorText;
	    if (newState) this.setState(newState);
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      this.props,className=$__0.className,errorText=$__0.errorText,floatingLabelText=$__0.floatingLabelText,hintText=$__0.hintText,id=$__0.id,multiLine=$__0.multiLine,onBlur=$__0.onBlur,onChange=$__0.onChange,onFocus=$__0.onFocus,type=$__0.type,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1,errorText:1,floatingLabelText:1,hintText:1,id:1,multiLine:1,onBlur:1,onChange:1,onFocus:1,type:1});

	    var classes = this.getClasses('mui-text-field', {
	      'mui-has-error': this.props.errorText,
	      'mui-has-floating-labels': this.props.floatingLabelText,
	      'mui-has-value': this.state.hasValue,
	      'mui-is-disabled': this.props.disabled,
	      'mui-is-focused': this.state.isFocused,
	      'mui-is-multiLine': this.props.multiLine
	    });

	    var inputId = this.props.id || UniqueId.generate();

	    var errorTextElement = this.state.errorText ? (
	      React.createElement("div", {className: "mui-text-field-error"}, this.state.errorText)
	    ) : null;

	    var hintTextElement = this.props.hintText ? (
	      React.createElement("div", {className: "mui-text-field-hint"}, this.props.hintText)
	    ) : null;

	    var floatingLabelTextElement = this.props.floatingLabelText ? (
	      React.createElement("label", {
	        className: "mui-text-field-floating-label", 
	        htmlFor: inputId}, 
	        this.props.floatingLabelText
	      )
	    ) : null;

	    var inputProps;
	    var inputElement;

	    inputProps = {
	      ref: 'input',
	      className: 'mui-text-field-input',
	      id: inputId,
	      onBlur: this._handleInputBlur,
	      onFocus: this._handleInputFocus,
	      onKeyDown: this._handleInputKeyDown
	    };

	    if (!this.props.hasOwnProperty('valueLink')) {
	      inputProps.onChange = this._handleInputChange;
	    }

	    inputElement = this.props.multiLine ? (
	      React.createElement(EnhancedTextarea, React.__spread({}, 
	        other, 
	        inputProps, 
	        {onHeightChange: this._handleTextAreaHeightChange, 
	        textareaClassName: "mui-text-field-textarea"}))
	    ) : (
	      React.createElement("input", React.__spread({}, 
	        other, 
	        inputProps, 
	        {type: this.props.type}))
	    );

	    return (
	      React.createElement("div", {className: classes}, 

	        floatingLabelTextElement, 
	        hintTextElement, 
	        inputElement, 

	        React.createElement("hr", {className: "mui-text-field-underline"}), 
	        React.createElement("hr", {className: "mui-text-field-focus-underline"}), 

	        errorTextElement

	      )
	    );
	  },

	  blur: function() {
	    if (this.isMounted()) this._getInputNode().blur();
	  },

	  clearValue: function() {
	    this.setValue('');
	  },

	  focus: function() {
	    if (this.isMounted()) this._getInputNode().focus();
	  },

	  getValue: function() {
	    return this.isMounted() ? this._getInputNode().value : undefined;
	  },

	  setErrorText: function(newErrorText) {
	    if (process.NODE_ENV !== 'production' && this.props.hasOwnProperty('errorText')) {
	      console.error('Cannot call TextField.setErrorText when errorText is defined as a property.');
	    } else if (this.isMounted()) {
	      this.setState({errorText: newErrorText});
	    }
	  },

	  setValue: function(newValue) {
	    if (process.NODE_ENV !== 'production' && this._isControlled()) {
	      console.error('Cannot call TextField.setValue when value or valueLink is defined as a property.');
	    } else if (this.isMounted()) {
	      this._getInputNode().value = newValue;
	      this.setState({hasValue: newValue});
	    }
	  },

	  _getInputNode: function() {
	    return this.props.multiLine ?
	      this.refs.input.getInputNode() : this.refs.input.getDOMNode();
	  },

	  _handleInputBlur: function(e) {
	    this.setState({isFocused: false});
	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleInputChange: function(e) {
	    this.setState({hasValue: e.target.value});
	    if (this.props.onChange) this.props.onChange(e);
	  },

	  _handleInputFocus: function(e) {
	    this.setState({isFocused: true});
	    if (this.props.onFocus) this.props.onFocus(e);
	  },

	  _handleInputKeyDown: function(e) {
	    if (e.keyCode === 13 && this.props.onEnterKeyDown) this.props.onEnterKeyDown(e);
	    if (this.props.onKeyDown) this.props.onKeyDown(e);
	  },

	  _handleTextAreaHeightChange: function(e, height) {
	    var newHeight = height + 24;
	    if (this.props.floatingLabelText) newHeight += 24;
	    this.getDOMNode().style.height = newHeight + 'px';
	  },

	  _isControlled: function() {
	    return this.props.hasOwnProperty('value') ||
	      this.props.hasOwnProperty('valueLink');
	  }

	});

	module.exports = TextField;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var Classable = __webpack_require__(57);
	var React = __webpack_require__(15);

	var Toolbar = React.createClass({displayName: "Toolbar",

	  mixins: [Classable],

	  render: function() {
	    var classes = this.getClasses('mui-toolbar', {
	    });

	    return (
	      React.createElement("div", {className: classes}, 
	        this.props.children
	      )
	    );
	  }

	});

	module.exports = Toolbar;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var Classable = __webpack_require__(57);
	var React = __webpack_require__(15);

	var ToolbarGroup = React.createClass({displayName: "ToolbarGroup",

	  propTypes: {
	    float: React.PropTypes.string
	  },

	  mixins: [Classable],

	  render: function() {

	    var classes = this.getClasses('mui-toolbar-group', {
	      'mui-left': this.props.float === 'left',
	      'mui-right': this.props.float === 'right'
	    });

	    return (
	      React.createElement("div", {className: classes}, 
	        this.props.children
	      )
	    );
	  }

	});

	module.exports = ToolbarGroup;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var Tooltip = React.createClass({displayName: "Tooltip",

	  mixins: [Classable],

	  propTypes: {
	    className: React.PropTypes.string,
	    label: React.PropTypes.string.isRequired,
	    show: React.PropTypes.bool,
	    touch: React.PropTypes.bool
	  },

	  componentDidMount: function() {
	    this._setRippleSize();
	  },

	  componentDidUpdate: function(prevProps, prevState) {
	    this._setRippleSize();
	  },

	  render: function() {
	    var $__0=
	      
	      
	         this.props,className=$__0.className,label=$__0.label,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1,label:1});
	    var classes = this.getClasses('mui-tooltip', {
	      'mui-is-shown': this.props.show,
	      'mui-is-touch': this.props.touch
	    });

	    return (
	      React.createElement("div", React.__spread({},  other, {className: classes}), 
	        React.createElement("div", {ref: "ripple", className: "mui-tooltip-ripple"}), 
	        React.createElement("span", {className: "mui-tooltip-label"}, this.props.label)
	      )
	    );
	  },

	  _setRippleSize: function() {
	    var ripple = this.refs.ripple.getDOMNode();
	    var tooltipSize = this.getDOMNode().offsetWidth;
	    var ripplePadding = this.props.touch ? 45 : 20;
	    var rippleSize = tooltipSize + ripplePadding + 'px';

	    if (this.props.show) {
	      ripple.style.height = rippleSize;
	      ripple.style.width = rippleSize;
	    } else {
	      ripple.style.width = '0px';
	      ripple.style.height = '0px';
	    }
	  }

	});

	module.exports = Tooltip;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var Events = __webpack_require__(79);

	module.exports = {

	  _testSupportedProps: function(props) {
	    var i,
	      undefined,
	      el = document.createElement('div');

	    for (i in props) {
	      if (props.hasOwnProperty(i) && el.style[i] !== undefined) {
	        return props[i];
	      }
	    }
	  },

	  //Returns the correct event name to use
	  transitionEndEventName: function() {
	    return this._testSupportedProps({
	      'transition':'transitionend',
	      'OTransition':'otransitionend',  
	      'MozTransition':'transitionend',
	      'WebkitTransition':'webkitTransitionEnd'
	    });
	  },

	  animationEndEventName: function() {
	    return this._testSupportedProps({
	      'animation': 'animationend',
	      '-o-animation': 'oAnimationEnd',
	      '-moz-animation': 'animationend',
	      '-webkit-animation': 'webkitAnimationEnd'
	    });
	  },

	  onTransitionEnd: function (el, callback) {
	    var transitionEnd = this.transitionEndEventName();

	    Events.once(el, transitionEnd, function() {
	      return callback();
	    });
	  },

	  onAnimationEnd: function (el, callback) {
	    var animationEnd = this.animationEndEventName();

	    Events.once(el, animationEnd, function() {
	      return callback();
	    });
	  }

	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {

	  isDescendant: function(parent, child) {
	    var node = child.parentNode;

	    while (node != null) {
	      if (node == parent) return true;
	      node = node.parentNode;
	    }

	    return false;
	  },

	  offset: function(el) {
	    var rect = el.getBoundingClientRect();
	    return {
	      top: rect.top + document.body.scrollTop,
	      left: rect.left + document.body.scrollLeft
	    };
	  },

	  addClass: function(el, className) {
	    if (el.classList)
	      el.classList.add(className);
	    else
	      el.className += ' ' + className;
	  },

	  removeClass: function(el, className) {
	    if (el.classList)
	      el.classList.remove(className);
	    else
	      el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
	  },

	  hasClass: function(el, className) {
	    if (el.classList)
	      return el.classList.contains(className);
	    else
	      return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
	  },

	  toggleClass: function(el, className) {
	    if (this.hasClass(el, className))
	      this.removeClass(el, className);
	    else
	      this.addClass(el, className);
	  },

	  forceRedraw: function(el) {
	    var originalDisplay = el.style.display;

	    el.style.display = 'none';
	    el.offsetHeight;
	    el.style.display = originalDisplay;
	  },

	  withoutTransition: function(el, callback) {
	    //turn off transition
	    el.style.transition = 'none';
	    
	    callback();

	    //force a redraw
	    this.forceRedraw(el);

	    //put the transition back
	    el.style.transition = '';
	  }
	  
	}

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {

	  once: function(el, type, callback) {
	    var typeArray = type.split(' ');
	    var recursiveFunction = function(e){
	      e.target.removeEventListener(e.type, recursiveFunction);
	      return callback(e);
	    };

	    for (var i = typeArray.length - 1; i >= 0; i--) {
	      this.on(el, typeArray[i], recursiveFunction);
	    }
	  },

	  // IE8+ Support
	  on: function(el, type, callback) {
	    if(el.addEventListener) {
	      el.addEventListener(type, callback);
	    } else {
	      el.attachEvent('on' + type, function() {
	        callback.call(el);
	      });
	    }
	  },

	  // IE8+ Support
	  off: function(el, type, callback) {
	    if(el.removeEventListener) {
	      el.removeEventListener(type, callback);
	    } else {
	      el.detachEvent('on' + type, callback);
	    }
	  }
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  DOWN: 40,
	  ESC: 27,
	  ENTER: 13,
	  LEFT: 37,
	  RIGHT: 39,
	  SPACE: 32,
	  TAB: 9,
	  UP: 38
	}

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {

	  Desktop: {
	    GUTTER: 24,
	    GUTTER_LESS: 16,
	    INCREMENT: 64,
	    MENU_ITEM_HEIGHT: 32
	  },

	  getIncrementalDim: function(dim) {
	    return Math.ceil(dim / this.Desktop.INCREMENT) * this.Desktop.INCREMENT;
	  }
	}


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    draining = true;
	    var currentQueue;
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        var i = -1;
	        while (++i < len) {
	            currentQueue[i]();
	        }
	        len = queue.length;
	    }
	    draining = false;
	}
	process.nextTick = function (fun) {
	    queue.push(fun);
	    if (!draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		FlexBlock = __webpack_require__(96),
		KeypadButton = __webpack_require__(206);

	var svg = {
		delIcon: '<?xml version="1.0" encoding="utf-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="-242 183.4 90 65.4" enable-background="new -242 183.4 90 65.4" xml:space="preserve"><path d="M-166,183.4H-205c-3.8,0-7.4,1.5-10.1,4.2l-25.6,25.6c-1.6,1.6-1.6,4.2,0,5.8l25.6,25.6c2.7,2.7,6.3,4.2,10.1,4.2h39.1c7.9,0,14-6.4,14-14.3v-36.8C-152,189.8-158.1,183.4-166,183.4 M-169.8,228.4l-4.3,4.3l-12.3-12.3l-12.3,12.3l-4.3-4.3l12.3-12.3l-12.3-12.3l4.3-4.3l12.3,12.3l12.3-12.3l4.3,4.3l-12.3,12.3L-169.8,228.4z"/></svg>'
	};

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			action: React.PropTypes.func,
			className: React.PropTypes.string,
			stowed: React.PropTypes.bool,
			enableDel: React.PropTypes.bool,
			style: React.PropTypes.string,
			wildkey: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				type: 'default'
			};
		},
		render: function() {

			var typeName = 'Keypad--' + this.props.type;

			var keypadClassName = classnames(typeName, {
				'Keypad': true,
				'is-stowed': this.props.stowed
			}, this.props.className);

			var wildkey = (this.props.wildkey && this.props.wildkey === 'decimal') ? (
				React.createElement(KeypadButton, {value: "decimal", primaryLabel: "·", aux: true})
			) : (
				React.createElement(KeypadButton, {aux: true, disabled: true})
			);

			var action = this.props.action;

			return (
				React.createElement(FlexBlock, {className: keypadClassName}, 
					React.createElement(KeypadButton, {action: function() { return action('1') }, primaryLabel: "1"}), 
					React.createElement(KeypadButton, {action: function() { return action('2') }, primaryLabel: "2", secondaryLabel: "ABC"}), 
					React.createElement(KeypadButton, {action: function() { return action('3') }, primaryLabel: "3", secondaryLabel: "DEF"}), 
					React.createElement(KeypadButton, {action: function() { return action('4') }, primaryLabel: "4", secondaryLabel: "GHI"}), 
					React.createElement(KeypadButton, {action: function() { return action('5') }, primaryLabel: "5", secondaryLabel: "JKL"}), 
					React.createElement(KeypadButton, {action: function() { return action('6') }, primaryLabel: "6", secondaryLabel: "MNO"}), 
					React.createElement(KeypadButton, {action: function() { return action('7') }, primaryLabel: "7", secondaryLabel: "PQRS"}), 
					React.createElement(KeypadButton, {action: function() { return action('8') }, primaryLabel: "8", secondaryLabel: "TUV"}), 
					React.createElement(KeypadButton, {action: function() { return action('9') }, primaryLabel: "9", secondaryLabel: "WXYZ"}), 
					wildkey, 
					React.createElement(KeypadButton, {action: function() { return action('0') }, primaryLabel: "0"}), 
					React.createElement(KeypadButton, {action: function() { return action('delete') }, svgIcon: svg.delIcon, disabled: !this.props.enableDel, aux: true})
				)
			);
		}
	});


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		Keypad = __webpack_require__(83),
		FlexBlock = __webpack_require__(96);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			action: React.PropTypes.func,
			className: React.PropTypes.string,
			keyboardIsStowed: React.PropTypes.bool,
			type: React.PropTypes.string,
			helpText: React.PropTypes.string
		},

		getDefaultProps: function() {
			return {
				className: '',
				helpText: 'Enter your passcode',
				type: 'default'
			};
		},

		getInitialState: function() {
			return {
				helpText: this.props.helpText,
				keyboardIsStowed: true,
				passcode: ''
			}
		},

		componentDidMount: function() {
			// slide the keyboard up after the view is shown
			setTimeout(function() {
				if (!this.isMounted()) return;
				this.setState({
					keyboardIsStowed: false
				});
			}.bind(this), 400);
		},

		handlePasscode: function(keyCode) {

			var passcode = this.state.passcode

			if (keyCode === 'delete') {
				passcode = passcode.slice(0, -1)

			} else {
				passcode = passcode.concat(keyCode)
			}

			if (passcode.length !== 4) {
				return this.setState({
					passcode: passcode
				})
			}

			setTimeout(function() {
				return this.props.action(passcode)
			}.bind(this), 200); // the transition that stows the keyboard takes 150ms, it freezes if interrupted by the ReactCSSTransitionGroup

			return this.setState({
				passcode: passcode
			})
		},
		
		render: function() {

			var passcodeClassName = classnames(this.props.type, {
				'Passcode': true
			});

			return (
				React.createElement(FlexBlock, null, 
					React.createElement("div", {className: passcodeClassName}, 
						React.createElement("div", {className: "Passcode-label"}, this.props.helpText), 
						React.createElement("div", {className: "Passcode-fields"}, 
							React.createElement("div", {className: "Passcode-field"}, 
								React.createElement("div", {className: "Passcode-input " + ((this.state.passcode.length > 0) ? "has-value" : "")})
							), 
							React.createElement("div", {className: "Passcode-field"}, 
								React.createElement("div", {className: "Passcode-input " + ((this.state.passcode.length > 1) ? "has-value" : "")})
							), 
							React.createElement("div", {className: "Passcode-field"}, 
								React.createElement("div", {className: "Passcode-input " + ((this.state.passcode.length > 2) ? "has-value" : "")})
							), 
							React.createElement("div", {className: "Passcode-field"}, 
								React.createElement("div", {className: "Passcode-input " + ((this.state.passcode.length > 3) ? "has-value" : "")})
							)
						)
					), 
					React.createElement(Keypad, {type: this.props.type, action: this.handlePasscode, enableDel: Boolean(this.state.passcode.length), stowed: this.state.keyboardIsStowed})
				)
			);
		}
	});



/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		Tappable = __webpack_require__(30),
		Navigation = __webpack_require__(22);

	module.exports = React.createClass({displayName: "exports",
		mixins: [Navigation],
		propTypes: {
			className: React.PropTypes.string,
			showView: React.PropTypes.string,
			viewTransition: React.PropTypes.string,
			viewProps: React.PropTypes.object,
			component: React.PropTypes.string,
			onTap: React.PropTypes.func,
			type: React.PropTypes.string,
			disabled: React.PropTypes.bool,
			loading: React.PropTypes.bool,
			label: React.PropTypes.string
		},
		render: function() {
			// Class Name
			var className = classnames(this.props.className, this.props.type, {
				'loading-button': true,
				'disabled': this.props.disabled,
				'is-loading': this.props.loading
			});

			// Set Variables
			var label = this.props.label ? React.createElement("div", {className: "loading-button-text"}, this.props.label) : null;
			var onTap = this.props.showView ? this.showViewFn(this.props.showView, this.props.viewTransition, this.props.viewProps) : this.props.onTap;

			// Output Component
			return (
				React.createElement(Tappable, {className: className, component: this.props.component, onTap: onTap}, 
					React.createElement("span", {className: "loading-button-icon-wrapper"}, 
						React.createElement("span", {className: "loading-button-icon"})
					), 
					label
				)
			);
		}
	});


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		Tappable = __webpack_require__(30);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			iconKey: React.PropTypes.string,
			iconType: React.PropTypes.string,
			header: React.PropTypes.string,
			subheader: React.PropTypes.string,
			text: React.PropTypes.string,
			actionText: React.PropTypes.string,
			actionFn: React.PropTypes.func
		},
		getDefaultProps: function() {
			return {
				className: ''
			};
		},
		render: function() {
			var className = this.props.className ? ('view-feedback ' + this.props.className) : 'view-feedback';

			var icon = this.props.iconKey ? React.createElement("div", {className: 'view-feedback-icon ' + this.props.iconKey + ' ' + this.props.iconType}) : null;
			var header = this.props.header ? React.createElement("div", {className: "view-feedback-header"}, this.props.header) : null;
			var subheader = this.props.subheader ? React.createElement("div", {className: "view-feedback-subheader"}, this.props.subheader) : null;
			var text = this.props.text ? React.createElement("div", {className: "view-feedback-text", dangerouslySetInnerHTML: {__html: this.props.text}}) : null;
			var action = this.props.actionText ? React.createElement(Tappable, {onTap: this.props.actionFn, className: "view-feedback-action"}, this.props.actionText) : null;

			return (
				React.createElement("div", {className: className}, 
					icon, 
					header, 
					subheader, 
					text, 
					action
				)
			);
		}
	});


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */

	var React = __webpack_require__(15),
		classnames = __webpack_require__(7),
		Tappable = __webpack_require__(30);

	module.exports = React.createClass({
		displayName: 'Toggle',

		propTypes: {
			options: React.PropTypes.array,
			className: React.PropTypes.string,
			type: React.PropTypes.string,
			value: React.PropTypes.string,
			onChange: React.PropTypes.func
		},

		getDefaultProps: function() {
			return {
				type: 'primary'
			};
		},

		onChange: function(value) {
			this.props.onChange(value);
		},

		render: function() {

			var componentClassName = classnames(this.props.className, this.props.type, {
				'Toggle': true
			});

			var options = this.props.options.map(function(op) {
				var itemClassName = classnames({
					'Toggle-item': true,
					'active': op.value === this.props.value
				});
				return (
					React.createElement(Tappable, {key: 'option-' + op.value, onTap: this.onChange.bind(this, op.value), className: itemClassName}, 
						op.label
					)
				);
			}.bind(this));

			return React.createElement("div", {className: componentClassName}, options);

		}

	});


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		Tappable = __webpack_require__(30);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			visible: React.PropTypes.bool,
			iconKey: React.PropTypes.string,
			iconType: React.PropTypes.string,
			header: React.PropTypes.string,
			text: React.PropTypes.string,
			primaryActionText: React.PropTypes.string,
			primaryActionFn: React.PropTypes.func,
			secondaryActionText: React.PropTypes.string,
			secondaryActionFn: React.PropTypes.func
		},
		getDefaultProps: function() {
			return {
				className: ''
			};
		},
		render: function() {
			if (!this.props.visible) return null

			var className = this.props.className ? ('Modal-dialog ' + this.props.className) : 'Modal-dialog';

			var icon = this.props.iconKey ? React.createElement("div", {className: 'Modal-icon ' + this.props.iconKey + ' ' + this.props.iconType}) : null;
			var header = this.props.header ? React.createElement("div", {className: "Modal-header"}, this.props.header) : null;
			var text = this.props.text ? React.createElement("div", {className: "Modal-text", dangerouslySetInnerHTML: {__html: this.props.text}}) : null;
			var primaryAction = this.props.primaryActionText ? React.createElement(Tappable, {onTap: this.props.primaryActionFn, className: "Modal-action Modal-action-primary"}, this.props.primaryActionText) : null;
			var secondaryAction = this.props.secondaryActionText ? React.createElement(Tappable, {onTap: this.props.secondaryActionFn, className: "Modal-action Modal-action-secondary"}, this.props.secondaryActionText) : null;

			var actions = primaryAction ? ( React.createElement("div", {className: "Modal-actions"}, 
				secondaryAction, 
				primaryAction
			) ) : null;

			return (
				React.createElement("div", null, 
					React.createElement("div", {className: 'Modal visible'}, 
						React.createElement("div", {className: className}, 
							icon, 
							header, 
							text, 
							actions
						), 
						React.createElement("div", {className: "Modal-backdrop"})
					)
				)
			);
		}
	});


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9);

	module.exports = React.createClass({
		displayName: 'ActionButtons',
		propTypes: {
			className: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				className: ''
			};
		},
		render: function() {
			var className = this.props.className ? (this.props.className + ' action-buttons') : 'action-buttons';
			return React.createElement("div", {className: className}, this.props.children);
		}
	});


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		Tappable = __webpack_require__(30),
		Navigation = __webpack_require__(22);

	module.exports = React.createClass({
		displayName: 'ActionButton',
		mixins: [Navigation],
		propTypes: {
			className: React.PropTypes.string,
			component: React.PropTypes.string,
			showView: React.PropTypes.string,
			viewTransition: React.PropTypes.string,
			viewProps: React.PropTypes.object,
			disabled: React.PropTypes.bool,
			onTap: React.PropTypes.func,
			label: React.PropTypes.string,
			icon: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				component: 'button',
				disabled: false
			};
		},
		render: function() {
			var className = classnames(this.props.className, this.props.icon, {
				'action-button': true
			});

			var label = this.props.label ? React.createElement("div", {className: "action-button-label"}, this.props.label) : null;
			var action = this.props.showView ? this.showViewFn(this.props.showView, this.props.viewTransition, this.props.viewProps) : this.props.onTap;

			return (
				React.createElement("div", {className: "action-button-cell"}, 
					React.createElement(Tappable, {className: className, component: this.props.component, onTap: action, disabled: this.props.disabled}, 
						label, 
						this.props.children
					)
				)
			);
		}
	});


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		FlexBlock = __webpack_require__(96);

	module.exports = React.createClass({
		displayName: 'Headerbar',
		propTypes: {
			className: React.PropTypes.string,
			height: React.PropTypes.string,
			label: React.PropTypes.string,
			type: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				height: '44px',
				type: 'default'
			};
		},
		render: function() {
			var className = classnames(this.props.className, this.props.type, {
				'Headerbar': true
			});
			var label = this.props.label ? React.createElement("div", {className: "Headerbar-label"}, this.props.label) : null;

			return (
				React.createElement(FlexBlock, {height: this.props.height, className: className}, 
					label, 
					this.props.children
				)
			);
		}
	});


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		Tappable = __webpack_require__(30),
		Navigation = __webpack_require__(22);

	module.exports = React.createClass({
		displayName: 'HeaderbarButton',
		mixins: [Navigation],
		propTypes: {
			className: React.PropTypes.string,
			component: React.PropTypes.string,
			showView: React.PropTypes.string,
			viewTransition: React.PropTypes.string,
			viewProps: React.PropTypes.object,
			disabled: React.PropTypes.bool,
			visible: React.PropTypes.bool,
			primary: React.PropTypes.bool,
			onTap: React.PropTypes.func,
			position: React.PropTypes.string,
			label: React.PropTypes.string,
			icon: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				visible: true,
				disabled: false
			};
		},
		render: function() {
			var className = classnames(this.props.className, this.props.position, this.props.icon, {
				'Headerbar-button': true,
				'hidden': !this.props.visible,
				'disabled': this.props.disabled,
				'is-primary': this.props.primary
			});

			var label = this.props.label ? React.createElement("div", {className: "action-button-label"}, this.props.label) : null;
			var action = this.props.showView ? this.showViewFn(this.props.showView, this.props.viewTransition, this.props.viewProps) : this.props.onTap;

			return (
				React.createElement(Tappable, {onTap: action, className: className, component: this.props.component}, 
					this.props.label, 
					this.props.children
				)
			);
		}
	});


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		FlexBlock = __webpack_require__(96);

	module.exports = React.createClass({
		displayName: 'Footerbar',
		propTypes: {
			className: React.PropTypes.string,
			height: React.PropTypes.string,
			type: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				height: '44px'
			};
		},
		render: function() {
			var className = classnames(this.props.className, this.props.type, {
				'Footerbar': true
			});

			return (
				React.createElement(FlexBlock, {height: this.props.height, className: className}, 
					this.props.children
				)
			);
		}
	});


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		Tappable = __webpack_require__(30),
		Navigation = __webpack_require__(22);

	module.exports = React.createClass({
		displayName: 'ActionButton',
		mixins: [Navigation],
		propTypes: {
			className: React.PropTypes.string,
			component: React.PropTypes.string,
			showView: React.PropTypes.string,
			viewTransition: React.PropTypes.string,
			viewProps: React.PropTypes.object,
			disabled: React.PropTypes.bool,
			onTap: React.PropTypes.func,
			label: React.PropTypes.string,
			icon: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				component: 'div',
				disabled: false
			};
		},
		render: function() {
			var className = classnames(this.props.className, this.props.icon, {
				'Footerbar-button': true
			});

			var label = this.props.label ? React.createElement("div", {className: "Footerbar-button-label"}, this.props.label) : null;
			var action = this.props.showView ? this.showViewFn(this.props.showView, this.props.viewTransition, this.props.viewProps) : this.props.onTap;

			return (
				React.createElement(Tappable, {className: className, component: this.props.component, onTap: action, disabled: this.props.disabled}, 
					label, 
					this.props.children
				)
			);
		}
	});


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9);

	module.exports = React.createClass({

		displayName: 'FlexContainer',

		propTypes: {
			className: React.PropTypes.string
		},

		getDefaultProps: function() {
			return {
				className: ''
			};
		},

		render: function() {

			var className = this.props.className ? ('FlexLayout ' + this.props.className) : 'FlexLayout';

			// react does not currently support duplicate properties (which we need for vendor-prefixed values)
			// see https://github.com/facebook/react/issues/2020
			// moved the display properties to css/touchstone/view.less using the class ".FlexLayout"

			// when supported, apply the following:
			// display: '-webkit-box',
			// display: '-webkit-flex',
			// display: '-moz-box',
			// display: '-moz-flex',
			// display: '-ms-flexbox',
			// display: 'flex',

			var inlineStyle = {
				WebkitFlexDirection: 'column',
				MozFlexDirection: 'column',
				msFlexDirection: 'column',
				FlexDirection: 'column',
				WebkitAlignItems: 'stretch',
				MozAlignItems: 'stretch',
				AlignItems: 'stretch',
				WebkitJustifyContent: 'space-between',
				MozJustifyContent: 'space-between',
				JustifyContent: 'space-between'
			}

			return React.createElement("div", {className: className, style: inlineStyle}, this.props.children);

		}

	});


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({
		displayName: 'FlexBlock',
		propTypes: {
			className: React.PropTypes.string,
			height: React.PropTypes.string,
			scrollable: React.PropTypes.bool
		},

		getDefaultProps: function() {
			return {
				className: '',
				height: ''
			};
		},

		render: function() {
			var className = classnames((this.props.scrollable ? 'springy-scrolling' : ''), this.props.className);
			var inlineStyle = {};

			// set height on blocks if provided
			if (this.props.height) {
				inlineStyle.height = this.props.height;

			// otherwise stretch to take up space
			} else {
				inlineStyle.WebkitBoxFlex = '1';
				inlineStyle.WebkitFlex = '1';
				inlineStyle.MozBoxFlex = '1';
				inlineStyle.MozFlex = '1';
				inlineStyle.MsFlex = '1';
				inlineStyle.flex = '1';
			}

			// allow blocks to be scrollable
			if (this.props.scrollable) {
				inlineStyle.overflowY = 'auto';
				inlineStyle.WebkitOverflowScrolling = 'touch';
			}

			return React.createElement("div", {className: className, style: inlineStyle}, this.props.children);
		}
	});


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */

	var React = __webpack_require__(15),
		Tappable = __webpack_require__(30);

	module.exports = React.createClass({
		displayName: 'RadioList',

		propTypes: {
			options: React.PropTypes.array,
			value: React.PropTypes.string,
			icon: React.PropTypes.string,
			onChange: React.PropTypes.func
		},

		onChange: function(value) {
			this.props.onChange(value);
		},

		render: function() {

			var options = this.props.options.map(function(op, i) {
				var className = 'list-item' + (i === 0 ? ' is-first' : '');
				var checkMark = op.value === this.props.value ? (
						React.createElement("div", {className: "item-note primary"}, 
							React.createElement("div", {className: "item-note-icon ion-checkmark"})
						)
					) : null;

				var icon = op.icon ? (React.createElement("div", {className: "item-media"}, 
						React.createElement("span", {className: 'item-icon primary ' + op.icon})
					)) : null

				return (
					React.createElement(Tappable, {key: 'option-' + i, onTap: this.onChange.bind(this, op.value), className: className}, 
						icon, 
						React.createElement("div", {className: "item-inner"}, 
							React.createElement("div", {className: "item-title"}, op.label), 
							checkMark
						)
					)
				);
			}.bind(this));

			return React.createElement("div", null, options);

		}

	});


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			onChange: React.PropTypes.func,
			type: React.PropTypes.string,
			ref: React.PropTypes.string,
			pattern: React.PropTypes.string,
			value: React.PropTypes.any,
			defaultValue: React.PropTypes.any,
			readonly: React.PropTypes.bool,
			disabled: React.PropTypes.bool,
			first: React.PropTypes.bool
		},
		getDefaultProps: function() {
			return {
				type: 'text',
				readonly: false
			};
		},
		render: function() {
			var className = classnames(this.props.className, {
				'list-item': true,
				'is-first': this.props.first,
				'u-selectable': this.props.disabled || this.props.readonly
			});

			return (
				React.createElement("div", {className: className}, 
					React.createElement("div", {className: "item-inner"}, 
						React.createElement("label", {className: "item-content"}, 
							React.createElement("input", {disabled: this.props.disabled || this.props.readonly, ref: this.props.ref, type: this.props.type, pattern: this.props.pattern, value: this.props.value, defaultValue: this.props.defaultValue, onChange: this.props.onChange, className: "field", placeholder: this.props.placeholder})
						), 
						this.props.children
					)
				)
			);
		}
	});


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			defaultValue: React.PropTypes.string,
			first: React.PropTypes.bool,
			label: React.PropTypes.string,
			inputRef: React.PropTypes.string,
			onChange: React.PropTypes.func,
			readonly: React.PropTypes.bool,
			disabled: React.PropTypes.bool,
			rows: React.PropTypes.number,
			value: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				className: '',
				rows: 3
			};
		},
		render: function() {
			var className = classnames(this.props.className, {
				'list-item': true,
				'is-first': this.props.first,
				'u-selectable': this.props.disabled || this.props.readonly
			});

			return (
				React.createElement("div", {className: className}, 
					React.createElement("div", {className: "item-inner"}, 
						React.createElement("label", {className: "item-content"}, 
							React.createElement("textarea", {ref: this.props.inputRef, disabled: this.props.disabled || this.props.readonly, value: this.props.value, defaultValue: this.props.defaultValue, onChange: this.props.onChange, placeholder: this.props.placeholder, rows: this.props.rows, className: "field"})
						), 
						this.props.children
					)
				)
			);
		}
	});


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			onChange: React.PropTypes.func,
			type: React.PropTypes.string,
			label: React.PropTypes.string,
			pattern: React.PropTypes.string,
			placeholder: React.PropTypes.string,
			ref: React.PropTypes.string,
			readonly: React.PropTypes.bool,
			disabled: React.PropTypes.bool,
			first: React.PropTypes.bool
		},
		getDefaultProps: function() {
			return {
				type: 'text',
				readonly: false
			};
		},
		render: function() {
			var className = classnames(this.props.className, {
				'list-item': true,
				'field-item': true,
				'is-first': this.props.first,
				'u-selectable': this.props.disabled
			});

			var renderInput = this.props.readonly ? (
				React.createElement("div", {className: "field u-selectable"}, this.props.value)
			) : (
				React.createElement("input", {disabled: this.props.disabled, type: this.props.type, pattern: this.props.pattern, ref: this.props.ref, value: this.props.value, defaultValue: this.props.defaultValue, onChange: this.props.onChange, className: "field", placeholder: this.props.placeholder})
			);

			return (
				React.createElement("label", {className: className}, 
					React.createElement("div", {className: "item-inner"}, 
						React.createElement("div", {className: "field-label"}, this.props.label), 
						React.createElement("div", {className: "field-control"}, 
							renderInput, 
							this.props.children
						)
					)
				)
			);
		}
	});


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			label: React.PropTypes.string,
			first: React.PropTypes.bool
		},
		getDefaultProps: function() {
			return {
				className: ''
			};
		},
		getInitialState: function() {
			return {
				value: this.props.value
			};
		},
		updateInputValue: function(event) {
			this.setState({
				value: event.target.value
			});
		},
		render: function() {
			// Set Classes
			var className = classnames(this.props.className, {
				'list-item': true,
				'is-first': this.props.first
			});

			// Map Options
			var options = this.props.options.map(function(op) {
				return (
					React.createElement("option", {key: 'option-' + op.value, value: op.value}, 
						op.label
					)
				);
			}.bind(this));

			return (
				React.createElement("label", {className: className}, 
					React.createElement("div", {className: "item-inner"}, 
						React.createElement("div", {className: "field-label"}, this.props.label), 
						React.createElement("div", {className: "field-control"}, 
							React.createElement("select", {value: this.state.value, onChange: this.updateInputValue, className: "select-field"}, 
								options
							), 
							React.createElement("div", {className: "select-field-indicator"}, 
								React.createElement("div", {className: "select-field-indicator-arrow"})
							)
						)
					)
				)
			);
		}
	});


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7);

	module.exports = React.createClass({displayName: "exports",
		propTypes: {
			className: React.PropTypes.string,
			onChange: React.PropTypes.func,
			type: React.PropTypes.string,
			label: React.PropTypes.string,
			noedit: React.PropTypes.bool,
			first: React.PropTypes.bool
		},
		getDefaultProps: function() {
			return {
				className: '',
				rows: 3
			};
		},
		render: function() {
			var className = classnames(this.props.className, {
				'list-item': true,
				'field-item': true,
				'is-first': this.props.first,
				'u-selectable': this.props.disabled || this.props.readonly
			});

			var renderInput = this.props.readonly ? (
				React.createElement("div", {className: "field u-selectable"}, this.props.value)
			) : (
				React.createElement("textarea", {disabled: this.props.disabled, value: this.props.value, defaultValue: this.props.defaultValue, onChange: this.props.onChange, placeholder: this.props.placeholder, rows: this.props.rows, className: "field"})
			);

			return (
				React.createElement("div", {className: className}, 
					React.createElement("label", {className: "item-inner"}, 
						React.createElement("div", {className: "field-label"}, this.props.label), 
						React.createElement("div", {className: "field-control"}, 
							renderInput, 
							this.props.children
						)
					)
				)
			);
		}
	});


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);

	var invariant = __webpack_require__(107);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(207);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPluginHub = __webpack_require__(26);

	var accumulateInto = __webpack_require__(105);
	var forEachAccumulated = __webpack_require__(106);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(208);

	var assign = __webpack_require__(142);
	var emptyFunction = __webpack_require__(209);
	var getEventTarget = __webpack_require__(210);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(110);

	var getEventTarget = __webpack_require__(210);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TouchEventUtils
	 */

	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;

	    return !hasTouches && hasChangedTouches ? changedTouches[0] :
	           hasTouches ? touches[0] :
	           nativeEvent;
	  }
	};

	module.exports = TouchEventUtils;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(211);
	var ReactStateSetters = __webpack_require__(212);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	'use strict';

	var shallowEqual = __webpack_require__(213);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(33);

	var assign = __webpack_require__(142);

	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(119)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(214)
	);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        appear: this.props.transitionAppear,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(131);

	var warning = __webpack_require__(215);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(33);
	var ReactTransitionChildMapping = __webpack_require__(216);

	var assign = __webpack_require__(142);
	var cloneWithProps = __webpack_require__(122);
	var emptyFunction = __webpack_require__(209);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(
	        this._handleDoneAppearing.bind(this, key)
	      );
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key, key: key}
	        ));
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(217);
	var PooledClass = __webpack_require__(208);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactPerf = __webpack_require__(138);
	var ReactReconciler = __webpack_require__(140);
	var Transaction = __webpack_require__(218);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);
	var warning = __webpack_require__(215);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */

	'use strict';
	var warning = __webpack_require__(215);

	var warned = false;

	function cx(classNames) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      warned,
	      'React.addons.classSet will be deprecated in a future version. See ' +
	      'http://fb.me/react-addons-classset'
	    ) : null);
	    warned = true;
	  }

	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactPropTransferer = __webpack_require__(219);

	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(215);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	'use strict';

	var assign = __webpack_require__(142);
	var keyOf = __webpack_require__(111);
	var invariant = __webpack_require__(107);

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (spec.hasOwnProperty(COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (spec.hasOwnProperty(COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (spec.hasOwnProperty(COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(220);
	var ReactDefaultPerfAnalysis = __webpack_require__(221);
	var ReactMount = __webpack_require__(137);
	var ReactPerf = __webpack_require__(138);

	var performanceNow = __webpack_require__(222);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPluginHub = __webpack_require__(26);
	var EventPropagators = __webpack_require__(109);
	var React = __webpack_require__(33);
	var ReactElement = __webpack_require__(131);
	var ReactEmptyComponent = __webpack_require__(223);
	var ReactBrowserEventEmitter = __webpack_require__(224);
	var ReactCompositeComponent = __webpack_require__(225);
	var ReactInstanceHandles = __webpack_require__(136);
	var ReactInstanceMap = __webpack_require__(226);
	var ReactMount = __webpack_require__(137);
	var ReactUpdates = __webpack_require__(120);
	var SyntheticEvent = __webpack_require__(110);

	var assign = __webpack_require__(142);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },

	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor
	    );
	  },

	  isDOMComponent: function(inst) {
	    // TODO: Fix this heuristic. It's just here because composites can currently
	    // pretend to be DOM components.
	    return !!(inst && inst.tagName && inst.getDOMNode);
	  },

	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type));
	  },

	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },

	  getRenderedChildOfCompositeComponent: function(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var internalInstance = ReactInstanceMap.get(inst);
	      var renderedChildren = internalInstance
	        ._renderedComponent
	        ._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        if (!renderedChildren[key].getPublicInstance) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(
	            renderedChildren[key].getPublicInstance(),
	            test
	          )
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(
	          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
	          test
	        )
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' +
	        '(found: ' + all.length + ') for class:' + className
	      );
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";

	    module.prototype.render.mockImplementation(function() {
	      return React.createElement(
	        mockTagName,
	        null,
	        this.props.children
	      );
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  createRenderer: function() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function() {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function() {
	  return (
	    (this._instance && this._instance._renderedComponent &&
	     this._instance._renderedComponent._renderedOutput)
	    || null
	  );
	};

	var NoopInternalComponent = function(element) {
	  this._renderedOutput = element;
	  this._currentElement = element === null || element === false ?
	    ReactEmptyComponent.emptyElement :
	    element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function() {
	  },

	  receiveComponent: function(element) {
	    this._renderedOutput = element;
	    this._currentElement = element === null || element === false ?
	      ReactEmptyComponent.emptyElement :
	      element;
	  },

	  unmountComponent: function() {
	  }

	};

	var ShallowComponentWrapper = function() { };
	assign(
	  ShallowComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin, {
	    _instantiateReactComponent: function(element) {
	      return new NoopInternalComponent(element);
	    },
	    _replaceNodeWithMarkupByID: function() {},
	    _renderValidatedComponent:
	      ReactCompositeComponent.Mixin.
	        _renderValidatedComponentWithoutOwnerOrContext
	  }
	);

	ReactShallowRenderer.prototype.render = function(element, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function() {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function(element, transaction, context) {
	  if (!this._instance) {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  } else {
	    this._instance.receiveComponent(element, transaction, context);
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(208);
	var ReactFragment = __webpack_require__(118);

	var traverseAllChildren = __webpack_require__(227);
	var warning = __webpack_require__(215);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(232);

	var invariant = __webpack_require__(107);
	var warning = __webpack_require__(215);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: 'getDOMNode',
	    isMounted: 'isMounted',
	    replaceProps: 'replaceProps',
	    replaceState: 'replaceState',
	    setProps: 'setProps'
	  };
	  var defineDeprecationWarning = function(methodName, displayName) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes.',
	            displayName
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(127);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactElement = __webpack_require__(131);
	var ReactErrorUtils = __webpack_require__(228);
	var ReactInstanceMap = __webpack_require__(226);
	var ReactLifeCycle = __webpack_require__(229);
	var ReactPropTypeLocations = __webpack_require__(230);
	var ReactPropTypeLocationNames = __webpack_require__(231);
	var ReactUpdateQueue = __webpack_require__(232);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);
	var keyMirror = __webpack_require__(207);
	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(215);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: http://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(142);
	var emptyObject = __webpack_require__(233);
	var warning = __webpack_require__(215);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(129);
	var ReactCurrentOwner = __webpack_require__(130);

	var assign = __webpack_require__(142);
	var warning = __webpack_require__(215);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactFragment = __webpack_require__(118);
	var ReactPropTypeLocations = __webpack_require__(230);
	var ReactPropTypeLocationNames = __webpack_require__(231);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactNativeComponent = __webpack_require__(234);

	var getIteratorFn = __webpack_require__(235);
	var invariant = __webpack_require__(107);
	var warning = __webpack_require__(215);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See http://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. ' +
	    'Instead, specify the correct value when ' +
	    'initially creating the element.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactElementValidator = __webpack_require__(132);

	var mapObject = __webpack_require__(236);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(237);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(238);
	var ReactDOMComponent = __webpack_require__(239);

	var assign = __webpack_require__(142);
	var escapeTextContentForBrowser = __webpack_require__(240);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(241);
	var ChangeEventPlugin = __webpack_require__(242);
	var ClientReactRootIndex = __webpack_require__(243);
	var DefaultEventPluginOrder = __webpack_require__(244);
	var EnterLeaveEventPlugin = __webpack_require__(245);
	var ExecutionEnvironment = __webpack_require__(145);
	var HTMLDOMPropertyConfig = __webpack_require__(246);
	var MobileSafariClickEventPlugin = __webpack_require__(247);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(238);
	var ReactDefaultBatchingStrategy = __webpack_require__(249);
	var ReactDOMComponent = __webpack_require__(239);
	var ReactDOMButton = __webpack_require__(250);
	var ReactDOMForm = __webpack_require__(251);
	var ReactDOMImg = __webpack_require__(252);
	var ReactDOMIDOperations = __webpack_require__(253);
	var ReactDOMIframe = __webpack_require__(254);
	var ReactDOMInput = __webpack_require__(255);
	var ReactDOMOption = __webpack_require__(256);
	var ReactDOMSelect = __webpack_require__(257);
	var ReactDOMTextarea = __webpack_require__(258);
	var ReactDOMTextComponent = __webpack_require__(134);
	var ReactElement = __webpack_require__(131);
	var ReactEventListener = __webpack_require__(259);
	var ReactInjection = __webpack_require__(260);
	var ReactInstanceHandles = __webpack_require__(136);
	var ReactMount = __webpack_require__(137);
	var ReactReconcileTransaction = __webpack_require__(261);
	var SelectEventPlugin = __webpack_require__(262);
	var ServerReactRootIndex = __webpack_require__(263);
	var SimpleEventPlugin = __webpack_require__(264);
	var SVGDOMPropertyConfig = __webpack_require__(265);

	var createFullPageComponent = __webpack_require__(266);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(124);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(267);

	var invariant = __webpack_require__(107);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(220);
	var ReactBrowserEventEmitter = __webpack_require__(224);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactElement = __webpack_require__(131);
	var ReactElementValidator = __webpack_require__(132);
	var ReactEmptyComponent = __webpack_require__(223);
	var ReactInstanceHandles = __webpack_require__(136);
	var ReactInstanceMap = __webpack_require__(226);
	var ReactMarkupChecksum = __webpack_require__(268);
	var ReactPerf = __webpack_require__(138);
	var ReactReconciler = __webpack_require__(140);
	var ReactUpdateQueue = __webpack_require__(232);
	var ReactUpdates = __webpack_require__(120);

	var emptyObject = __webpack_require__(233);
	var containsNode = __webpack_require__(269);
	var getReactRootElementInContainer = __webpack_require__(270);
	var instantiateReactComponent = __webpack_require__(271);
	var invariant = __webpack_require__(107);
	var setInnerHTML = __webpack_require__(272);
	var shouldUpdateReactComponent = __webpack_require__(273);
	var warning = __webpack_require__(215);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactFragment = __webpack_require__(118);
	var ReactPropTypeLocationNames = __webpack_require__(231);

	var emptyFunction = __webpack_require__(209);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(274);
	var ReactElementValidator = __webpack_require__(132);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactInstanceHandles = __webpack_require__(136);
	var ReactMarkupChecksum = __webpack_require__(268);
	var ReactServerRenderingTransaction =
	  __webpack_require__(275);

	var emptyObject = __webpack_require__(233);
	var instantiateReactComponent = __webpack_require__(271);
	var invariant = __webpack_require__(107);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(130);
	var ReactInstanceMap = __webpack_require__(226);
	var ReactMount = __webpack_require__(137);

	var invariant = __webpack_require__(107);
	var isNode = __webpack_require__(276);
	var warning = __webpack_require__(215);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(131);

	var invariant = __webpack_require__(107);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var React = __webpack_require__(15);
	var ReactUpdates = __webpack_require__(120);
	var invariant = __webpack_require__(107);
	var ContainerMixin = __webpack_require__(337);
	var RenderLayer = __webpack_require__(338);
	var FrameUtils = __webpack_require__(339);
	var DrawingUtils = __webpack_require__(340);
	var hitTest = __webpack_require__(341);
	var layoutNode = __webpack_require__(342);

	/**
	 * Surface is a standard React component and acts as the main drawing canvas.
	 * ReactCanvas components cannot be rendered outside a Surface.
	 */

	var Surface = React.createClass({displayName: "Surface",

	  mixins: [ContainerMixin],

	  propTypes: {
	    top: React.PropTypes.number.isRequired,
	    left: React.PropTypes.number.isRequired,
	    width: React.PropTypes.number.isRequired,
	    height: React.PropTypes.number.isRequired,
	    scale: React.PropTypes.number.isRequired,
	    enableCSSLayout: React.PropTypes.bool
	  },

	  getDefaultProps: function () {
	    return {
	      scale: window.devicePixelRatio || 1
	    };
	  },

	  componentDidMount: function () {
	    // Prepare the <canvas> for drawing.
	    this.scale();

	    // ContainerMixin expects `this.node` to be set prior to mounting children.
	    // `this.node` is injected into child components and represents the current
	    // render tree.
	    this.node = new RenderLayer();
	    this.node.frame = FrameUtils.make(this.props.left, this.props.top, this.props.width, this.props.height);
	    this.node.draw = this.batchedTick;

	    // This is the integration point between custom canvas components and React
	    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	    transaction.perform(
	      this.mountAndInjectChildrenAtRoot,
	      this,
	      this.props.children,
	      transaction
	    );
	    ReactUpdates.ReactReconcileTransaction.release(transaction);

	    // Execute initial draw on mount.
	    this.node.draw();
	  },

	  componentWillUnmount: function () {
	    // Implemented in ReactMultiChild.Mixin
	    this.unmountChildren();
	  },

	  componentDidUpdate: function (prevProps, prevState) {
	    // We have to manually apply child reconciliation since child are not
	    // declared in render().
	    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	    transaction.perform(
	      this.updateChildrenAtRoot,
	      this,
	      this.props.children,
	      transaction
	    );
	    ReactUpdates.ReactReconcileTransaction.release(transaction);

	    // Re-scale the <canvas> when changing size.
	    if (prevProps.width !== this.props.width || prevProps.height !== this.props.height) {
	      this.scale();
	    }

	    // Redraw updated render tree to <canvas>.
	    if (this.node) {
	      this.node.draw();
	    }
	  },

	  render: function () {
	    // Scale the drawing area to match DPI.
	    var width = this.props.width * this.props.scale;
	    var height = this.props.height * this.props.scale;
	    var style = {
	      width: this.props.width,
	      height: this.props.height
	    };

	    return (
	      React.createElement('canvas', {
	        ref: 'canvas',
	        width: width,
	        height: height,
	        style: style,
	        onTouchStart: this.handleTouchStart,
	        onTouchMove: this.handleTouchMove,
	        onTouchEnd: this.handleTouchEnd,
	        onTouchCancel: this.handleTouchEnd,
	        onClick: this.handleClick})
	    );
	  },

	  // Drawing
	  // =======

	  getContext: function () {
	    ('production' !== process.env.NODE_ENV ? invariant(
	      this.isMounted(),
	      'Tried to access drawing context on an unmounted Surface.'
	    ) : invariant(this.isMounted()));
	    return this.refs.canvas.getDOMNode().getContext('2d');
	  },

	  scale: function () {
	    this.getContext().scale(this.props.scale, this.props.scale);
	  },

	  batchedTick: function () {
	    if (this._frameReady === false) {
	      this._pendingTick = true;
	      return;
	    }
	    this.tick();
	  },

	  tick: function () {
	    // Block updates until next animation frame.
	    this._frameReady = false;
	    this.clear();
	    this.draw();
	    requestAnimationFrame(this.afterTick);
	  },

	  afterTick: function () {
	    // Execute pending draw that may have been scheduled during previous frame
	    this._frameReady = true;
	    if (this._pendingTick) {
	      this.tick();
	      this._pendingTick = false;
	    }
	  },

	  clear: function () {
	    this.getContext().clearRect(0, 0, this.props.width, this.props.height);
	  },

	  draw: function () {
	    var layout;
	    if (this.node) {
	      if (this.props.enableCSSLayout) {
	        layout = layoutNode(this.node);
	      }
	      DrawingUtils.drawRenderLayer(this.getContext(), this.node);
	    }
	  },

	  // Events
	  // ======

	  hitTest: function (e) {
	    var hitTarget = hitTest(e, this.node, this.getDOMNode());
	    if (hitTarget) {
	      hitTarget[hitTest.getHitHandle(e.type)](e);
	    }
	  },

	  handleTouchStart: function (e) {
	    var hitTarget = hitTest(e, this.node, this.getDOMNode());
	    var touch;
	    if (hitTarget) {
	      // On touchstart: capture the current hit target for the given touch.
	      this._touches = this._touches || {};
	      for (var i=0, len=e.touches.length; i < len; i++) {
	        touch = e.touches[i];
	        this._touches[touch.identifier] = hitTarget;
	      }
	      hitTarget[hitTest.getHitHandle(e.type)](e);
	    }
	  },

	  handleTouchMove: function (e) {
	    this.hitTest(e);
	  },

	  handleTouchEnd: function (e) {
	    // touchend events do not generate a pageX/pageY so we rely
	    // on the currently captured touch targets.
	    if (!this._touches) {
	      return;
	    }

	    var hitTarget;
	    var hitHandle = hitTest.getHitHandle(e.type);
	    for (var i=0, len=e.changedTouches.length; i < len; i++) {
	      hitTarget = this._touches[e.changedTouches[i].identifier];
	      if (hitTarget && hitTarget[hitHandle]) {
	        hitTarget[hitHandle](e);
	      }
	      delete this._touches[e.changedTouches[i].identifier];
	    }
	  },

	  handleClick: function (e) {
	    this.hitTest(e);
	  }

	});

	module.exports = Surface;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createComponent = __webpack_require__(335);
	var LayerMixin = __webpack_require__(336);

	var Layer = createComponent('Layer', LayerMixin, {

	  mountComponent: function (rootID, transaction, context) {
	    var props = this._currentElement.props;
	    var layer = this.node;
	    this.applyLayerProps({}, props);
	    return layer;
	  },

	  receiveComponent: function (nextComponent, transaction, context) {
	    var prevProps = this._currentElement.props;
	    var props = nextComponent.props;
	    this.applyLayerProps(prevProps, props);
	    this._currentElement = nextComponent;
	  }

	});

	module.exports = Layer;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createComponent = __webpack_require__(335);
	var ContainerMixin = __webpack_require__(337);
	var LayerMixin = __webpack_require__(336);
	var RenderLayer = __webpack_require__(338);

	var Group = createComponent('Group', LayerMixin, ContainerMixin, {

	  mountComponent: function (rootID, transaction, context) {
	    var props = this._currentElement.props;
	    var layer = this.node;

	    this.applyLayerProps({}, props);
	    this.mountAndInjectChildren(props.children, transaction, context);

	    return layer;
	  },

	  receiveComponent: function (nextComponent, transaction, context) {
	    var props = nextComponent.props;
	    var prevProps = this._currentElement.props;
	    this.applyLayerProps(prevProps, props);
	    this.updateChildren(props.children, transaction, context);
	    this._currentElement = nextComponent;
	  },

	  unmountComponent: function () {
	    LayerMixin.unmountComponent.call(this);
	    this.unmountChildren();
	  }

	});

	module.exports = Group;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);
	var assign = __webpack_require__(142);
	var createComponent = __webpack_require__(335);
	var LayerMixin = __webpack_require__(336);
	var Layer = __webpack_require__(182);
	var Group = __webpack_require__(183);
	var ImageCache = __webpack_require__(343);
	var Easing = __webpack_require__(344);
	var clamp = __webpack_require__(345);

	var FADE_DURATION = 200;

	var RawImage = createComponent('Image', LayerMixin, {

	  applyImageProps: function (prevProps, props) {
	    var layer = this.node;

	    layer.type = 'image';
	    layer.imageUrl = props.src;
	  },

	  mountComponent: function (rootID, transaction, context) {
	    var props = this._currentElement.props;
	    var layer = this.node;
	    this.applyLayerProps({}, props);
	    this.applyImageProps({}, props);
	    return layer;
	  },

	  receiveComponent: function (nextComponent, transaction, context) {
	    var prevProps = this._currentElement.props;
	    var props = nextComponent.props;
	    this.applyLayerProps(prevProps, props);
	    this._currentElement = nextComponent;
	  },

	});

	var Image = React.createClass({displayName: "Image",

	  propTypes: {
	    src: React.PropTypes.string.isRequired,
	    style: React.PropTypes.object,
	    useBackingStore: React.PropTypes.bool,
	    fadeIn: React.PropTypes.bool,
	    fadeInDuration: React.PropTypes.number
	  },

	  getInitialState: function () {
	    var loaded = ImageCache.get(this.props.src).isLoaded();
	    return {
	      loaded: loaded,
	      imageAlpha: loaded ? 1 : 0
	    };
	  },

	  componentDidMount: function () {
	    ImageCache.get(this.props.src).on('load', this.handleImageLoad);
	  },

	  componentWillUnmount: function () {
	    if (this._pendingAnimationFrame) {
	      cancelAnimationFrame(this._pendingAnimationFrame);
	    }
	    ImageCache.get(this.props.src).removeListener('load', this.handleImageLoad);
	  },

	  componentDidUpdate: function (prevProps, prevState) {
	    if (this.refs.image) {
	      this.refs.image.invalidateLayout();
	    }
	  },

	  render: function () {
	    var rawImage;
	    var imageStyle = assign({}, this.props.style);
	    var useBackingStore = this.state.loaded ? this.props.useBackingStore : false;

	    // Hide the image until loaded.
	    imageStyle.alpha = this.state.imageAlpha;

	    return (
	      React.createElement(Group, {ref: 'main', style: this.props.style},
	        React.createElement(RawImage, {ref: 'image', src: this.props.src, style: imageStyle, useBackingStore: useBackingStore})
	      )
	    );
	  },

	  handleImageLoad: function () {
	    var imageAlpha = 1;
	    if (this.props.fadeIn) {
	      imageAlpha = 0;
	      this._animationStartTime = Date.now();
	      this._pendingAnimationFrame = requestAnimationFrame(this.stepThroughAnimation);
	    }
	    this.setState({ loaded: true, imageAlpha: imageAlpha });
	  },

	  stepThroughAnimation: function () {
	    var fadeInDuration = this.props.fadeInDuration || FADE_DURATION;
	    var alpha = Easing.easeInCubic((Date.now() - this._animationStartTime) / fadeInDuration);
	    alpha = clamp(alpha, 0, 1);
	    this.setState({ imageAlpha: alpha });
	    if (alpha < 1) {
	      this._pendingAnimationFrame = requestAnimationFrame(this.stepThroughAnimation);
	    }
	  }

	});

	module.exports = Image;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createComponent = __webpack_require__(335);
	var LayerMixin = __webpack_require__(336);

	var Text = createComponent('Text', LayerMixin, {

	  applyTextProps: function (prevProps, props) {
	    var style = (props && props.style) ? props.style : {};
	    var layer = this.node;

	    layer.type = 'text';
	    layer.text = childrenAsString(props.children);

	    layer.color = style.color;
	    layer.fontFace = style.fontFace;
	    layer.fontSize = style.fontSize;
	    layer.lineHeight = style.lineHeight;
	    layer.textAlign = style.textAlign;
	  },

	  mountComponent: function (rootID, transaction, context) {
	    var props = this._currentElement.props;
	    var layer = this.node;
	    this.applyLayerProps({}, props);
	    this.applyTextProps({}, props);
	    return layer;
	  },

	  receiveComponent: function (nextComponent, transaction, context) {
	    var props = nextComponent.props;
	    var prevProps = this._currentElement.props;
	    this.applyLayerProps(prevProps, props);
	    this.applyTextProps(prevProps, props);
	    this._currentElement = nextComponent;
	  }

	});

	function childrenAsString(children) {
	  if (!children) {
	    return '';
	  }
	  if (typeof children === 'string') {
	    return children;
	  }
	  if (children.length) {
	    return children.join('\n');
	  }
	  return '';
	}

	module.exports = Text;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);
	var assign = __webpack_require__(142);
	var Scroller = __webpack_require__(349);
	var Group = __webpack_require__(183);
	var clamp = __webpack_require__(345);

	var ListView = React.createClass({displayName: "ListView",

	  propTypes: {
	    style: React.PropTypes.object,
	    numberOfItemsGetter: React.PropTypes.func.isRequired,
	    itemHeightGetter: React.PropTypes.func.isRequired,
	    itemGetter: React.PropTypes.func.isRequired,
	    snapping: React.PropTypes.bool,
	    scrollingDeceleration: React.PropTypes.number,
	    scrollingPenetrationAcceleration: React.PropTypes.number,
	    onScroll: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      style: { left: 0, top: 0, width: 0, height: 0 },
	      snapping: false,
	      scrollingDeceleration: 0.95,
	      scrollingPenetrationAcceleration: 0.08
	    };
	  },

	  getInitialState: function () {
	    return {
	      scrollTop: 0
	    };
	  },

	  componentDidMount: function () {
	    this.createScroller();
	    this.updateScrollingDimensions();
	  },

	  render: function () {
	    var items = this.getVisibleItemIndexes().map(this.renderItem);
	    return (
	      React.createElement(Group, {
	        style: this.props.style,
	        onTouchStart: this.handleTouchStart,
	        onTouchMove: this.handleTouchMove,
	        onTouchEnd: this.handleTouchEnd,
	        onTouchCancel: this.handleTouchEnd},
	        items
	      )
	    );
	  },

	  renderItem: function (itemIndex) {
	    var item = this.props.itemGetter(itemIndex, this.state.scrollTop);
	    var itemHeight = this.props.itemHeightGetter();
	    var style = {
	      top: 0,
	      left: 0,
	      width: this.props.style.width,
	      height: itemHeight,
	      translateY: (itemIndex * itemHeight) - this.state.scrollTop,
	      zIndex: itemIndex
	    };

	    return (
	      React.createElement(Group, {style: style, key: itemIndex},
	        item
	      )
	    );
	  },

	  // Events
	  // ======

	  handleTouchStart: function (e) {
	    if (this.scroller) {
	      this.scroller.doTouchStart(e.touches, e.timeStamp);
	    }
	  },

	  handleTouchMove: function (e) {
	    if (this.scroller) {
	      e.preventDefault();
	      this.scroller.doTouchMove(e.touches, e.timeStamp, e.scale);
	    }
	  },

	  handleTouchEnd: function (e) {
	    if (this.scroller) {
	      this.scroller.doTouchEnd(e.timeStamp);
	      if (this.props.snapping) {
	        this.updateScrollingDeceleration();
	      }
	    }
	  },

	  handleScroll: function (left, top) {
	    this.setState({ scrollTop: top });
	    if (this.props.onScroll) {
	      this.props.onScroll(top);
	    }
	  },

	  // Scrolling
	  // =========

	  createScroller: function () {
	    var options = {
	      scrollingX: false,
	      scrollingY: true,
	      decelerationRate: this.props.scrollingDeceleration,
	      penetrationAcceleration: this.props.scrollingPenetrationAcceleration,
	    };
	    this.scroller = new Scroller(this.handleScroll, options);
	  },

	  updateScrollingDimensions: function () {
	    var width = this.props.style.width;
	    var height = this.props.style.height;
	    var scrollWidth = width;
	    var scrollHeight = this.props.numberOfItemsGetter() * this.props.itemHeightGetter();
	    this.scroller.setDimensions(width, height, scrollWidth, scrollHeight);
	  },

	  getVisibleItemIndexes: function () {
	    var itemIndexes = [];
	    var itemHeight = this.props.itemHeightGetter();
	    var itemCount = this.props.numberOfItemsGetter();
	    var scrollTop = this.state.scrollTop;
	    var itemScrollTop = 0;

	    for (var index=0; index < itemCount; index++) {
	      itemScrollTop = (index * itemHeight) - scrollTop;

	      // Item is completely off-screen bottom
	      if (itemScrollTop >= this.props.style.height) {
	        continue;
	      }

	      // Item is completely off-screen top
	      if (itemScrollTop <= -this.props.style.height) {
	        continue;
	      }

	      // Part of item is on-screen.
	      itemIndexes.push(index);
	    }

	    return itemIndexes;
	  },

	  updateScrollingDeceleration: function () {
	    var currVelocity = this.scroller.__decelerationVelocityY;
	    var currScrollTop = this.state.scrollTop;
	    var targetScrollTop = 0;
	    var estimatedEndScrollTop = currScrollTop;

	    while (Math.abs(currVelocity).toFixed(6) > 0) {
	      estimatedEndScrollTop += currVelocity;
	      currVelocity *= this.props.scrollingDeceleration;
	    }

	    // Find the page whose estimated end scrollTop is closest to 0.
	    var closestZeroDelta = Infinity;
	    var pageHeight = this.props.itemHeightGetter();
	    var pageCount = this.props.numberOfItemsGetter();
	    var pageScrollTop;

	    for (var pageIndex=0, len=pageCount; pageIndex < len; pageIndex++) {
	      pageScrollTop = (pageHeight * pageIndex) - estimatedEndScrollTop;
	      if (Math.abs(pageScrollTop) < closestZeroDelta) {
	        closestZeroDelta = Math.abs(pageScrollTop);
	        targetScrollTop = pageHeight * pageIndex;
	      }
	    }

	    this.scroller.__minDecelerationScrollTop = targetScrollTop;
	    this.scroller.__maxDecelerationScrollTop = targetScrollTop;
	  }

	});

	module.exports = ListView;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _fontFaces = {};

	/**
	 * @param {String} family The CSS font-family value
	 * @param {String} url The remote URL for the font file
	 * @param {Object} attributes Font attributes supported: style, weight
	 * @return {Object}
	 */
	function FontFace (family, url, attributes) {
	  var fontFace;
	  var fontId;

	  attributes = attributes || {};
	  attributes.style = attributes.style || 'normal';
	  attributes.weight = attributes.weight || 400;

	  fontId = getCacheKey(family, url, attributes);
	  fontFace = _fontFaces[fontId];

	  if (!fontFace) {
	    fontFace = {};
	    fontFace.id = fontId;
	    fontFace.family = family;
	    fontFace.url = url;
	    fontFace.attributes = attributes;
	    _fontFaces[fontId] = fontFace;
	  }

	  return fontFace;
	}

	/**
	 * Helper for retrieving the default family by weight.
	 *
	 * @param {Number} fontWeight
	 * @return {FontFace}
	 */
	FontFace.Default = function (fontWeight) {
	  return FontFace('sans-serif', null, {weight: fontWeight});
	};

	/**
	 * @internal
	 */
	function getCacheKey (family, url, attributes) {
	  return family + url + Object.keys(attributes).sort().map(function (key) {
	    return attributes[key];
	  });
	}

	module.exports = FontFace;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FontFace = __webpack_require__(187);
	var FontUtils = __webpack_require__(346);

	var canvas = document.createElement('canvas');
	var ctx = canvas.getContext('2d');

	var _cache = {};
	var _zeroMetrics = {
	  width: 0,
	  height: 0,
	  lines: []
	};

	function splitText (text) {
	  return text.split(' ');
	}

	function getCacheKey (text, width, fontFace, fontSize, lineHeight) {
	  return text + width + fontFace.id + fontSize + lineHeight;
	}

	/**
	 * Given a string of text, available width, and font return the measured width
	 * and height.
	 * @param {String} text The input string
	 * @param {Number} width The available width
	 * @param {FontFace} fontFace The FontFace to use
	 * @param {Number} fontSize The font size in CSS pixels
	 * @param {Number} lineHeight The line height in CSS pixels
	 * @return {Object} Measured text size with `width` and `height` members.
	 */
	module.exports = function measureText (text, width, fontFace, fontSize, lineHeight) {
	  var cacheKey = getCacheKey(text, width, fontFace, fontSize, lineHeight);
	  var cached = _cache[cacheKey];
	  if (cached) {
	    return cached;
	  }

	  // Bail and return zero unless we're sure the font is ready.
	  if (!FontUtils.isFontLoaded(fontFace)) {
	    return _zeroMetrics;
	  }

	  var measuredSize = {};
	  var textMetrics;
	  var lastMeasuredWidth;
	  var words;
	  var tryLine;
	  var currentLine;

	  ctx.font = fontFace.attributes.style + ' normal ' + fontFace.attributes.weight + ' ' + fontSize + 'pt ' + fontFace.family;
	  textMetrics = ctx.measureText(text);

	  measuredSize.width = textMetrics.width;
	  measuredSize.height = lineHeight;
	  measuredSize.lines = [];

	  if (measuredSize.width <= width) {
	    // The entire text string fits.
	    measuredSize.lines.push({width: measuredSize.width, text: text});
	  } else {
	    // Break into multiple lines.
	    measuredSize.width = width;
	    words = splitText(text);
	    currentLine = '';

	    // This needs to be optimized!
	    while (words.length) {
	      tryLine = currentLine + words[0] + ' ';
	      textMetrics = ctx.measureText(tryLine);
	      if (textMetrics.width > width) {
	        measuredSize.height += lineHeight;
	        measuredSize.lines.push({width: lastMeasuredWidth, text: currentLine.trim()});
	        currentLine = words[0] + ' ';
	        lastMeasuredWidth = ctx.measureText(currentLine.trim()).width;
	      } else {
	        currentLine = tryLine;
	        lastMeasuredWidth = textMetrics.width;
	      }
	      if (words.length === 1) {
	        textMetrics = ctx.measureText(currentLine.trim());
	        measuredSize.lines.push({width: textMetrics.width, text: currentLine.trim()});
	      }
	      words.shift();
	    }
	  }

	  _cache[cacheKey] = measuredSize;

	  return measuredSize;
	};


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(15);
	var KeyCode = __webpack_require__(80);
	var Classable = __webpack_require__(57);
	var UniqueId = __webpack_require__(204);
	var WindowListenable = __webpack_require__(59);
	var FocusRipple = __webpack_require__(196);
	var TouchRipple = __webpack_require__(197);
	var Paper = __webpack_require__(60);

	var EnhancedSwitch = React.createClass({displayName: "EnhancedSwitch",

	  mixins: [Classable, WindowListenable],

		propTypes: {
	      id: React.PropTypes.string,
	      inputType: React.PropTypes.string.isRequired,
	      switchElement: React.PropTypes.element.isRequired,
	      iconClassName: React.PropTypes.string.isRequired,
	      name: React.PropTypes.string,
		    value: React.PropTypes.string,
		    label: React.PropTypes.string,
		    onSwitch: React.PropTypes.func,
		    required: React.PropTypes.bool,
		    disabled: React.PropTypes.bool,
		    defaultSwitched: React.PropTypes.bool,
	      labelPosition: React.PropTypes.oneOf(['left', 'right']),
	      disableFocusRipple: React.PropTypes.bool,
	      disableTouchRipple: React.PropTypes.bool
		  },

	  windowListeners: {
	    'keydown': '_handleWindowKeydown',
	    'keyup': '_handleWindowKeyup'
	  },

	  getDefaultProps: function() {
	    return {
	      iconClassName: ''
	    };
	  },

	  getInitialState: function() {
	    return {
	      switched: this.props.defaultSwitched ||
	        (this.props.valueLink && this.props.valueLink.value),
	      isKeyboardFocused: false
	    }
	  },

	  componentDidMount: function() {
	    var inputNode = this.refs.checkbox.getDOMNode();
	    this.setState({switched: inputNode.checked});
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var hasCheckedLinkProp = nextProps.hasOwnProperty('checkedLink');
	    var hasCheckedProp = nextProps.hasOwnProperty('checked');
	    var hasToggledProp = nextProps.hasOwnProperty('toggled');
	    var hasNewDefaultProp =
	      (nextProps.hasOwnProperty('defaultSwitched') &&
	      (nextProps.defaultSwitched != this.props.defaultSwitched));
	    var newState = {};

	    if (hasCheckedProp) {
	      newState.switched = nextProps.checked;
	    } else if (hasToggledProp) {
	      newState.switched = nextProps.toggled;
	    } else if (hasCheckedLinkProp) {
	      newState.switched = nextProps.checkedLink.value;
	    }

	    if (newState) this.setState(newState);
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      this.props,type=$__0.type,name=$__0.name,value=$__0.value,label=$__0.label,onSwitch=$__0.onSwitch,defaultSwitched=$__0.defaultSwitched,onBlur=$__0.onBlur,onFocus=$__0.onFocus,onMouseUp=$__0.onMouseUp,onMouseDown=$__0.onMouseDown,onMouseOut=$__0.onMouseOut,onTouchStart=$__0.onTouchStart,onTouchEnd=$__0.onTouchEnd,disableTouchRipple=$__0.disableTouchRipple,disableFocusRipple=$__0.disableFocusRipple,iconClassName=$__0.iconClassName,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{type:1,name:1,value:1,label:1,onSwitch:1,defaultSwitched:1,onBlur:1,onFocus:1,onMouseUp:1,onMouseDown:1,onMouseOut:1,onTouchStart:1,onTouchEnd:1,disableTouchRipple:1,disableFocusRipple:1,iconClassName:1});

	    var classes = this.getClasses('mui-enhanced-switch', {
	      'mui-is-switched': this.state.switched,
	      'mui-is-disabled': this.props.disabled,
	      'mui-is-required': this.props.required
	    });

	    var inputId = this.props.id || UniqueId.generate();

	    var labelElement = this.props.label ? (
	      React.createElement("label", {className: "mui-switch-label", htmlFor: inputId}, 
	        this.props.label
	      )
	    ) : null;

	    var inputProps = {
	      ref: "checkbox",
	      type: this.props.inputType,
	      name: this.props.name,
	      value: this.props.value,
	      defaultChecked: this.props.defaultSwitched,
	      onBlur: this._handleBlur,
	      onFocus: this._handleFocus,
	      onMouseUp: this._handleMouseUp,
	      onMouseDown: this._handleMouseDown,
	      onMouseOut: this._handleMouseOut,
	      onTouchStart: this._handleTouchStart,
	      onTouchEnd: this._handleTouchEnd
	    };

	    if (!this.props.hasOwnProperty('checkedLink')) {
	      inputProps.onChange = this._handleChange;
	    }

	    var inputElement = (
	      React.createElement("input", React.__spread({}, 
	        other, 
	        inputProps, 
	        {className: "mui-enhanced-switch-input"}))
	    );

	    var touchRipple = (
	      React.createElement(TouchRipple, {
	        ref: "touchRipple", 
	        key: "touchRipple", 
	        centerRipple: true})
	    );

	    var focusRipple = (
	      React.createElement(FocusRipple, {
	        key: "focusRipple", 
	        show: this.state.isKeyboardFocused})
	    );

	    var ripples = [
	      this.props.disabled || disableTouchRipple ? null : touchRipple,
	      this.props.disabled || disableFocusRipple ? null : focusRipple
	    ];

	    iconClassName += ' mui-enhanced-switch-wrap';

	    var switchElement = (this.props.iconClassName.indexOf("toggle") == -1) ? (
	        React.createElement("div", {className: iconClassName}, 
	          this.props.switchElement, 
	          ripples
	        )
	      ) : (
	        React.createElement("div", {className: iconClassName}, 
	          React.createElement("div", {className: "mui-toggle-track"}), 
	          React.createElement(Paper, {className: "mui-toggle-thumb", zDepth: 1}, " ", ripples, " ")
	        )
	    );

	    var labelPositionExist = this.props.labelPosition;

	    // Position is left if not defined or invalid.
	    var elementsInOrder = (labelPositionExist &&
	      (this.props.labelPosition.toUpperCase() === "RIGHT")) ? (
	        React.createElement("div", null, 
	          switchElement, 
	          labelElement
	        )
	      ) : (
	        React.createElement("div", null, 
	          labelElement, 
	          switchElement
	        )
	    );

	    return (
	      React.createElement("div", {className: classes}, 
	          inputElement, 
	          elementsInOrder
	      )
	    );
	  },


	  isSwitched: function() {
	    return this.refs.checkbox.getDOMNode().checked;
	  },

	  // no callback here because there is no event
	  setSwitched: function(newSwitchedValue) {
	    if (!this.props.hasOwnProperty('checked') || this.props.checked == false) {
	      this.setState({switched: newSwitchedValue});
	      this.refs.checkbox.getDOMNode().checked = newSwitchedValue;
	    } else if (process.NODE_ENV !== 'production') {
	      var message = 'Cannot call set method while checked is defined as a property.';
	      console.error(message);
	    }
	  },

	  getValue: function() {
	    return this.refs.checkbox.getDOMNode().value;
	  },

	  isKeyboardFocused: function() {
	    return this.state.isKeyboardFocused;
	  },

	  _handleChange: function(e) {

	    this._tabPressed = false;
	    this.setState({
	      isKeyboardFocused: false
	    });

	    var isInputChecked = this.refs.checkbox.getDOMNode().checked;

	    if (!this.props.hasOwnProperty('checked')) this.setState({switched: isInputChecked});
	    if (this.props.onSwitch) this.props.onSwitch(e, isInputChecked);
	  },

	  /**
	   * Because both the ripples and the checkbox input cannot share pointer
	   * events, the checkbox input takes control of pointer events and calls
	   * ripple animations manually.
	   */

	  // Checkbox inputs only use SPACE to change their state. Using ENTER will
	  // update the ui but not the input.
	  _handleWindowKeydown: function(e) {
	    if (e.keyCode == KeyCode.TAB) this._tabPressed = true;
	    if (e.keyCode == KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleChange(e);
	    }
	  },

	  _handleWindowKeyup: function(e) {
	    if (e.keyCode == KeyCode.SPACE && this.state.isKeyboardFocused) {
	      this._handleChange(e);
	    }
	  },

	  _handleMouseDown: function(e) {
	    //only listen to left clicks
	    if (e.button === 0) this.refs.touchRipple.start(e);
	  },

	  _handleMouseUp: function(e) {
	    this.refs.touchRipple.end();
	  },

	  _handleMouseOut: function(e) {
	    this.refs.touchRipple.end();
	  },

	  _handleTouchStart: function(e) {
	    this.refs.touchRipple.start(e);
	  },

	  _handleTouchEnd: function(e) {
	    this.refs.touchRipple.end();
	  },

	  _handleBlur: function(e) {
	    this.setState({
	      isKeyboardFocused: false
	    });

	    if (this.props.onBlur) this.props.onBlur(e);
	  },

	  _handleFocus: function(e) {
	    //setTimeout is needed becuase the focus event fires first
	    //Wait so that we can capture if this was a keyboard focus
	    //or touch focus
	    setTimeout(function() {
	      if (this._tabPressed) {
	        this.setState({
	          isKeyboardFocused: true
	        });
	      }
	    }.bind(this), 150);

	    if (this.props.onFocus) this.props.onFocus(e);
	  }

	});

	module.exports = EnhancedSwitch;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var ToggleCheckBoxOutlineBlank = React.createClass({displayName: "ToggleCheckBoxOutlineBlank",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("path", {d: "M19,5v14H5V5H19 M19,3H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z"})
	      )
	    );
	  }

	});

	module.exports = ToggleCheckBoxOutlineBlank;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var ToggleCheckBoxChecked = React.createClass({displayName: "ToggleCheckBoxChecked",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("path", {d: "M19,3H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M10,17l-5-5l1.4-1.4 l3.6,3.6l7.6-7.6L19,8L10,17z"})
	      )
	    );
	  }

	});

	module.exports = ToggleCheckBoxChecked;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {

	  addDays: function(d, days) {
	    var newDate = this.clone(d);
	    newDate.setDate(d.getDate() + days);
	    return newDate;
	  },

	  addMonths: function(d, months) {
	    var newDate = this.clone(d);
	    newDate.setMonth(d.getMonth() + months);
	    return newDate;
	  },

	  clone: function(d) {
	    return new Date(d.getTime());
	  },

	  getDaysInMonth: function(d) {
	    var resultDate = this.getFirstDayOfMonth(d);

	    resultDate.setMonth(resultDate.getMonth() + 1);
	    resultDate.setDate(resultDate.getDate() - 1);

	    return resultDate.getDate();
	  },

	  getFirstDayOfMonth: function(d) {
	    return new Date(d.getFullYear(), d.getMonth(), 1);
	  },

	  getFullMonth: function(d) {
	    var month = d.getMonth();
	    switch (month) {
	      case 0: return 'January';
	      case 1: return 'February';
	      case 2: return 'March';
	      case 3: return 'April';
	      case 4: return 'May';
	      case 5: return 'June';
	      case 6: return 'July';
	      case 7: return 'August';
	      case 8: return 'September';
	      case 9: return 'October';
	      case 10: return 'November';
	      case 11: return 'December';
	    }
	  },

	  getShortMonth: function(d) {
	    var month = d.getMonth();
	    switch (month) {
	      case 0: return 'Jan';
	      case 1: return 'Feb';
	      case 2: return 'Mar';
	      case 3: return 'Apr';
	      case 4: return 'May';
	      case 5: return 'Jun';
	      case 6: return 'Jul';
	      case 7: return 'Aug';
	      case 8: return 'Sep';
	      case 9: return 'Oct';
	      case 10: return 'Nov';
	      case 11: return 'Dec';
	    }
	  },

	  getDayOfWeek: function(d) {
	    var dow = d.getDay();
	    switch (dow) {
	      case 0: return 'Sunday';
	      case 1: return 'Monday';
	      case 2: return 'Tuesday';
	      case 3: return 'Wednesday';
	      case 4: return 'Thursday';
	      case 5: return 'Friday';
	      case 6: return 'Saturday';
	    }
	  },

	  getWeekArray: function(d) {
	    var dayArray = [];
	    var daysInMonth = this.getDaysInMonth(d);
	    var daysInWeek;
	    var emptyDays;
	    var firstDayOfWeek;
	    var week;
	    var weekArray = [];

	    for (var i = 1; i <= daysInMonth; i++) {
	      dayArray.push(new Date(d.getFullYear(), d.getMonth(), i));
	    };

	    while (dayArray.length) {
	      firstDayOfWeek = dayArray[0].getDay();
	      daysInWeek = 7 - firstDayOfWeek;
	      emptyDays = 7 - daysInWeek;
	      week = dayArray.splice(0, daysInWeek);

	      for (var i = 0; i < emptyDays; i++) {
	        week.unshift(null);
	      };

	      weekArray.push(week);
	    }

	    return weekArray;
	  },

	  format: function(date) {
	    var m = date.getMonth() + 1;
	    var d = date.getDate();
	    var y = date.getFullYear();
	    return m + '/' + d + '/' + y;
	  },

	  isEqualDate: function(d1, d2) {
	    return d1 && d2 &&
	      (d1.getFullYear() === d2.getFullYear()) &&
	      (d1.getMonth() === d2.getMonth()) &&
	      (d1.getDate() === d2.getDate());
	  },

	  monthDiff: function(d1, d2) {
	    var m;
	    m = (d1.getFullYear() - d2.getFullYear()) * 12;
	    m += d1.getMonth();
	    m -= d2.getMonth();
	    return m;
	  }

	}

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var WindowListenable = __webpack_require__(59);
	var KeyCode = __webpack_require__(80);
	var Calendar = __webpack_require__(347);
	var DialogWindow = __webpack_require__(45);
	var FlatButton = __webpack_require__(49);

	var DatePickerDialog = React.createClass({displayName: "DatePickerDialog",

	  mixins: [Classable, WindowListenable],

	  propTypes: {
	    initialDate: React.PropTypes.object,
	    onAccept: React.PropTypes.func,
	    onShow: React.PropTypes.func,
	    onDismiss: React.PropTypes.func,
	  },

	  windowListeners: {
	    'keyup': '_handleWindowKeyUp'
	  },

	  getInitialState: function() {
	    return {
	      isCalendarActive: false
	    };
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      this.props,initialDate=$__0.initialDate,onAccept=$__0.onAccept,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{initialDate:1,onAccept:1});
	    var classes = this.getClasses('mui-date-picker-dialog');
	    var actions = [
	      React.createElement(FlatButton, {
	        key: 0, 
	        label: "Cancel", 
	        secondary: true, 
	        onTouchTap: this._handleCancelTouchTap}),
	      React.createElement(FlatButton, {
	        key: 1, 
	        label: "OK", 
	        secondary: true, 
	        onTouchTap: this._handleOKTouchTap})
	    ];

	    return (
	      React.createElement(DialogWindow, React.__spread({},  other, 
	        {ref: "dialogWindow", 
	        className: classes, 
	        actions: actions, 
	        contentClassName: "mui-date-picker-dialog-window", 
	        onDismiss: this._handleDialogDismiss, 
	        onShow: this._handleDialogShow, 
	        repositionOnUpdate: false}), 
	        React.createElement(Calendar, {
	          ref: "calendar", 
	          initialDate: this.props.initialDate, 
	          isActive: this.state.isCalendarActive})
	      )
	    );
	  },

	  show: function() {
	    this.refs.dialogWindow.show();
	  },

	  dismiss: function() {
	    this.refs.dialogWindow.dismiss();
	  },

	  _handleCancelTouchTap: function() {
	    this.dismiss();
	  },

	  _handleOKTouchTap: function() {
	    this.dismiss();
	    if (this.props.onAccept) {
	      this.props.onAccept(this.refs.calendar.getSelectedDate());
	    }
	  },

	  _handleDialogShow: function() {
	    this.setState({
	      isCalendarActive: true
	    });

	    if(this.props.onShow) {
	      this.props.onShow();
	    }
	  },

	  _handleDialogDismiss: function() {
	    this.setState({
	      isCalendarActive: false
	    });

	    if(this.props.onDismiss) {
	      this.props.onDismiss();
	    }
	  },

	  _handleWindowKeyUp: function(e) {
	    if (this.refs.dialogWindow.isOpen()) {
	      switch (e.keyCode) {
	        case KeyCode.ENTER:
	          this._handleOKTouchTap();
	          break;
	      }
	    } 
	  }

	});

	module.exports = DatePickerDialog;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15),
	  Classable = __webpack_require__(57);

	var Overlay = React.createClass({displayName: "Overlay",

	  mixins: [Classable],

	  propTypes: {
	    show: React.PropTypes.bool,
	    autoLockScrolling: React.PropTypes.bool
	  },
	  
	  getDefaultProps: function() {
	    return {
	      autoLockScrolling: true
	    };
	  },
	  
	  componentDidUpdate: function(prevProps, prevState) {
	    if (this.props.autoLockScrolling) (this.props.show) ? this._preventScrolling() : this._allowScrolling();
	  },

	  render: function() {
	    var 
	      $__0=
	        
	        
	        this.props,className=$__0.className,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1}),
	      classes = this.getClasses('mui-overlay', {
	        'mui-is-shown': this.props.show
	      });

	    return (
	      React.createElement("div", React.__spread({},  other, {className: classes}))
	    );
	  },
	  
	  preventScrolling: function() {
	    if (!this.props.autoLockScrolling) this._preventScrolling();
	  },
	  
	  allowScrolling: function() {
	    if (!this.props.autoLockScrolling) this._allowScrolling();
	  },
	  
	  _preventScrolling: function() {
	    var body = document.getElementsByTagName('body')[0];
	    body.style.overflow = 'hidden';
	  },
	  
	  _allowScrolling: function() {
	    var body = document.getElementsByTagName('body')[0];
	    body.style.overflow = '';
	  }

	});

	module.exports = Overlay;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var DropDownArrow = React.createClass({displayName: "DropDownArrow",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("polygon", {points: "7,9.5 12,14.5 17,9.5 "})
	      )
	    );
	  }

	});

	module.exports = DropDownArrow;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var FocusRipple = React.createClass({displayName: "FocusRipple",

	  mixins: [Classable],

	  propTypes: {
	    show: React.PropTypes.bool
	  },

	  componentDidMount: function() {
	    this._setRippleSize();
	  },

	  render: function() {
	    var classes = this.getClasses('mui-focus-ripple', {
	      'mui-is-shown': this.props.show
	    });

	    return (
	      React.createElement("div", {className: classes}, 
	        React.createElement("div", {className: "mui-focus-ripple-inner"})
	      )
	    );
	  },

	  _setRippleSize: function() {
	    var el = this.getDOMNode();
	    var height = el.offsetHeight;
	    var width = el.offsetWidth;
	    var size = Math.max(height, width);

	    el.style.height = size + 'px';
	    el.style.top = (size / 2 * -1) + (height / 2) + 'px';
	  }

	});

	module.exports = FocusRipple;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var Dom = __webpack_require__(78);
	var RippleCircle = __webpack_require__(348);

	var TouchRipple = React.createClass({displayName: "TouchRipple",

	  mixins: [Classable],

	  propTypes: {
	    centerRipple: React.PropTypes.bool,
	    className: React.PropTypes.string
	  },

	  getInitialState: function() {
	    return {
	      ripples: [{
	        key: 0,
	        started: false,
	        ending: false
	      }]
	    };
	  },

	  render: function() {
	    var classes = this.getClasses('mui-touch-ripple');

	    return (
	      React.createElement("div", {
	        onMouseUp: this._handleMouseUp, 
	        onMouseDown: this._handleMouseDown, 
	        onMouseOut: this._handleMouseOut, 
	        onTouchStart: this._handleTouchStart, 
	        onTouchEnd: this._handleTouchEnd}, 
	        React.createElement("div", {className: classes}, 
	          this._getRippleElements()
	        ), 
	        this.props.children
	      )
	    );
	  },

	  start: function(e) {
	    var ripples = this.state.ripples;
	    var nextKey = ripples[ripples.length-1].key + 1;
	    var style = !this.props.centerRipple ? this._getRippleStyle(e) : {};
	    var ripple;

	    //Start the next unstarted ripple
	    for (var i = 0; i < ripples.length; i++) {
	      ripple = ripples[i];
	      if (!ripple.started) {
	        ripple.started = true;
	        ripple.style = style;
	        break;
	      }
	    };

	    //Add an unstarted ripple at the end
	    ripples.push({
	      key: nextKey,
	      started: false,
	      ending: false
	    });

	    //Re-render
	    this.setState({
	      ripples: ripples
	    });
	  },

	  end: function() {
	    var ripples = this.state.ripples;
	    var ripple;
	    var endingRipple;

	    //End the the next un-ended ripple
	    for (var i = 0; i < ripples.length; i++) {
	      ripple = ripples[i];
	      if (ripple.started && !ripple.ending) {
	        ripple.ending = true;
	        endingRipple = ripple;
	        break;
	      }
	    };

	    //Only update if a ripple was found
	    if (endingRipple) {
	      //Re-render
	      this.setState({
	        ripples: ripples
	      });

	      //Wait 2 seconds and remove the ripple from DOM
	      setTimeout(function() {
	        ripples.shift();
	        if (this.isMounted()) {
	          this.setState({
	            ripples: ripples
	          });
	        }
	      }.bind(this), 2000);
	    }
	  },

	  _handleMouseDown: function(e) {
	    //only listen to left clicks
	    if (e.button === 0) this.start(e);
	  },

	  _handleMouseUp: function(e) {
	    this.end();
	  },

	  _handleMouseOut: function(e) {
	    this.end();
	  },

	  _handleTouchStart: function(e) {
	    this.start(e);
	  },

	  _handleTouchEnd: function(e) {
	    this.end();
	  },

	  _getRippleStyle: function(e) {
	    var style = {};
	    var el = this.getDOMNode();
	    var elHeight = el.offsetHeight;
	    var elWidth = el.offsetWidth;
	    var offset = Dom.offset(el);
	    var pageX = e.pageX == undefined ? e.nativeEvent.pageX : e.pageX;
	    var pageY = e.pageY == undefined ? e.nativeEvent.pageY : e.pageY;
	    var pointerX = pageX - offset.left;
	    var pointerY = pageY - offset.top;
	    var topLeftDiag = this._calcDiag(pointerX, pointerY);
	    var topRightDiag = this._calcDiag(elWidth - pointerX, pointerY);
	    var botRightDiag = this._calcDiag(elWidth - pointerX, elHeight - pointerY);
	    var botLeftDiag = this._calcDiag(pointerX, elHeight - pointerY);
	    var rippleRadius = Math.max(
	      topLeftDiag, topRightDiag, botRightDiag, botLeftDiag
	    );
	    var rippleSize = rippleRadius * 2;
	    var left = pointerX - rippleRadius;
	    var top = pointerY - rippleRadius;

	    style.height = rippleSize + 'px';
	    style.width = rippleSize + 'px';
	    style.top = top + 'px';
	    style.left = left + 'px';

	    return style;
	  },

	  _calcDiag: function(a, b) {
	    return Math.sqrt((a * a) + (b * b));
	  },

	  _getRippleElements: function() {
	    return this.state.ripples.map(function(ripple) {
	      return (
	        React.createElement(RippleCircle, {
	          key: ripple.key, 
	          started: ripple.started, 
	          ending: ripple.ending, 
	          style: ripple.style})
	      );
	    }.bind(this));
	  }

	});

	module.exports = TouchRipple;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var LinkMenuItem = React.createClass({displayName: "LinkMenuItem",

	    mixins: [Classable],
	    
	    propTypes: {
	        index: React.PropTypes.number.isRequired,
	        payload: React.PropTypes.string.isRequired,
	        text: React.PropTypes.string.isRequired,
	        target: React.PropTypes.string,
	        disabled: React.PropTypes.bool
	    },
	    
	    getDefaultProps: function() {
	        return {
	            disabled: false
	        };
	    },
	    
	    render: function() {
	        var classes = this.getClasses('mui-menu-item', {
	          'mui-is-disabled': this.props.disabled
	        });
	        var onClickHandler = (this.props.disabled) ? this._stopLink : undefined;
	        // Prevent context menu 'Open In New Tab/Window'
	        var linkAttribute = (this.props.disabled) ? 'data-href' : 'href';
	        var link = {};
	        link[linkAttribute] = this.props.payload
	        
	        return (
	            React.createElement("a", React.__spread({key: this.props.index, className: classes},  link, {target: this.props.target, onClick: onClickHandler}), this.props.text)
	        );
	    },
	    
	    _stopLink: function(event) {
	      event.preventDefault();
	    }
	});

	module.exports = LinkMenuItem;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);

	var SubheaderMenuItem = React.createClass({displayName: "SubheaderMenuItem",
	    
	    propTypes: {
	        index: React.PropTypes.number.isRequired,
	        text: React.PropTypes.string.isRequired
	    },
	    
	    render: function() {
	        return (
	            React.createElement("div", {key: this.props.index, className: "mui-subheader"}, this.props.text)
	        );
	    }
	    
	});

	module.exports = SubheaderMenuItem;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var RadioButtonOff = React.createClass({displayName: "RadioButtonOff",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	        React.createElement("path", {d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})
	      )
	    );
	  }

	});

	module.exports = RadioButtonOff;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var SvgIcon = __webpack_require__(65);

	var RadioButtonOn = React.createClass({displayName: "RadioButtonOn",

	  render: function() {
	    return (
	      React.createElement(SvgIcon, React.__spread({},  this.props), 
	       React.createElement("path", {d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})
	      )
	    );
	  }

	});

	module.exports = RadioButtonOn;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);

	var TabTemplate = React.createClass({displayName: "TabTemplate",

	  render: function(){

	    return (
	      React.createElement("div", {className: "mui-tab-template"}, 
	        this.props.children
	      )
	    );
	  },
	});

	module.exports = TabTemplate;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);

	var InkBar = React.createClass({displayName: "InkBar",
	  
	  propTypes: {
	    position: React.PropTypes.string
	  },
	  
	  render: function() {

	    var styles = {
	      left: this.props.left,
	      width: this.props.width
	    }

	    return (
	      React.createElement("div", {className: "mui-ink-bar", style: styles}, 
	        " "
	      )
	    );
	  }

	});

	module.exports = InkBar;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var index = 0;

	module.exports = {
	  generate: function() {
	    return "mui-id-" + (index++);
	  }
	};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var EnhancedTextarea = React.createClass({displayName: "EnhancedTextarea",

	  mixins: [Classable],

	  propTypes: {
	    onChange: React.PropTypes.func,
	    onHeightChange: React.PropTypes.func,
	    textareaClassName: React.PropTypes.string,
	    rows: React.PropTypes.number
	  },

	  getDefaultProps: function() {
	    return {
	      rows: 1
	    };
	  },

	  getInitialState: function() {
	    return {
	      height: this.props.rows * 24
	    };
	  },

	  componentDidMount: function() {
	    this._syncHeightWithShadow();
	  },

	  render: function() {

	    var $__0=
	      
	      
	      
	      
	      
	      
	      
	      this.props,className=$__0.className,onChange=$__0.onChange,onHeightChange=$__0.onHeightChange,textareaClassName=$__0.textareaClassName,rows=$__0.rows,valueLink=$__0.valueLink,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1,onChange:1,onHeightChange:1,textareaClassName:1,rows:1,valueLink:1});

	    var classes = this.getClasses('mui-enhanced-textarea');
	    var textareaClassName = 'mui-enhanced-textarea-input';
	    var style = {
	      height: this.state.height + 'px'
	    };

	    if (this.props.textareaClassName) {
	      textareaClassName += ' ' + this.props.textareaClassName;
	    }

	    if (this.props.hasOwnProperty('valueLink')) {
	      other.value = this.props.valueLink.value;
	    }

	    return (
	      React.createElement("div", {className: classes}, 
	        React.createElement("textarea", {
	          ref: "shadow", 
	          className: "mui-enhanced-textarea-shadow", 
	          tabIndex: "-1", 
	          rows: this.props.rows, 
	          defaultValue: this.props.defaultValue, 
	          readOnly: true, 
	          value: this.props.value}), 
	        React.createElement("textarea", React.__spread({}, 
	          other, 
	          {ref: "input", 
	          className: textareaClassName, 
	          rows: this.props.rows, 
	          style: style, 
	          onChange: this._handleChange}))
	      )
	    );
	  },

	  getInputNode: function() {
	    return this.refs.input.getDOMNode();
	  },

	  _syncHeightWithShadow: function(newValue, e) {
	    var shadow = this.refs.shadow.getDOMNode();
	    var currentHeight = this.state.height;
	    var newHeight;

	    if (newValue !== undefined) shadow.value = newValue;
	    newHeight = shadow.scrollHeight;

	    if (currentHeight !== newHeight) {
	      this.setState({height: newHeight});
	      if (this.props.onHeightChange) this.props.onHeightChange(e, newHeight);
	    }
	  },

	  _handleChange: function(e) {
	    this._syncHeightWithShadow(e.target.value);

	    if (this.props.hasOwnProperty('valueLink')) {
	      this.props.valueLink.requestChange(e.target.value);
	    }

	    if (this.props.onChange) this.props.onChange(e);
	  },
	  
	  componentWillReceiveProps: function(nextProps) {
	    if (nextProps.value != this.props.value) {
	      this._syncHeightWithShadow(nextProps.value);
	    }
	  }
	});

	module.exports = EnhancedTextarea;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9),
		classnames = __webpack_require__(7),
		Tappable = __webpack_require__(30),
		Navigation = __webpack_require__(22);

	module.exports = React.createClass({displayName: "exports",
		mixins: [Navigation],
		propTypes: {
			action: React.PropTypes.func,
			aux: React.PropTypes.bool,
			className: React.PropTypes.string,
			delete: React.PropTypes.bool,
			disabled: React.PropTypes.bool,
			primaryLabel: React.PropTypes.string,
			secondaryLabel: React.PropTypes.string,
			value: React.PropTypes.string
		},
		getDefaultProps: function() {
			return {
				action: function() {},
				className: '',
				secondaryLabel: ''
			};
		},
		render: function() {

			var className = classnames({
				'Keypad-button': true,
				'is-auxiliary': this.props.aux || this.props.delete,
				'is-disabled': this.props.disabled
			});

			var primaryLabel = this.props.primaryLabel ? React.createElement("div", {className: "Keypad-button-primary-label"}, this.props.primaryLabel) : null;
			var secondaryLabel = this.props.secondaryLabel ? React.createElement("div", {className: "Keypad-button-secondary-label"}, this.props.secondaryLabel) : null;
			var svgIcon = this.props.svgIcon ? React.createElement("span", {className: "Keypad-button-icon", dangerouslySetInnerHTML: { __html: this.props.svgIcon}}) : null;

			return (
				React.createElement("div", {className: "Keypad-cell"}, 
					React.createElement(Tappable, {onTap: this.props.action, className: className, component: "div", disabled: this.props.disabled}, 
						primaryLabel, 
						secondaryLabel, 
						svgIcon
					)
				)
			);
		}
	});


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(33);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(33);

	var CSSCore = __webpack_require__(350);
	var ReactTransitionEvents = __webpack_require__(351);

	var onlyChild = __webpack_require__(144);
	var warning = __webpack_require__(215);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      '%sms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.',
	      NO_EVENT_TIMEOUT
	    ) : null);
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function(done) {
	    if (this.props.appear) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(209);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var ReactChildren = __webpack_require__(126);
	var ReactFragment = __webpack_require__(118);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    if (!children) {
	      return children;
	    }
	    return ReactFragment.extract(ReactChildren.map(children, function(child) {
	      return child;
	    }));
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(208);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(142);
	var emptyFunction = __webpack_require__(209);
	var joinClasses = __webpack_require__(352);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(107);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(142);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(353);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactInstanceMap = __webpack_require__(226);

	var invariant = __webpack_require__(107);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPluginHub = __webpack_require__(26);
	var EventPluginRegistry = __webpack_require__(103);
	var ReactEventEmitterMixin = __webpack_require__(354);
	var ViewportMetrics = __webpack_require__(114);

	var assign = __webpack_require__(142);
	var isEventSupported = __webpack_require__(355);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(356);
	var ReactContext = __webpack_require__(129);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactElement = __webpack_require__(131);
	var ReactElementValidator = __webpack_require__(132);
	var ReactInstanceMap = __webpack_require__(226);
	var ReactLifeCycle = __webpack_require__(229);
	var ReactNativeComponent = __webpack_require__(234);
	var ReactPerf = __webpack_require__(138);
	var ReactPropTypeLocations = __webpack_require__(230);
	var ReactPropTypeLocationNames = __webpack_require__(231);
	var ReactReconciler = __webpack_require__(140);
	var ReactUpdates = __webpack_require__(120);

	var assign = __webpack_require__(142);
	var emptyObject = __webpack_require__(233);
	var invariant = __webpack_require__(107);
	var shouldUpdateReactComponent = __webpack_require__(273);
	var warning = __webpack_require__(215);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      renderedElement = this._renderValidatedComponent();
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._processChildContext(context)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._processChildContext(context)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        context
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function() {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._processChildContext(
	      this._currentElement._context
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(131);
	var ReactFragment = __webpack_require__(118);
	var ReactInstanceHandles = __webpack_require__(136);

	var getIteratorFn = __webpack_require__(235);
	var invariant = __webpack_require__(107);
	var warning = __webpack_require__(215);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(207);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(229);
	var ReactCurrentOwner = __webpack_require__(130);
	var ReactElement = __webpack_require__(131);
	var ReactInstanceMap = __webpack_require__(226);
	var ReactUpdates = __webpack_require__(120);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);
	var warning = __webpack_require__(215);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(220);

	var quoteAttributeValueForBrowser = __webpack_require__(357);
	var warning = __webpack_require__(215);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(253);
	var ReactMount = __webpack_require__(137);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(358);
	var DOMProperty = __webpack_require__(220);
	var DOMPropertyOperations = __webpack_require__(237);
	var ReactBrowserEventEmitter = __webpack_require__(224);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(238);
	var ReactMount = __webpack_require__(137);
	var ReactMultiChild = __webpack_require__(359);
	var ReactPerf = __webpack_require__(138);

	var assign = __webpack_require__(142);
	var escapeTextContentForBrowser = __webpack_require__(240);
	var invariant = __webpack_require__(107);
	var isEventSupported = __webpack_require__(355);
	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(215);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML.__html != null,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit http://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(props.dangerouslySetInnerHTML.__html != null));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPropagators = __webpack_require__(109);
	var ExecutionEnvironment = __webpack_require__(145);
	var FallbackCompositionState = __webpack_require__(360);
	var SyntheticCompositionEvent = __webpack_require__(361);
	var SyntheticInputEvent = __webpack_require__(362);

	var keyOf = __webpack_require__(111);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPluginHub = __webpack_require__(26);
	var EventPropagators = __webpack_require__(109);
	var ExecutionEnvironment = __webpack_require__(145);
	var ReactUpdates = __webpack_require__(120);
	var SyntheticEvent = __webpack_require__(110);

	var isEventSupported = __webpack_require__(355);
	var isTextInputElement = __webpack_require__(363);
	var keyOf = __webpack_require__(111);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(111);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPropagators = __webpack_require__(109);
	var SyntheticMouseEvent = __webpack_require__(364);

	var ReactMount = __webpack_require__(137);
	var keyOf = __webpack_require__(111);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(220);
	var ExecutionEnvironment = __webpack_require__(145);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);

	var emptyFunction = __webpack_require__(209);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(143);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(120);
	var Transaction = __webpack_require__(218);

	var assign = __webpack_require__(142);
	var emptyFunction = __webpack_require__(209);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(365);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);

	var keyMirror = __webpack_require__(207);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var LocalEventTrapMixin = __webpack_require__(366);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var LocalEventTrapMixin = __webpack_require__(366);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(358);
	var DOMChildrenOperations = __webpack_require__(367);
	var DOMPropertyOperations = __webpack_require__(237);
	var ReactMount = __webpack_require__(137);
	var ReactPerf = __webpack_require__(138);

	var invariant = __webpack_require__(107);
	var setInnerHTML = __webpack_require__(272);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var LocalEventTrapMixin = __webpack_require__(366);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(365);
	var DOMPropertyOperations = __webpack_require__(237);
	var LinkedValueUtils = __webpack_require__(368);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);
	var ReactMount = __webpack_require__(137);
	var ReactUpdates = __webpack_require__(120);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);

	var warning = __webpack_require__(215);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(365);
	var LinkedValueUtils = __webpack_require__(368);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);
	var ReactUpdates = __webpack_require__(120);

	var assign = __webpack_require__(142);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(365);
	var DOMPropertyOperations = __webpack_require__(237);
	var LinkedValueUtils = __webpack_require__(368);
	var ReactBrowserComponentMixin = __webpack_require__(248);
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);
	var ReactUpdates = __webpack_require__(120);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);

	var warning = __webpack_require__(215);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(369);
	var ExecutionEnvironment = __webpack_require__(145);
	var PooledClass = __webpack_require__(208);
	var ReactInstanceHandles = __webpack_require__(136);
	var ReactMount = __webpack_require__(137);
	var ReactUpdates = __webpack_require__(120);

	var assign = __webpack_require__(142);
	var getEventTarget = __webpack_require__(210);
	var getUnboundedScrollPosition = __webpack_require__(370);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(220);
	var EventPluginHub = __webpack_require__(26);
	var ReactComponentEnvironment = __webpack_require__(356);
	var ReactClass = __webpack_require__(128);
	var ReactEmptyComponent = __webpack_require__(223);
	var ReactBrowserEventEmitter = __webpack_require__(224);
	var ReactNativeComponent = __webpack_require__(234);
	var ReactDOMComponent = __webpack_require__(239);
	var ReactPerf = __webpack_require__(138);
	var ReactRootIndex = __webpack_require__(267);
	var ReactUpdates = __webpack_require__(120);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(217);
	var PooledClass = __webpack_require__(208);
	var ReactBrowserEventEmitter = __webpack_require__(224);
	var ReactInputSelection = __webpack_require__(371);
	var ReactPutListenerQueue = __webpack_require__(372);
	var Transaction = __webpack_require__(218);

	var assign = __webpack_require__(142);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPropagators = __webpack_require__(109);
	var ReactInputSelection = __webpack_require__(371);
	var SyntheticEvent = __webpack_require__(110);

	var getActiveElement = __webpack_require__(373);
	var isTextInputElement = __webpack_require__(363);
	var keyOf = __webpack_require__(111);
	var shallowEqual = __webpack_require__(213);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(108);
	var EventPluginUtils = __webpack_require__(104);
	var EventPropagators = __webpack_require__(109);
	var SyntheticClipboardEvent = __webpack_require__(374);
	var SyntheticEvent = __webpack_require__(110);
	var SyntheticFocusEvent = __webpack_require__(375);
	var SyntheticKeyboardEvent = __webpack_require__(376);
	var SyntheticMouseEvent = __webpack_require__(364);
	var SyntheticDragEvent = __webpack_require__(377);
	var SyntheticTouchEvent = __webpack_require__(378);
	var SyntheticUIEvent = __webpack_require__(112);
	var SyntheticWheelEvent = __webpack_require__(379);

	var getEventCharCode = __webpack_require__(380);

	var invariant = __webpack_require__(107);
	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(215);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(220);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(128);
	var ReactElement = __webpack_require__(131);

	var invariant = __webpack_require__(107);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(381);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(382);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(225);
	var ReactEmptyComponent = __webpack_require__(223);
	var ReactNativeComponent = __webpack_require__(234);

	var assign = __webpack_require__(142);
	var invariant = __webpack_require__(107);
	var warning = __webpack_require__(215);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(215);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(383);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(208);
	var CallbackQueue = __webpack_require__(217);
	var ReactPutListenerQueue = __webpack_require__(372);
	var Transaction = __webpack_require__(218);

	var assign = __webpack_require__(142);
	var emptyFunction = __webpack_require__(209);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(9);
	var emptyFunction = function () {};

	// for accessing browser globals
	var root = typeof window !== 'undefined' ? window : this;
	var bodyElement;
	if (typeof document !== 'undefined' && 'body' in document) {
	  bodyElement = document.body;
	}

	function updateBoundState (state, bound) {
	  if (!bound) return state;
	  bound = String(bound);
	  var boundTop = !!~bound.indexOf('top');
	  var boundRight = !!~bound.indexOf('right');
	  var boundBottom = !!~bound.indexOf('bottom');
	  var boundLeft = !!~bound.indexOf('left');
	  var boundAll = !!~bound.indexOf('all') ||
	    !(boundTop || boundRight || boundBottom || boundLeft);
	  var boundBox = !~bound.indexOf('point');
	  state.boundTop = boundAll || boundTop;
	  state.boundRight = boundAll || boundRight;
	  state.boundBottom = boundAll || boundBottom;
	  state.boundLeft = boundAll || boundLeft;
	  state.boundBox = boundBox;
	  return state;
	};

	function createUIEvent(draggable) {
	  return {
	    position: {
	      top: draggable.state.offsetTop,
	      left: draggable.state.offsetLeft
	    }
	  };
	}

	function canDragY(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'y';
	}

	function canDragX(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'x';
	}

	function isFunction(func) {
	  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]'
	}

	// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
	function findInArray(array, callback) {
	  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {
	    if (callback.apply(callback, [element, i, array])) return element;
	  }
	}

	function matchesSelector(el, selector) {
	  var method = findInArray([
	    'matches',
	    'webkitMatchesSelector',
	    'mozMatchesSelector',
	    'msMatchesSelector',
	    'oMatchesSelector'
	  ], function(method){
	    return isFunction(el[method]);
	  });

	  return el[method].call(el, selector);
	}

	// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886
	var isTouchDevice = 'ontouchstart' in root // works on most browsers
	                 || 'onmsgesturechange' in root; // works on ie10 on ms surface

	// look ::handleDragStart
	//function isMultiTouch(e) {
	//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1
	//}

	/**
	 * simple abstraction for dragging events names
	 * */
	var dragEventFor = (function () {
	  var eventsFor = {
	    touch: {
	      start: 'touchstart',
	      move: 'touchmove',
	      end: 'touchend'
	    },
	    mouse: {
	      start: 'mousedown',
	      move: 'mousemove',
	      end: 'mouseup'
	    }
	  };
	  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];
	})();

	/**
	 * get {clientX, clientY} positions of control
	 * */
	function getControlPosition(e) {
	  var position = (e.touches && e.touches[0]) || e;
	  return {
	    clientX: position.clientX,
	    clientY: position.clientY
	  }
	}

	function addEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.attachEvent) {
	    el.attachEvent('on' + event, handler);
	  } else if (el.addEventListener) {
	    el.addEventListener(event, handler, true);
	  } else {
	    el['on' + event] = handler;
	  }
	}

	function removeEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.detachEvent) {
	    el.detachEvent('on' + event, handler);
	  } else if (el.removeEventListener) {
	    el.removeEventListener(event, handler, true);
	  } else {
	    el['on' + event] = null;
	  }
	}

	module.exports = React.createClass({
	  displayName: 'Draggable',
	  mixins: [React.addons.PureRenderMixin],

	  propTypes: {
	    /**
	     * `axis` determines which axis the draggable can move.
	     *
	     * 'both' allows movement horizontally and vertically.
	     * 'x' limits movement to horizontal axis.
	     * 'y' limits movement to vertical axis.
	     *
	     * Defaults to 'both'.
	     */
	    axis: React.PropTypes.oneOf(['both', 'x', 'y']),

	    /**
	     * `handle` specifies a selector to be used as the handle that initiates drag.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *        return (
	     *          <Draggable handle=".handle">
	     *            <div>
	     *                <div className="handle">Click me to drag</div>
	     *                <div>This is some other content</div>
	     *            </div>
	     *          </Draggable>
	     *        );
	     *      }
	     *  });
	     * ```
	     */
	    handle: React.PropTypes.string,

	    /**
	     * `cancel` specifies a selector to be used to prevent drag initialization.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return(
	     *              <Draggable cancel=".cancel">
	     *                  <div>
	     *                    <div className="cancel">You can't drag from here</div>
	     *            <div>Dragging here works fine</div>
	     *                  </div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    cancel: React.PropTypes.string,

	    /**
	     * `bound` determines whether to bound the movement to the parent box.
	     *
	     * The property takes a list of space-separated strings. The Draggable
	     * is bounded by the nearest DOMNode.offsetParent. To set the offset
	     * parent, give it a position value other than 'static'.
	     *
	     * Optionally choose one or more bounds from:
	     * 'top' bounds movement to the top edge of the parent box.
	     * 'right' bounds movement to the right edge of the parent box.
	     * 'bottom' bounds movement to the bottom edge of the parent box.
	     * 'left' bounds movement to the left edge of the parent box.
	     * 'all' bounds movement to all edges (default if not specified).
	     *
	     * Optionally choose one anchor from:
	     * 'point' to constrain only the top-left corner.
	     * 'box' to constrain the entire box (default if not specified).
	     *
	     * You may use more than one bound, e.g. 'top left point'. Set to a
	     * falsy value to disable.
	     *
	     * Defaults to 'all box'.
	     */
	    bound: React.PropTypes.string,

	    /**
	     * `grid` specifies the x and y that dragging should snap to.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *              <Draggable grid={[25, 25]}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *      }
	     *   });
	     * ```
	     */
	    grid: React.PropTypes.arrayOf(React.PropTypes.number),

	    /**
	     * `constrain` takes a function to constrain the dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   function constrain (snap) {
	     *         function constrainOffset (offset, prev) {
	     *               var delta = offset - prev;
	     *               if (Math.abs(delta) >= snap) {
	     *                     return prev + (delta < 0 ? -snap : snap);
	     *               }
	     *               return prev;
	     *         }
	     *         return function (pos) {
	     *               return {
	     *                     top: constrainOffset(pos.top, pos.prevTop),
	     *                     left: constrainOffset(pos.left, pos.prevLeft)
	     *               };
	     *         };
	     *   }
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *               <Draggable constrain={constrain}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *       }
	     *   });
	     * ```
	     */
	    constrain: React.PropTypes.func,

	    /**
	     * `start` specifies the x and y that the dragged item should start at
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return (
	     *              <Draggable start={{x: 25, y: 25}}>
	     *                  <div>I start with left: 25px; top: 25px;</div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    start: React.PropTypes.object,

	    /**
	     * `zIndex` specifies the zIndex to use while dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *  var App = React.createClass({
	     *      render: function () {
	     *          return (
	     *              <Draggable zIndex={100}>
	     *                  <div>I have a zIndex</div>
	     *              </Draggable>
	     *          );
	     *      }
	     *  });
	     * ```
	     */
	    zIndex: React.PropTypes.number,

	    /**
	     * `useChild` determines whether to use the first child as root.
	     *
	     * If false, a div is created. This option is required if any children
	     * have a ref.
	     *
	     * Defaults to true.
	     */
	    useChild: React.PropTypes.bool,

	    /**
	     * Called when dragging starts.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStart: React.PropTypes.func,

	    /**
	     * Called while dragging.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onDrag: React.PropTypes.func,

	    /**
	     * Called when dragging stops.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStop: React.PropTypes.func,

	    /**
	     * A workaround option which can be passed if onMouseDown needs to be accessed, since it'll always be blocked (due to that there's internal use of onMouseDown)
	     *
	     */
	    onMouseDown: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      axis: 'both',
	      bound: null,
	      handle: null,
	      cancel: null,
	      grid: null,
	      start: {},
	      zIndex: NaN,
	      useChild: true,
	      onStart: emptyFunction,
	      onDrag: emptyFunction,
	      onStop: emptyFunction,
	      onMouseDown: emptyFunction
	    };
	  },

	  getInitialState: function () {
	    var state = {
	      // Whether or not currently dragging
	      dragging: false,

	      // Pointer offset on screen
	      clientX: 0, clientY: 0,

	      // DOMNode offset relative to parent
	      offsetLeft: this.props.start.x || 0, offsetTop: this.props.start.y || 0
	    };

	    updateBoundState(state, this.props.bound);

	    return state;
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var state = updateBoundState({}, nextProps.bound);
	    if (nextProps.start) {
	      if (nextProps.start.x != null) {
	        state.offsetLeft = nextProps.start.x || 0;
	      }
	      if (nextProps.start.y != null) {
	        state.offsetTop = nextProps.start.y || 0;
	      }
	    }
	    this.setState(state);
	  },

	  componentWillUnmount: function() {
	    // Remove any leftover event handlers
	    removeEvent(root, dragEventFor['move'], this.handleDrag);
	    removeEvent(root, dragEventFor['end'], this.handleDragEnd);
	  },

	  handleDragStart: function (e) {
	    // todo: write right implementation to prevent multitouch drag
	    // prevent multi-touch events
	    // if (isMultiTouch(e)) {
	    //     this.handleDragEnd.apply(e, arguments);
	    //     return
	    // }

	    // Make it possible to attach event handlers on top of this one
	    this.props.onMouseDown(e);

	    // Short circuit if handle or cancel prop was provided and selector doesn't match
	    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||
	      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {
	      return;
	    }

	    var dragPoint = getControlPosition(e);

	    // Initiate dragging
	    this.setState({
	      dragging: true,
	      clientX: dragPoint.clientX,
	      clientY: dragPoint.clientY
	    });

	    // Call event handler
	    this.props.onStart(e, createUIEvent(this));

	    // Add event handlers
	    addEvent(root, dragEventFor['move'], this.handleDrag);
	    addEvent(root, dragEventFor['end'], this.handleDragEnd);

	    // Add dragging class to body element
	    if (bodyElement) bodyElement.className += ' react-draggable-dragging';
	  },

	  handleDragEnd: function (e) {
	    // Short circuit if not currently dragging
	    if (!this.state.dragging) {
	      return;
	    }

	    // Turn off dragging
	    this.setState({
	      dragging: false
	    });

	    // Call event handler
	    this.props.onStop(e, createUIEvent(this));

	    // Remove event handlers
	    removeEvent(root, dragEventFor['move'], this.handleDrag);
	    removeEvent(root, dragEventFor['end'], this.handleDragEnd);

	    // Remove dragging class from body element
	    if (bodyElement) {
	      var className = bodyElement.className;
	      bodyElement.className =
	        className.replace(/(?:^|\s+)react-draggable-dragging\b/, ' ');
	    }
	  },

	  handleDrag: function (e) {
	    var dragPoint = getControlPosition(e);
	    var offsetLeft = this._toPixels(this.state.offsetLeft);
	    var offsetTop = this._toPixels(this.state.offsetTop);

	    var state = {
	      offsetLeft: offsetLeft,
	      offsetTop: offsetTop
	    };

	    // Get parent DOM node
	    var node = this.getDOMNode();
	    var offsetParent = node.offsetParent;
	    var offset, boundingValue;

	    if (canDragX(this)) {
	      // Calculate updated position
	      offset = offsetLeft + dragPoint.clientX - this.state.clientX;

	      // Bound movement to parent box
	      if (this.state.boundLeft) {
	        boundingValue = state.offsetLeft - node.offsetLeft;
	        if (offset < boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      if (this.state.boundRight) {
	        boundingValue += offsetParent.clientWidth;
	        if (this.state.boundBox) {
	          boundingValue -= node.offsetWidth;
	        }
	        if (offset > boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      // Update left
	      state.offsetLeft = offset;
	    }

	    if (canDragY(this)) {
	      // Calculate updated position
	      offset = offsetTop + dragPoint.clientY - this.state.clientY;
	      // Bound movement to parent box
	      if (this.state.boundTop) {
	        boundingValue = state.offsetTop - node.offsetTop;
	        if (offset < boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      if (this.state.boundBottom) {
	        boundingValue += offsetParent.clientHeight;
	        if (this.state.boundBox) {
	          boundingValue -= node.offsetHeight;
	        }
	        if (offset > boundingValue) {
	          offset = boundingValue;
	        }
	      }
	      // Update top
	      state.offsetTop = offset;
	    }

	    var constrain = this.props.constrain;
	    var grid = this.props.grid;

	    // Backwards-compatibility for snap to grid
	    if (!constrain && Array.isArray(grid)) {
	      var constrainOffset = function (offset, prev, snap) {
	        var delta = offset - prev;
	        if (Math.abs(delta) >= snap) {
	          return prev + parseInt(delta / snap, 10) * snap;
	        }
	        return prev;
	      };
	      constrain = function (pos) {
	        return {
	          left: constrainOffset(pos.left, pos.prevLeft, grid[0]),
	          top: constrainOffset(pos.top, pos.prevTop, grid[1])
	        };
	      };
	    }

	    // Constrain if function has been provided
	    var positions;
	    if (constrain) {
	      // Constrain positions
	      positions = constrain({
	        prevLeft: this.state.offsetLeft,
	        prevTop: this.state.offsetTop,
	        left: state.offsetLeft,
	        top: state.offsetTop
	      });
	      if (positions) {
	        // Update left
	        if ('left' in positions && !isNaN(positions.left)) {
	          state.offsetLeft = positions.left;
	        }
	        // Update top
	        if ('top' in positions && !isNaN(positions.top)) {
	          state.offsetTop = positions.top;
	        }
	      }
	    }

	    // Save new state
	    state.clientX = this.state.clientX + (state.offsetLeft - offsetLeft);
	    state.clientY = this.state.clientY + (state.offsetTop - offsetTop);
	    this.setState(state);

	    // Call event handler
	    this.props.onDrag(e, createUIEvent(this));
	  },

	  onTouchStart: function (e) {
	    e.preventDefault(); // prevent for scroll
	    return this.handleDragStart.apply(this, arguments);
	  },

	  render: function () {
	    var style = {
	      top: this.state.offsetTop,
	      left: this.state.offsetLeft
	    };

	    // Set zIndex if currently dragging and prop has been provided
	    if (this.state.dragging && !isNaN(this.props.zIndex)) {
	      style.zIndex = this.props.zIndex;
	    }

	    var props = {
	      style: style,
	      className: 'react-draggable',

	      onMouseDown: this.handleDragStart,
	      onTouchStart: this.onTouchStart,

	      onMouseUp: this.handleDragEnd,
	      onTouchEnd: this.handleDragEnd
	    };

	    // Reuse the child provided
	    // This makes it flexible to use whatever element is wanted (div, ul, etc)
	    if (this.props.useChild) {
	      return React.addons.cloneWithProps(React.Children.only(this.props.children), props);
	    }

	    return React.DOM.div(props, this.props.children);
	  },

	  _toPixels: function (value) {

	    // Support percentages
	    if (typeof value == 'string' && value.slice(-1) == '%') {
	      return parseInt((+value.replace('%', '') / 100) *
	        this.getDOMNode().offsetParent.clientWidth, 10) || 0;
	    }

	    // Invalid values become zero
	    var i = parseInt(value, 10);
	    if (isNaN(i) || !isFinite(i)) return 0;

	    return i;
	  }

	});


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Adapted from ReactART:
	// https://github.com/reactjs/react-art

	var assign = __webpack_require__(142);
	var RenderLayer = __webpack_require__(338);

	function createComponent (name) {
	  var ReactCanvasComponent = function (props) {
	    this.node = null;
	    this.subscriptions = null;
	    this.listeners = null;
	    this.node = new RenderLayer();
	    this._mountImage = null;
	    this._renderedChildren = null;
	    this._mostRecentlyPlacedChild = null;
	  };
	  ReactCanvasComponent.displayName = name;
	  for (var i = 1, l = arguments.length; i < l; i++) {
	    assign(ReactCanvasComponent.prototype, arguments[i]);
	  }

	  return ReactCanvasComponent;
	}

	module.exports = createComponent;


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Adapted from ReactART:
	// https://github.com/reactjs/react-art

	var FrameUtils = __webpack_require__(339);
	var DrawingUtils = __webpack_require__(340);
	var EventTypes = __webpack_require__(391);

	var LAYER_GUID = 0;

	var LayerMixin = {

	  construct: function(element) {
	    this._currentElement = element;
	    this._layerId = LAYER_GUID++;
	  },

	  getPublicInstance: function() {
	    return this.node;
	  },

	  putEventListener: function(type, listener) {
	    var subscriptions = this.subscriptions || (this.subscriptions = {});
	    var listeners = this.listeners || (this.listeners = {});
	    listeners[type] = listener;
	    if (listener) {
	      if (!subscriptions[type]) {
	        subscriptions[type] = this.node.subscribe(type, listener, this);
	      }
	    } else {
	      if (subscriptions[type]) {
	        subscriptions[type]();
	        delete subscriptions[type];
	      }
	    }
	  },

	  handleEvent: function(event) {
	    // TODO
	  },

	  destroyEventListeners: function() {
	    // TODO
	  },

	  applyLayerProps: function (prevProps, props) {
	    var layer = this.node;
	    var style = (props && props.style) ? props.style : {};
	    layer._originalStyle = style;

	    // Common layer properties
	    layer.alpha = style.alpha;
	    layer.backgroundColor = style.backgroundColor;
	    layer.borderColor = style.borderColor;
	    layer.borderRadius = style.borderRadius;
	    layer.clipRect = style.clipRect;
	    layer.frame = FrameUtils.make(style.left || 0, style.top || 0, style.width || 0, style.height || 0);
	    layer.scale = style.scale;
	    layer.translateX = style.translateX;
	    layer.translateY = style.translateY;
	    layer.zIndex = style.zIndex;

	    // Generate backing store ID as needed.
	    if (props.useBackingStore) {
	      layer.backingStoreId = this._layerId;
	    }

	    // Register events
	    for (var type in EventTypes) {
	      this.putEventListener(EventTypes[type], props[type]);
	    }
	  },

	  mountComponentIntoNode: function(rootID, container) {
	    throw new Error(
	      'You cannot render a Canvas component standalone. ' +
	      'You need to wrap it in a Surface.'
	    );
	  },

	  unmountComponent: function() {
	    // Purge backing stores on unmount.
	    var layer = this.node;
	    if (layer.backingStoreId) {
	      DrawingUtils.invalidateBackingStore(layer.backingStoreId);
	    }
	    this.destroyEventListeners();
	  }

	};

	module.exports = LayerMixin;


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Adapted from ReactART:
	// https://github.com/reactjs/react-art

	var React = __webpack_require__(15);
	var ReactMultiChild = __webpack_require__(359);
	var assign = __webpack_require__(142);
	var emptyObject = __webpack_require__(233);

	var ContainerMixin = assign({}, ReactMultiChild.Mixin, {

	  /**
	   * Moves a child component to the supplied index.
	   *
	   * @param {ReactComponent} child Component to move.
	   * @param {number} toIndex Destination index of the element.
	   * @protected
	   */
	  moveChild: function(child, toIndex) {
	    var childNode = child._mountImage;
	    var mostRecentlyPlacedChild = this._mostRecentlyPlacedChild;
	    if (mostRecentlyPlacedChild == null) {
	      // I'm supposed to be first.
	      if (childNode.previousSibling) {
	        if (this.node.firstChild) {
	          childNode.injectBefore(this.node.firstChild);
	        } else {
	          childNode.inject(this.node);
	        }
	      }
	    } else {
	      // I'm supposed to be after the previous one.
	      if (mostRecentlyPlacedChild.nextSibling !== childNode) {
	        if (mostRecentlyPlacedChild.nextSibling) {
	          childNode.injectBefore(mostRecentlyPlacedChild.nextSibling);
	        } else {
	          childNode.inject(this.node);
	        }
	      }
	    }
	    this._mostRecentlyPlacedChild = childNode;
	  },

	  /**
	   * Creates a child component.
	   *
	   * @param {ReactComponent} child Component to create.
	   * @param {object} childNode ART node to insert.
	   * @protected
	   */
	  createChild: function(child, childNode) {
	    child._mountImage = childNode;
	    var mostRecentlyPlacedChild = this._mostRecentlyPlacedChild;
	    if (mostRecentlyPlacedChild == null) {
	      // I'm supposed to be first.
	      if (this.node.firstChild) {
	        childNode.injectBefore(this.node.firstChild);
	      } else {
	        childNode.inject(this.node);
	      }
	    } else {
	      // I'm supposed to be after the previous one.
	      if (mostRecentlyPlacedChild.nextSibling) {
	        childNode.injectBefore(mostRecentlyPlacedChild.nextSibling);
	      } else {
	        childNode.inject(this.node);
	      }
	    }
	    this._mostRecentlyPlacedChild = childNode;
	  },

	  /**
	   * Removes a child component.
	   *
	   * @param {ReactComponent} child Child to remove.
	   * @protected
	   */
	  removeChild: function(child) {
	    child._mountImage.remove();
	    child._mountImage = null;
	    this.node.invalidateLayout();
	  },

	  updateChildrenAtRoot: function(nextChildren, transaction) {
	    this.updateChildren(nextChildren, transaction, emptyObject);
	  },

	  mountAndInjectChildrenAtRoot: function(children, transaction) {
	    this.mountAndInjectChildren(children, transaction, emptyObject);
	  },

	  /**
	   * Override to bypass batch updating because it is not necessary.
	   *
	   * @param {?object} nextChildren.
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @override {ReactMultiChild.Mixin.updateChildren}
	   */
	  updateChildren: function(nextChildren, transaction, context) {
	    this._mostRecentlyPlacedChild = null;
	    this._updateChildren(nextChildren, transaction, context);
	  },

	  // Shorthands

	  mountAndInjectChildren: function(children, transaction, context) {
	    var mountedImages = this.mountChildren(
	      children,
	      transaction,
	      context
	    );

	    // Each mount image corresponds to one of the flattened children
	    var i = 0;
	    for (var key in this._renderedChildren) {
	      if (this._renderedChildren.hasOwnProperty(key)) {
	        var child = this._renderedChildren[key];
	        child._mountImage = mountedImages[i];
	        mountedImages[i].inject(this.node);
	        i++;
	      }
	    }
	  }

	});

	module.exports = ContainerMixin;


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FrameUtils = __webpack_require__(339);
	var DrawingUtils = __webpack_require__(340);
	var EventTypes = __webpack_require__(391);

	function RenderLayer () {
	  this.children = [];
	  this.frame = FrameUtils.zero();
	}

	RenderLayer.prototype = {

	  /**
	   * Retrieve the root injection layer
	   *
	   * @return {RenderLayer}
	   */
	  getRootLayer: function () {
	    var root = this;
	    while (root.parentLayer) {
	      root = root.parentLayer;
	    }
	    return root;
	  },

	  /**
	   * RenderLayers are injected into a root owner layer whenever a Surface is
	   * mounted. This is the integration point with React internals.
	   *
	   * @param {RenderLayer} parentLayer
	   */
	  inject: function (parentLayer) {
	    if (this.parentLayer && this.parentLayer !== parentLayer) {
	      this.remove();
	    }
	    if (!this.parentLayer) {
	      parentLayer.addChild(this);
	    }
	  },

	  /**
	   * Inject a layer before a reference layer
	   *
	   * @param {RenderLayer} parentLayer
	   * @param {RenderLayer} referenceLayer
	   */
	  injectBefore: function (parentLayer, referenceLayer) {
	    // FIXME
	    this.inject(parentLayer);
	  },

	  /**
	   * Add a child to the render layer
	   *
	   * @param {RenderLayer} child
	   */
	  addChild: function (child) {
	    child.parentLayer = this;
	    this.children.push(child);
	  },

	  /**
	   * Remove a layer from it's parent layer
	   */
	  remove: function () {
	    if (this.parentLayer) {
	      this.parentLayer.children.splice(this.parentLayer.children.indexOf(this), 1);
	    }
	  },

	  /**
	   * Attach an event listener to a layer. Supported events are defined in
	   * lib/EventTypes.js
	   *
	   * @param {String} type
	   * @param {Function} callback
	   * @param {?Object} callbackScope
	   * @return {Function} invoke to unsubscribe the listener
	   */
	  subscribe: function (type, callback, callbackScope) {
	    // This is the integration point with React, called from LayerMixin.putEventListener().
	    // Enforce that only a single callbcak can be assigned per event type.
	    for (var eventType in EventTypes) {
	      if (EventTypes[eventType] === type) {
	        this[eventType] = callback;
	      }
	    }

	    // Return a function that can be called to unsubscribe from the event.
	    return this.removeEventListener.bind(this, type, callback, callbackScope);
	  },

	  /**
	   * @param {String} type
	   * @param {Function} callback
	   * @param {?Object} callbackScope
	   */
	  addEventListener: function (type, callback, callbackScope) {
	    for (var eventType in EventTypes) {
	      if (EventTypes[eventType] === type) {
	        delete this[eventType];
	      }
	    }
	  },

	  /**
	   * @param {String} type
	   * @param {Function} callback
	   * @param {?Object} callbackScope
	   */
	  removeEventListener: function (type, callback, callbackScope) {
	    var listeners = this.eventListeners[type];
	    var listener;
	    if (listeners) {
	      for (var index=0, len=listeners.length; index < len; index++) {
	        listener = listeners[index];
	        if (listener.callback === callback &&
	            listener.callbackScope === callbackScope) {
	          listeners.splice(index, 1);
	          break;
	        }
	      }
	    }
	  },

	  /**
	   * Translate a layer's frame
	   *
	   * @param {Number} x
	   * @param {Number} y
	   */
	  translate: function (x, y) {
	    if (this.frame) {
	      this.frame.x += x;
	      this.frame.y += y;
	    }

	    if (this.clipRect) {
	      this.clipRect.x += x;
	      this.clipRect.y += y;
	    }

	    if (this.children) {
	      this.children.forEach(function (child) {
	        child.translate(x, y);
	      });
	    }
	  },

	  /**
	   * Layers should call this method when they need to be redrawn. Note the
	   * difference here between `invalidateBackingStore`: updates that don't
	   * trigger layout should prefer `invalidateLayout`. For instance, an image
	   * component that is animating alpha level after the image loads would
	   * call `invalidateBackingStore` once after the image loads, and at each
	   * step in the animation would then call `invalidateRect`.
	   *
	   * @param {?Frame} frame Optional, if not passed the entire layer's frame
	   *   will be invalidated.
	   */
	  invalidateLayout: function () {
	    // Bubble all the way to the root layer.
	    this.getRootLayer().draw();
	  },

	  /**
	   * Layers should call this method when their backing <canvas> needs to be
	   * redrawn. For instance, an image component would call this once after the
	   * image loads.
	   */
	  invalidateBackingStore: function () {
	    if (this.backingStoreId) {
	      DrawingUtils.invalidateBackingStore(this.backingStoreId);
	    }
	    this.invalidateLayout();
	  },

	  /**
	   * Only the root owning layer should implement this function.
	   */
	  draw: function () {
	    // Placeholer
	  }

	};

	module.exports = RenderLayer;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function Frame (x, y, width, height) {
	  this.x = x;
	  this.y = y;
	  this.width = width;
	  this.height = height;
	}

	/**
	 * Get a frame object
	 *
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} width
	 * @param {Number} height
	 * @return {Frame}
	 */
	function make (x, y, width, height) {
	  return new Frame(x, y, width, height);
	}

	/**
	 * Return a zero size anchored at (0, 0).
	 *
	 * @return {Frame}
	 */
	function zero () {
	  return make(0, 0, 0, 0);
	}

	/**
	 * Return a cloned frame
	 *
	 * @param {Frame} frame
	 * @return {Frame}
	 */
	function clone (frame) {
	  return make(frame.x, frame.y, frame.width, frame.height);
	}

	/**
	 * Creates a new frame by a applying edge insets. This method accepts CSS
	 * shorthand notation e.g. inset(myFrame, 10, 0);
	 *
	 * @param {Frame} frame
	 * @param {Number} top
	 * @param {Number} right
	 * @param {?Number} bottom
	 * @param {?Number} left
	 * @return {Frame}
	 */
	function inset (frame, top, right, bottom, left) {
	  var frameCopy = clone(frame);

	  // inset(myFrame, 10, 0) => inset(myFrame, 10, 0, 10, 0)
	  if (typeof bottom === 'undefined') {
	    bottom = top;
	    left = right;
	  }

	  // inset(myFrame, 10) => inset(myFrame, 10, 10, 10, 10)
	  if (typeof right === 'undefined') {
	    right = bottom = left = top;
	  }

	  frameCopy.x += left;
	  frameCopy.y += top;
	  frameCopy.height -= (top + bottom);
	  frameCopy.width -= (left + right);

	  return frameCopy;
	}

	/**
	 * Compute the intersection region between 2 frames.
	 *
	 * @param {Frame} frame
	 * @param {Frame} otherFrame
	 * @return {Frame}
	 */
	function intersection (frame, otherFrame) {
	  var x = Math.max(frame.x, otherFrame.x);
	  var width = Math.min(frame.x + frame.width, otherFrame.x + otherFrame.width);
	  var y = Math.max(frame.y, otherFrame.y);
	  var height = Math.min(frame.y + frame.height, otherFrame.y + otherFrame.height);
	  if (width >= x && height >= y) {
	    return make(x, y, width - x, height - y);
	  }
	  return null;
	}

	/**
	 * Compute the union of two frames
	 *
	 * @param {Frame} frame
	 * @param {Frame} otherFrame
	 * @return {Frame}
	 */
	function union (frame, otherFrame) {
	  var x1 = Math.min(frame.x, otherFrame.x);
	  var x2 = Math.max(frame.x + frame.width, otherFrame.x + otherFrame.width);
	  var y1 = Math.min(frame.y, otherFrame.y);
	  var y2 = Math.max(frame.y + frame.height, otherFrame.y + otherFrame.height);
	  return make(x1, y1, x2 - x1, y2 - y1);
	}

	/**
	 * Determine if 2 frames intersect each other
	 *
	 * @param {Frame} frame
	 * @param {Frame} otherFrame
	 * @return {Boolean}
	 */
	function intersects (frame, otherFrame) {
	  return !(otherFrame.x > frame.x + frame.width ||
	           otherFrame.x + otherFrame.width < frame.x ||
	           otherFrame.y > frame.y + frame.height ||
	           otherFrame.y + otherFrame.height < frame.y);
	}

	module.exports = {
	  make: make,
	  zero: zero,
	  clone: clone,
	  inset: inset,
	  intersection: intersection,
	  intersects: intersects,
	  union: union
	};



/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ImageCache = __webpack_require__(343);
	var FontUtils = __webpack_require__(346);
	var FontFace = __webpack_require__(187);
	var FrameUtils = __webpack_require__(339);
	var CanvasUtils = __webpack_require__(392);
	var Canvas = __webpack_require__(393);

	// Global backing store <canvas> cache
	var _backingStores = [];

	/**
	 * Maintain a cache of backing <canvas> for RenderLayer's which are accessible
	 * through the RenderLayer's `backingStoreId` property.
	 *
	 * @param {String} id The unique `backingStoreId` for a RenderLayer
	 * @return {HTMLCanvasElement}
	 */
	function getBackingStore (id) {
	  for (var i=0, len=_backingStores.length; i < len; i++) {
	    if (_backingStores[i].id === id) {
	      return _backingStores[i].canvas;
	    }
	  }
	  return null;
	}

	/**
	 * Purge a layer's backing store from the cache.
	 *
	 * @param {String} id The layer's backingStoreId
	 */
	function invalidateBackingStore (id) {
	  for (var i=0, len=_backingStores.length; i < len; i++) {
	    if (_backingStores[i].id === id) {
	      _backingStores.splice(i, 1);
	      break;
	    }
	  }
	}

	/**
	 * Purge the entire backing store cache.
	 */
	function invalidateAllBackingStores () {
	  _backingStores = [];
	}

	/**
	 * Find the nearest backing store ancestor for a given layer.
	 *
	 * @param {RenderLayer} layer
	 */
	function getBackingStoreAncestor (layer) {
	  while (layer) {
	    if (layer.backingStoreId) {
	      return layer;
	    }
	    layer = layer.parentLayer;
	  }
	  return null;
	}

	/**
	 * Check if a layer is using a given image URL.
	 *
	 * @param {RenderLayer} layer
	 * @param {String} imageUrl
	 * @return {Boolean}
	 */
	function layerContainsImage (layer, imageUrl) {
	  // Check the layer itself.
	  if (layer.type === 'image' && layer.imageUrl === imageUrl) {
	    return layer;
	  }

	  // Check the layer's children.
	  if (layer.children) {
	    for (var i=0, len=layer.children.length; i < len; i++) {
	      if (layerContainsImage(layer.children[i], imageUrl)) {
	        return layer.children[i];
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Check if a layer is using a given FontFace.
	 *
	 * @param {RenderLayer} layer
	 * @param {FontFace} fontFace
	 * @return {Boolean}
	 */
	function layerContainsFontFace (layer, fontFace) {
	  // Check the layer itself.
	  if (layer.type === 'text' && layer.fontFace && layer.fontFace.id === fontFace.id) {
	    return layer;
	  }

	  // Check the layer's children.
	  if (layer.children) {
	    for (var i=0, len=layer.children.length; i < len; i++) {
	      if (layerContainsFontFace(layer.children[i], fontFace)) {
	        return layer.children[i];
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Invalidates the backing stores for layers which contain an image layer
	 * associated with the given imageUrl.
	 *
	 * @param {String} imageUrl
	 */
	function handleImageLoad (imageUrl) {
	  _backingStores.forEach(function (backingStore) {
	    if (layerContainsImage(backingStore.layer, imageUrl)) {
	      invalidateBackingStore(backingStore.id);
	    }
	  });
	}

	/**
	 * Invalidates the backing stores for layers which contain a text layer
	 * associated with the given font face.
	 *
	 * @param {FontFace} fontFace
	 */
	function handleFontLoad (fontFace) {
	  _backingStores.forEach(function (backingStore) {
	    if (layerContainsFontFace(backingStore.layer, fontFace)) {
	      invalidateBackingStore(backingStore.id);
	    }
	  });
	}

	/**
	 * Draw a RenderLayer instance to a <canvas> context.
	 *
	 * @param {CanvasRenderingContext2d} ctx
	 * @param {RenderLayer} layer
	 */
	function drawRenderLayer (ctx, layer) {
	  var customDrawFunc;

	  // Performance: avoid drawing hidden layers.
	  if (typeof layer.alpha === 'number' && layer.alpha <= 0) {
	    return;
	  }

	  switch (layer.type) {
	    case 'image':
	      customDrawFunc = drawImageRenderLayer;
	      break;

	    case 'text':
	      customDrawFunc = drawTextRenderLayer;
	      break;

	    case 'gradient':
	      customDrawFunc = drawGradientRenderLayer;
	      break;
	  }

	  // Establish drawing context for certain properties:
	  // - alpha
	  // - translate
	  var saveContext = (layer.alpha !== null && layer.alpha < 1) ||
	                    (layer.translateX || layer.translateY);

	  if (saveContext) {
	    ctx.save();

	    // Alpha:
	    if (layer.alpha !== null && layer.alpha < 1) {
	      ctx.globalAlpha = layer.alpha;
	    }

	    // Translation:
	    if (layer.translateX || layer.translateY) {
	      ctx.translate(layer.translateX || 0, layer.translateY || 0);
	    }
	  }

	  // If the layer is bitmap-cacheable, draw in a pooled off-screen canvas.
	  // We disable backing stores on pad since we flip there.
	  if (layer.backingStoreId) {
	    drawCacheableRenderLayer(ctx, layer, customDrawFunc);
	  } else {
	    // Draw default properties, such as background color.
	    ctx.save();
	    drawBaseRenderLayer(ctx, layer);

	    // Draw custom properties if needed.
	    customDrawFunc && customDrawFunc(ctx, layer);
	    ctx.restore();

	    // Draw child layers, sorted by their z-index.
	    if (layer.children) {
	      layer.children.slice().sort(sortByZIndexAscending).forEach(function (childLayer) {
	        drawRenderLayer(ctx, childLayer);
	      });
	    }
	  }

	  // Pop the context state if we established a new drawing context.
	  if (saveContext) {
	    ctx.restore();
	  }
	}

	/**
	 * Draw base layer properties into a rendering context.
	 * NOTE: The caller is responsible for calling save() and restore() as needed.
	 *
	 * @param {CanvasRenderingContext2d} ctx
	 * @param {RenderLayer} layer
	 */
	function drawBaseRenderLayer (ctx, layer) {
	  var frame = layer.frame;

	  // Border radius:
	  if (layer.borderRadius) {
	    ctx.beginPath();
	    ctx.moveTo(frame.x + layer.borderRadius, frame.y);
	    ctx.arcTo(frame.x + frame.width, frame.y, frame.x + frame.width, frame.y + frame.height, layer.borderRadius);
	    ctx.arcTo(frame.x + frame.width, frame.y + frame.height, frame.x, frame.y + frame.height, layer.borderRadius);
	    ctx.arcTo(frame.x, frame.y + frame.height, frame.x, frame.y, layer.borderRadius);
	    ctx.arcTo(frame.x, frame.y, frame.x + frame.width, frame.y, layer.borderRadius);
	    ctx.closePath();

	    // Create a clipping path when drawing an image or using border radius.
	    if (layer.type === 'image') {
	      ctx.clip();
	    }

	    // Border with border radius:
	    if (layer.borderColor) {
	      ctx.lineWidth = layer.borderWidth || 1;
	      ctx.strokeStyle = layer.borderColor;
	      ctx.stroke();
	    }
	  }

	  // Border color (no border radius):
	  if (layer.borderColor && !layer.borderRadius) {
	    ctx.lineWidth = layer.borderWidth || 1;
	    ctx.strokeStyle = layer.borderColor;
	    ctx.strokeRect(frame.x, frame.y, frame.width, frame.height);
	  }

	  // Background color:
	  if (layer.backgroundColor) {
	    ctx.fillStyle = layer.backgroundColor;
	    if (layer.borderRadius) {
	      // Fill the current path when there is a borderRadius set.
	      ctx.fill();
	    } else {
	      ctx.fillRect(frame.x, frame.y, frame.width, frame.height);
	    }
	  }
	}

	/**
	 * Draw a bitmap-cacheable layer into a pooled <canvas>. The result will be
	 * drawn into the given context. This will populate the layer backing store
	 * cache with the result.
	 *
	 * @param {CanvasRenderingContext2d} ctx
	 * @param {RenderLayer} layer
	 * @param {Function} customDrawFunc
	 * @private
	 */
	function drawCacheableRenderLayer (ctx, layer, customDrawFunc) {
	  // See if there is a pre-drawn canvas in the pool.
	  var backingStore = getBackingStore(layer.backingStoreId);
	  var backingStoreScale = layer.scale || window.devicePixelRatio;
	  var frameOffsetY = layer.frame.y;
	  var frameOffsetX = layer.frame.x;
	  var backingContext;

	  if (!backingStore) {
	    if (_backingStores.length >= Canvas.poolSize) {
	      // Re-use the oldest backing store once we reach the pooling limit.
	      backingStore = _backingStores[0].canvas;
	      Canvas.call(backingStore, layer.frame.width, layer.frame.height, backingStoreScale);

	      // Move the re-use canvas to the front of the queue.
	      _backingStores[0].id = layer.backingStoreId;
	      _backingStores[0].canvas = backingStore;
	      _backingStores.push(_backingStores.shift());
	    } else {
	      // Create a new backing store, we haven't yet reached the pooling limit
	      backingStore = new Canvas(layer.frame.width, layer.frame.height, backingStoreScale);
	      _backingStores.push({
	        id: layer.backingStoreId,
	        layer: layer,
	        canvas: backingStore
	      });
	    }

	    // Draw into the backing <canvas> at (0, 0) - we will later use the
	    // <canvas> to draw the layer as an image at the proper coordinates.
	    backingContext = backingStore.getContext('2d');
	    layer.translate(-frameOffsetX, -frameOffsetY);

	    // Draw default properties, such as background color.
	    backingContext.save();
	    drawBaseRenderLayer(backingContext, layer);

	    // Custom drawing operations
	    customDrawFunc && customDrawFunc(backingContext, layer);
	    backingContext.restore();

	    // Draw child layers, sorted by their z-index.
	    if (layer.children) {
	      layer.children.slice().sort(sortByZIndexAscending).forEach(function (childLayer) {
	        drawRenderLayer(backingContext, childLayer);
	      });
	    }

	    // Restore layer's original frame.
	    layer.translate(frameOffsetX, frameOffsetY);
	  }

	  // We have the pre-rendered canvas ready, draw it into the destination canvas.
	  if (layer.clipRect) {
	    // Fill the clipping rect in the destination canvas.
	    var sx = (layer.clipRect.x - layer.frame.x) * backingStoreScale;
	    var sy = (layer.clipRect.y - layer.frame.y) * backingStoreScale;
	    var sw = layer.clipRect.width * backingStoreScale;
	    var sh = layer.clipRect.height * backingStoreScale;
	    var dx = layer.clipRect.x;
	    var dy = layer.clipRect.y;
	    var dw = layer.clipRect.width;
	    var dh = layer.clipRect.height;

	    // No-op for zero size rects. iOS / Safari will throw an exception.
	    if (sw > 0 && sh > 0) {
	      ctx.drawImage(backingStore.getRawCanvas(), sx, sy, sw, sh, dx, dy, dw, dh);
	    }
	  } else {
	    // Fill the entire canvas
	    ctx.drawImage(backingStore.getRawCanvas(), layer.frame.x, layer.frame.y, layer.frame.width, layer.frame.height);
	  }
	}

	/**
	 * @private
	 */
	function sortByZIndexAscending (layerA, layerB) {
	  return (layerA.zIndex || 0) - (layerB.zIndex || 0);
	}

	/**
	 * @private
	 */
	function drawImageRenderLayer (ctx, layer) {
	  if (!layer.imageUrl) {
	    return;
	  }

	  // Don't draw until loaded
	  var image = ImageCache.get(layer.imageUrl);
	  if (!image.isLoaded()) {
	    return;
	  }

	  CanvasUtils.drawImage(ctx, image, layer.frame.x, layer.frame.y, layer.frame.width, layer.frame.height);
	}

	/**
	 * @private
	 */
	function drawTextRenderLayer (ctx, layer) {
	  // Fallback to standard font.
	  var fontFace = layer.fontFace || FontFace.Default();

	  // Don't draw text until loaded
	  if (!FontUtils.isFontLoaded(fontFace)) {
	    return;
	  }

	  CanvasUtils.drawText(ctx, layer.text, layer.frame.x, layer.frame.y, layer.frame.width, layer.frame.height, fontFace, {
	    fontSize: layer.fontSize,
	    lineHeight: layer.lineHeight,
	    textAlign: layer.textAlign,
	    color: layer.color
	  });
	}

	/**
	 * @private
	 */
	function drawGradientRenderLayer (ctx, layer) {
	  // Default to linear gradient from top to bottom.
	  var x1 = layer.x1 || layer.frame.x;
	  var y1 = layer.y1 || layer.frame.y;
	  var x2 = layer.x2 || layer.frame.x;
	  var y2 = layer.y2 || layer.frame.y + layer.frame.height;
	  CanvasUtils.drawGradient(ctx, x1, y1, x2, y2, layer.colorStops, layer.frame.x, layer.frame.y, layer.frame.width, layer.frame.height);
	}

	module.exports = {
	  drawRenderLayer: drawRenderLayer,
	  invalidateBackingStore: invalidateBackingStore,
	  invalidateAllBackingStores: invalidateAllBackingStores,
	  handleImageLoad: handleImageLoad,
	  handleFontLoad: handleFontLoad,
	  layerContainsImage: layerContainsImage,
	  layerContainsFontFace: layerContainsFontFace
	};


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FrameUtils = __webpack_require__(339);
	var EventTypes = __webpack_require__(391);

	/**
	 * RenderLayer hit testing
	 *
	 * @param {Event} e
	 * @param {RenderLayer} rootLayer
	 * @param {?HTMLElement} rootNode
	 * @return {RenderLayer}
	 */
	function hitTest (e, rootLayer, rootNode) {
	  var touch = e.touches ? e.touches[0] : e;
	  var touchX = touch.pageX;
	  var touchY = touch.pageY;
	  var rootNodeBox;
	  if (rootNode) {
	    rootNodeBox = rootNode.getBoundingClientRect();
	    touchX -= rootNodeBox.left;
	    touchY -= rootNodeBox.top;
	  }
	  return getLayerAtPoint(rootLayer, e.type, FrameUtils.make(touchX, touchY, 1, 1));
	}

	/**
	 * @private
	 */
	function sortByZIndexDescending (layer, otherLayer) {
	  return (otherLayer.zIndex || 0) - (layer.zIndex || 0);
	}

	/**
	 * @private
	 */
	function getHitHandle (type) {
	  var hitHandle;
	  for (var tryHandle in EventTypes) {
	    if (EventTypes[tryHandle] === type) {
	      hitHandle = tryHandle;
	      break;
	    }
	  }
	  return hitHandle;
	}

	/**
	 * @private
	 */
	function getLayerAtPoint (root, type, point) {
	  var layer = null;
	  var hitHandle = getHitHandle(type);
	  var sortedChildren;
	  var hitFrame = root.frame;

	  // Early bail for non-visible layers
	  if (typeof root.alpha === 'number' && root.alpha < 0.01) {
	    return null;
	  }

	  // Child-first search
	  if (root.children) {
	    sortedChildren = root.children.slice().reverse().sort(sortByZIndexDescending);
	    for (var i=0, len=sortedChildren.length; i < len; i++) {
	      layer = getLayerAtPoint(sortedChildren[i], type, point);
	      if (layer) {
	        break;
	      }
	    }
	  }

	  // Check for hit outsets
	  if (root.hitOutsets) {
	    hitFrame = FrameUtils.inset(FrameUtils.clone(hitFrame),
	      -root.hitOutsets[0], -root.hitOutsets[1],
	      -root.hitOutsets[2], -root.hitOutsets[3]
	    );
	  }

	  // No child layer at the given point. Try the parent layer.
	  if (!layer && root[hitHandle] && FrameUtils.intersects(hitFrame, point)) {
	    layer = root;
	  }

	  return layer;
	}

	module.exports = hitTest;
	module.exports.getHitHandle = getHitHandle;



/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var computeLayout = __webpack_require__(394);

	/**
	 * This computes the CSS layout for a RenderLayer tree and mutates the frame
	 * objects at each node.
	 *
	 * @param {Renderlayer} root
	 * @return {Object}
	 */
	function layoutNode (root) {
	  var rootNode = createNode(root);
	  computeLayout(rootNode);
	  walkNode(rootNode);
	  return rootNode;
	}

	function createNode (layer) {
	  return {
	    layer: layer,
	    layout: {
	      width: undefined, // computeLayout will mutate
	      height: undefined, // computeLayout will mutate
	      top: 0,
	      left: 0,
	    },
	    style: layer._originalStyle || {},
	    children: (layer.children || []).map(createNode)
	  };
	}

	function walkNode (node, parentLeft, parentTop) {
	  node.layer.frame.x = node.layout.left + (parentLeft || 0);
	  node.layer.frame.y = node.layout.top + (parentTop || 0);
	  node.layer.frame.width = node.layout.width;
	  node.layer.frame.height = node.layout.height;
	  if (node.children && node.children.length > 0) {
	    node.children.forEach(function (child) {
	      walkNode(child, node.layout.left, node.layout.top);
	    });
	  }
	}

	module.exports = layoutNode;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var EventEmitter = __webpack_require__(399);
	var assign = __webpack_require__(142);

	var NOOP = function () {};

	function Img (src) {
	  this._originalSrc = src;
	  this._img = new Image();
	  this._img.onload = this.emit.bind(this, 'load');
	  this._img.onerror = this.emit.bind(this, 'error');
	  this._img.src = src;

	  // The default impl of events emitter will throw on any 'error' event unless
	  // there is at least 1 handler. Logging anything in this case is unnecessary
	  // since the browser console will log it too.
	  this.on('error', NOOP);

	  // Default is just 10.
	  this.setMaxListeners(100);
	}

	assign(Img.prototype, EventEmitter.prototype, {

	  /**
	   * Pooling owner looks for this
	   */
	  destructor: function () {
	    // Make sure we aren't leaking callbacks.
	    this.removeAllListeners();
	  },

	  /**
	   * Retrieve the original image URL before browser normalization
	   *
	   * @return {String}
	   */
	  getOriginalSrc: function () {
	    return this._originalSrc;
	  },

	  /**
	   * Retrieve a reference to the underyling <img> node.
	   *
	   * @return {HTMLImageElement}
	   */
	  getRawImage: function () {
	    return this._img;
	  },

	  /**
	   * Retrieve the loaded image width
	   *
	   * @return {Number}
	   */
	  getWidth: function () {
	    return this._img.naturalWidth;
	  },

	  /**
	   * Retrieve the loaded image height
	   *
	   * @return {Number}
	   */
	  getHeight: function () {
	    return this._img.naturalHeight;
	  },

	  /**
	   * @return {Bool}
	   */
	  isLoaded: function () {
	    return this._img.naturalHeight > 0;
	  }

	});

	var kInstancePoolLength = 300;
	var _instancePool = [];

	function getPooledImage (src) {
	  for (var i=0, len=_instancePool.length; i < len; i++) {
	    if (_instancePool[i].getOriginalSrc() === src) {
	      return _instancePool[i];
	    }
	  }
	  return null;
	}

	var ImageCache = {

	  /**
	   * Retrieve an image from the cache
	   *
	   * @return {Img}
	   */
	  get: function (src) {
	    var image = getPooledImage(src);
	    if (!image) {
	      // Simple FIFO queue
	      image = new Img(src);
	      if (_instancePool.length >= kInstancePoolLength) {
	        _instancePool.shift().destructor();
	      }
	    _instancePool.push(image);
	    }
	    return image;
	  }

	};

	module.exports = ImageCache;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	// Penner easing equations
	// https://gist.github.com/gre/1650294

	var Easing = {

	  linear: function (t) {
	    return t;
	  },

	  easeInQuad: function (t) {
	    return Math.pow(t, 2);
	  },

	  easeOutQuad: function (t) {
	    return t * (2-t);
	  },

	  easeInOutQuad: function (t) {
	    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
	  },

	  easeInCubic: function (t) {
	    return t * t * t;
	  },

	  easeOutCubic: function (t) {
	    return (--t) * t * t + 1;
	  },

	  easeInOutCubic: function (t) {
	    return t < .5 ? 4 * t * t * t : (t-1) * (2*t - 2) * (2*t - 2) + 1;
	  }

	};

	module.exports = Easing;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Clamp a number between a minimum and maximum value.
	 * @param {Number} number
	 * @param {Number} min
	 * @param {Number} max
	 * @return {Number}
	*/
	module.exports = function (number, min, max) {
	  return Math.min(Math.max(number, min), max);
	};



/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FontFace = __webpack_require__(187);

	var _useNativeImpl = (typeof window.FontFace !== 'undefined');
	var _pendingFonts = {};
	var _loadedFonts = {};
	var _failedFonts = {};

	var kFontLoadTimeout = 3000;

	/**
	 * Check if a font face has loaded
	 * @param {FontFace} fontFace
	 * @return {Boolean}
	 */
	function isFontLoaded (fontFace) {
	  // For remote URLs, check the cache. System fonts (sans url) assume loaded.
	  return _loadedFonts[fontFace.id] !== undefined || !fontFace.url;
	}

	/**
	 * Load a remote font and execute a callback.
	 * @param {FontFace} fontFace The font to Load
	 * @param {Function} callback Function executed upon font Load
	 */
	function loadFont (fontFace, callback) {
	  var defaultNode;
	  var testNode;
	  var checkFont;

	  // See if we've previously loaded it.
	  if (_loadedFonts[fontFace.id]) {
	    return callback(null);
	  }

	  // See if we've previously failed to load it.
	  if (_failedFonts[fontFace.id]) {
	    return callback(_failedFonts[fontFace.id]);
	  }

	  // System font: assume already loaded.
	  if (!fontFace.url) {
	    return callback(null);
	  }

	  // Font load is already in progress:
	  if (_pendingFonts[fontFace.id]) {
	    _pendingFonts[fontFace.id].callbacks.push(callback);
	    return;
	  }

	  // Create the test <span>'s for measuring.
	  defaultNode = createTestNode('Helvetica', fontFace.attributes);
	  testNode = createTestNode(fontFace.family, fontFace.attributes);
	  document.body.appendChild(testNode);
	  document.body.appendChild(defaultNode);

	  _pendingFonts[fontFace.id] = {
	    startTime: Date.now(),
	    defaultNode: defaultNode,
	    testNode: testNode,
	    callbacks: [callback]
	  };

	  // Font watcher
	  checkFont = function () {
	    var currWidth = testNode.getBoundingClientRect().width;
	    var defaultWidth = defaultNode.getBoundingClientRect().width;
	    var loaded = currWidth !== defaultWidth;

	    if (loaded) {
	      handleFontLoad(fontFace, null);
	    } else {
	      // Timeout?
	      if (Date.now() - _pendingFonts[fontFace.id].startTime >= kFontLoadTimeout) {
	        handleFontLoad(fontFace, true);
	      } else {
	        requestAnimationFrame(checkFont);
	      }
	    }
	  };

	  // Start watching
	  checkFont();
	}

	// Internal
	// ========

	/**
	 * Native FontFace loader implementation
	 * @internal
	 */
	function loadFontNative (fontFace, callback) {
	  var theFontFace;

	  // See if we've previously loaded it.
	  if (_loadedFonts[fontFace.id]) {
	    return callback(null);
	  }

	  // See if we've previously failed to load it.
	  if (_failedFonts[fontFace.id]) {
	    return callback(_failedFonts[fontFace.id]);
	  }

	  // System font: assume it's installed.
	  if (!fontFace.url) {
	    return callback(null);
	  }

	  // Font load is already in progress:
	  if (_pendingFonts[fontFace.id]) {
	    _pendingFonts[fontFace.id].callbacks.push(callback);
	    return;
	  }

	  _pendingFonts[fontFace.id] = {
	    startTime: Date.now(),
	    callbacks: [callback]
	  };

	  // Use font loader API
	  theFontFace = new window.FontFace(fontFace.family,
	    'url(' + fontFace.url + ')', fontFace.attributes);

	  theFontFace.load().then(function () {
	    _loadedFonts[fontFace.id] = true;
	    callback(null);
	  }, function (err) {
	    _failedFonts[fontFace.id] = err;
	    callback(err);
	  });
	}

	/**
	 * Helper method for created a hidden <span> with a given font.
	 * Uses TypeKit's default test string, which is said to result
	 * in highly varied measured widths when compared to the default font.
	 * @internal
	 */
	function createTestNode (family, attributes) {
	  var span = document.createElement('span');
	  span.setAttribute('data-fontfamily', family);
	  span.style.cssText = 'position:absolute; left:-5000px; top:-5000px; visibility:hidden;' +
	    'font-size:100px; font-family:"' + family + '", Helvetica;font-weight: ' + attributes.weight + ';' +
	    'font-style:' + attributes.style + ';';
	  span.innerHTML = 'BESs';
	  return span;
	}

	/**
	 * @internal
	 */
	function handleFontLoad (fontFace, timeout) {
	  var error = timeout ? 'Exceeded load timeout of ' + kFontLoadTimeout + 'ms' : null;

	  if (!error) {
	    _loadedFonts[fontFace.id] = true;
	  } else {
	    _failedFonts[fontFace.id] = error;
	  }

	  // Execute pending callbacks.
	  _pendingFonts[fontFace.id].callbacks.forEach(function (callback) {
	    callback(error);
	  });

	  // Clean up DOM
	  if (_pendingFonts[fontFace.id].defaultNode) {
	    document.body.removeChild(_pendingFonts[fontFace.id].defaultNode);
	  }
	  if (_pendingFonts[fontFace.id].testNode) {
	    document.body.removeChild(_pendingFonts[fontFace.id].testNode);
	  }

	  // Clean up waiting queue
	  delete _pendingFonts[fontFace.id];
	}

	module.exports = {
	  isFontLoaded: isFontLoaded,
	  loadFont: _useNativeImpl ? loadFontNative : loadFont
	};


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var WindowListenable = __webpack_require__(59);
	var DateTime = __webpack_require__(192);
	var KeyCode = __webpack_require__(80);
	var CalendarMonth = __webpack_require__(395);
	var CalendarToolbar = __webpack_require__(396);
	var DateDisplay = __webpack_require__(397);
	var SlideInTransitionGroup = __webpack_require__(398);

	var Calendar = React.createClass({displayName: "Calendar",

	  mixins: [Classable, WindowListenable],

	  propTypes: {
	    initialDate: React.PropTypes.object,
	    isActive: React.PropTypes.bool
	  },

	  windowListeners: {
	    'keydown': '_handleWindowKeyDown'
	  },

	  getDefaultProps: function() {
	    return {
	      initialDate: new Date()
	    };
	  },

	  getInitialState: function() {
	    return {
	      displayDate: DateTime.getFirstDayOfMonth(this.props.initialDate),
	      selectedDate: this.props.initialDate,
	      transitionDirection: 'left'
	    };
	  },

	  componentWillReceiveProps: function(nextProps) {
	    if (nextProps.initialDate !== this.props.initialDate) {
	      var d = nextProps.initialDate || new Date();
	      this.setState({
	        displayDate: DateTime.getFirstDayOfMonth(d),
	        selectedDate: d
	      });
	    }
	  },

	  render: function() {
	    var weekCount = DateTime.getWeekArray(this.state.displayDate).length;
	    var classes = this.getClasses('mui-date-picker-calendar', {
	      'mui-is-4week': weekCount === 4,
	      'mui-is-5week': weekCount === 5,
	      'mui-is-6week': weekCount === 6
	    });

	    return (
	      React.createElement("div", {className: classes}, 

	        React.createElement(DateDisplay, {
	          className: "mui-date-picker-calendar-date-display", 
	          selectedDate: this.state.selectedDate}), 

	        React.createElement("div", {
	          className: "mui-date-picker-calendar-container"}, 
	          React.createElement(CalendarToolbar, {
	            displayDate: this.state.displayDate, 
	            onLeftTouchTap: this._handleLeftTouchTap, 
	            onRightTouchTap: this._handleRightTouchTap}), 

	          React.createElement("ul", {className: "mui-date-picker-calendar-week-title"}, 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "S"), 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "M"), 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "T"), 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "W"), 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "T"), 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "F"), 
	            React.createElement("li", {className: "mui-date-picker-calendar-week-title-day"}, "S")
	          ), 

	          React.createElement(SlideInTransitionGroup, {
	            direction: this.state.transitionDirection}, 
	            React.createElement(CalendarMonth, {
	              key: this.state.displayDate.toDateString(), 
	              displayDate: this.state.displayDate, 
	              onDayTouchTap: this._handleDayTouchTap, 
	              selectedDate: this.state.selectedDate})
	          )
	        )
	      )
	    );
	  },

	  getSelectedDate: function() {
	    return this.state.selectedDate;
	  },

	  _addDisplayDate: function(m) {
	    var newDisplayDate = DateTime.clone(this.state.displayDate);
	    newDisplayDate.setMonth(newDisplayDate.getMonth() + m);
	    this._setDisplayDate(newDisplayDate);
	  },

	  _addSelectedDays: function(days) {
	    this._setSelectedDate(DateTime.addDays(this.state.selectedDate, days));
	  },

	  _addSelectedMonths: function(months) {
	    this._setSelectedDate(DateTime.addMonths(this.state.selectedDate, months));
	  },

	  _setDisplayDate: function(d, newSelectedDate) {
	    var newDisplayDate = DateTime.getFirstDayOfMonth(d);
	    var direction = newDisplayDate > this.state.displayDate ? 'left' : 'right';

	    if (newDisplayDate !== this.state.displayDate) {
	      this.setState({
	        displayDate: newDisplayDate,
	        transitionDirection: direction,
	        selectedDate: newSelectedDate || this.state.selectedDate
	      });
	    }
	  },

	  _setSelectedDate: function(d) {
	    var newDisplayDate = DateTime.getFirstDayOfMonth(d);

	    if (newDisplayDate !== this.state.displayDate) {
	      this._setDisplayDate(newDisplayDate, d);
	    } else {
	      this.setState({
	        selectedDate: d
	      });
	    }
	  },

	  _handleDayTouchTap: function(e, date) {
	    this._setSelectedDate(date);
	  },

	  _handleLeftTouchTap: function() {
	    this._addDisplayDate(-1);
	  },

	  _handleRightTouchTap: function() {
	    this._addDisplayDate(1);
	  },

	  _handleWindowKeyDown: function(e) {
	    var newSelectedDate;

	    if (this.props.isActive) {

	      switch (e.keyCode) {

	        case KeyCode.UP:
	          if (e.shiftKey) {
	            this._addSelectedMonths(-1);
	          } else {
	            this._addSelectedDays(-7);
	          }
	          break;

	        case KeyCode.DOWN:
	          if (e.shiftKey) {
	            this._addSelectedMonths(1);
	          } else {
	            this._addSelectedDays(7);
	          }
	          break;

	        case KeyCode.RIGHT:
	          if (e.shiftKey) {
	            this._addSelectedMonths(1);
	          } else {
	            this._addSelectedDays(1);
	          }
	          break;

	        case KeyCode.LEFT:
	          if (e.shiftKey) {
	            this._addSelectedMonths(-1);
	          } else {
	            this._addSelectedDays(-1);
	          }
	          break;

	      }

	    } 
	  }

	});

	module.exports = Calendar;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);

	var RippleCircle = React.createClass({displayName: "RippleCircle",

	  mixins: [Classable],

	  propTypes: {
	    className: React.PropTypes.string,
	    started: React.PropTypes.bool,
	    ending: React.PropTypes.bool
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      this.props,innerClassName=$__0.innerClassName,started=$__0.started,ending=$__0.ending,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{innerClassName:1,started:1,ending:1});
	    var classes = this.getClasses('mui-ripple-circle', {
	      'mui-is-started': this.props.started,
	      'mui-is-ending': this.props.ending
	    });

	    return (
	      React.createElement("div", React.__spread({},  other, {className: classes}), 
	        React.createElement("div", {className: "mui-ripple-circle-inner"})
	      )
	    );
	  }

	});

	module.exports = RippleCircle;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(400);

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(107);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(145);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(26);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(240);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(401);
	var ExecutionEnvironment = __webpack_require__(145);

	var camelizeStyleName = __webpack_require__(402);
	var dangerousStyleValue = __webpack_require__(403);
	var hyphenateStyleName = __webpack_require__(404);
	var memoizeStringOnly = __webpack_require__(405);
	var warning = __webpack_require__(215);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(356);
	var ReactMultiChildUpdateTypes = __webpack_require__(406);

	var ReactReconciler = __webpack_require__(140);
	var ReactChildReconciler = __webpack_require__(407);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(208);

	var assign = __webpack_require__(142);
	var getTextContentAccessor = __webpack_require__(408);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(110);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(110);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(112);
	var ViewportMetrics = __webpack_require__(114);

	var getEventModifierState = __webpack_require__(409);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(410);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(224);

	var accumulateInto = __webpack_require__(105);
	var forEachAccumulated = __webpack_require__(106);
	var invariant = __webpack_require__(107);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(411);
	var ReactMultiChildUpdateTypes = __webpack_require__(406);

	var setTextContent = __webpack_require__(412);
	var invariant = __webpack_require__(107);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(139);

	var invariant = __webpack_require__(107);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(209);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(413);

	var containsNode = __webpack_require__(269);
	var focusNode = __webpack_require__(410);
	var getActiveElement = __webpack_require__(373);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(208);
	var ReactBrowserEventEmitter = __webpack_require__(224);

	var assign = __webpack_require__(142);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(110);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(112);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(112);

	var getEventCharCode = __webpack_require__(380);
	var getEventKey = __webpack_require__(414);
	var getEventModifierState = __webpack_require__(409);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(364);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(112);

	var getEventModifierState = __webpack_require__(409);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(364);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(276);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(107);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Supported events that RenderLayer's can subscribe to.

	module.exports = {
	  onTouchStart: 'touchstart',
	  onTouchMove: 'touchmove',
	  onTouchEnd: 'touchend',
	  onTouchCancel: 'touchcancel',
	  onClick: 'click'
	};


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var FontFace = __webpack_require__(187);
	var clamp = __webpack_require__(345);
	var measureText = __webpack_require__(188);

	/**
	 * Draw an image into a <canvas>. This operation requires that the image
	 * already be loaded.
	 *
	 * @param {CanvasContext} ctx
	 * @param {Image} image The source image (from ImageCache.get())
	 * @param {Number} x The x-coordinate to begin drawing
	 * @param {Number} y The y-coordinate to begin drawing
	 * @param {Number} width The desired width
	 * @param {Number} height The desired height
	 * @param {Object} options Available options are:
	 *   {Number} originalWidth
	 *   {Number} originalHeight
	 *   {Object} focusPoint {x,y}
	 *   {String} backgroundColor
	 */
	function drawImage (ctx, image, x, y, width, height, options) {
	  options = options || {};

	  if (options.backgroundColor) {
	    ctx.save();
	    ctx.fillStyle = options.backgroundColor;
	    ctx.fillRect(x, y, width, height);
	    ctx.restore();
	  }

	  var dx = 0;
	  var dy = 0;
	  var dw = 0;
	  var dh = 0;
	  var sx = 0;
	  var sy = 0;
	  var sw = 0;
	  var sh = 0;
	  var scale;
	  var scaledSize;
	  var actualSize;
	  var focusPoint = options.focusPoint;

	  actualSize = {
	    width: image.getWidth(),
	    height: image.getHeight()
	  };

	  scale = Math.max(
	    width / actualSize.width,
	    height / actualSize.height
	  ) || 1;
	  scale = parseFloat(scale.toFixed(4), 10);

	  scaledSize = {
	    width: actualSize.width * scale,
	    height: actualSize.height * scale
	  };

	  if (focusPoint) {
	    // Since image hints are relative to image "original" dimensions (original != actual),
	    // use the original size for focal point cropping.
	    if (options.originalHeight) {
	      focusPoint.x *= (actualSize.height / options.originalHeight);
	      focusPoint.y *= (actualSize.height / options.originalHeight);
	    }
	  } else {
	    // Default focal point to [0.5, 0.5]
	    focusPoint = {
	      x: actualSize.width * 0.5,
	      y: actualSize.height * 0.5
	    };
	  }

	  // Clip the image to rectangle (sx, sy, sw, sh).
	  sx = Math.round(clamp(width * 0.5 - focusPoint.x * scale, width - scaledSize.width, 0)) * (-1 / scale);
	  sy = Math.round(clamp(height * 0.5 - focusPoint.y * scale, height - scaledSize.height, 0)) * (-1 / scale);
	  sw = Math.round(actualSize.width - (sx * 2));
	  sh = Math.round(actualSize.height - (sy * 2));

	  // Scale the image to dimensions (dw, dh).
	  dw = Math.round(width);
	  dh = Math.round(height);

	  // Draw the image on the canvas at coordinates (dx, dy).
	  dx = Math.round(x);
	  dy = Math.round(y);

	  ctx.drawImage(image.getRawImage(), sx, sy, sw, sh, dx, dy, dw, dh);
	}

	/**
	 * @param {CanvasContext} ctx
	 * @param {String} text The text string to render
	 * @param {Number} x The x-coordinate to begin drawing
	 * @param {Number} y The y-coordinate to begin drawing
	 * @param {Number} width The maximum allowed width
	 * @param {Number} height The maximum allowed height
	 * @param {FontFace} fontFace The FontFace to to use
	 * @param {Object} options Available options are:
	 *   {Number} fontSize
	 *   {Number} lineHeight
	 *   {String} textAlign
	 *   {String} color
	 *   {String} backgroundColor
	 */
	function drawText (ctx, text, x, y, width, height, fontFace, options) {
	  var textMetrics;
	  var currX = x;
	  var currY = y;
	  var currText;
	  var options = options || {};

	  options.fontSize = options.fontSize || 16;
	  options.lineHeight = options.lineHeight || 18;
	  options.textAlign = options.textAlign || 'left';
	  options.backgroundColor = options.backgroundColor || 'transparent';
	  options.color = options.color || '#000';

	  textMetrics = measureText(
	    text,
	    width,
	    fontFace,
	    options.fontSize,
	    options.lineHeight
	  );

	  ctx.save();

	  // Draw the background
	  if (options.backgroundColor !== 'transparent') {
	    ctx.fillStyle = options.backgroundColor;
	    ctx.fillRect(0, 0, width, height);
	  }

	  ctx.fillStyle = options.color;
	  ctx.font = fontFace.attributes.style + ' normal ' + fontFace.attributes.weight + ' ' + options.fontSize + 'pt ' + fontFace.family;

	  textMetrics.lines.forEach(function (line, index) {
	    currText = line.text;
	    currY = (index === 0) ? y + options.fontSize :
	      (y + options.fontSize + options.lineHeight * index);

	    // Account for text-align: left|right|center
	    switch (options.textAlign) {
	      case 'center':
	        currX = x + (width / 2) - (line.width / 2);
	        break;
	      case 'right':
	        currX = x + width - line.width;
	        break;
	      default:
	        currX = x;
	    }

	    if ((index < textMetrics.lines.length - 1) &&
	      ((options.fontSize + options.lineHeight * (index + 1)) > height)) {
	      currText = currText.replace(/\,?\s?\w+$/, '…');
	    }

	    if (currY <= (height + y)) {
	      ctx.fillText(currText, currX, currY);
	    }
	  });

	  ctx.restore();
	}

	/**
	 * Draw a linear gradient
	 *
	 * @param {CanvasContext} ctx
	 * @param {Number} x1 gradient start-x coordinate
	 * @param {Number} y1 gradient start-y coordinate
	 * @param {Number} x2 gradient end-x coordinate
	 * @param {Number} y2 gradient end-y coordinate
	 * @param {Array} colorStops Array of {(String)color, (Number)position} values
	 * @param {Number} x x-coordinate to begin fill
	 * @param {Number} y y-coordinate to begin fill
	 * @param {Number} width how wide to fill
	 * @param {Number} height how tall to fill
	 */
	function drawGradient(ctx, x1, y1, x2, y2, colorStops, x, y, width, height) {
	  var grad;

	  ctx.save();
	  grad = ctx.createLinearGradient(x1, y1, x2, y2);

	  colorStops.forEach(function (colorStop) {
	    grad.addColorStop(colorStop.position, colorStop.color);
	  });

	  ctx.fillStyle = grad;
	  ctx.fillRect(x, y, width, height);
	  ctx.restore();
	}

	module.exports = {
	  drawImage: drawImage,
	  drawText: drawText,
	  drawGradient: drawGradient,
	};



/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(142);

	// Note that this class intentionally does not use PooledClass.
	// DrawingUtils manages <canvas> pooling for more fine-grained control.

	function Canvas (width, height, scale) {
	  // Re-purposing an existing canvas element.
	  if (!this._canvas) {
	    this._canvas = document.createElement('canvas');
	  }

	  this.width = width;
	  this.height = height;
	  this.scale = scale || window.devicePixelRatio;

	  this._canvas.width = this.width * this.scale;
	  this._canvas.height = this.height * this.scale;
	  this._canvas.getContext('2d').scale(this.scale, this.scale);
	}

	assign(Canvas.prototype, {

	  getRawCanvas: function () {
	    return this._canvas;
	  },

	  getContext: function () {
	    return this._canvas.getContext('2d');
	  }

	});

	// PooledClass:

	// Be fairly conserative - we are potentially drawing a large number of medium
	// to large size images.
	Canvas.poolSize = 30;

	module.exports = Canvas;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/facebook/css-layout

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	var computeLayout = (function() {

	  function capitalizeFirst(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	  }

	  function getSpacing(node, type, suffix, location) {
	    var key = type + capitalizeFirst(location) + suffix;
	    if (key in node.style) {
	      return node.style[key];
	    }

	    key = type + suffix;
	    if (key in node.style) {
	      return node.style[key];
	    }

	    return 0;
	  }

	  function getPositiveSpacing(node, type, suffix, location) {
	    var key = type + capitalizeFirst(location) + suffix;
	    if (key in node.style && node.style[key] >= 0) {
	      return node.style[key];
	    }

	    key = type + suffix;
	    if (key in node.style && node.style[key] >= 0) {
	      return node.style[key];
	    }

	    return 0;
	  }

	  function isUndefined(value) {
	    return value === undefined;
	  }

	  function getMargin(node, location) {
	    return getSpacing(node, 'margin', '', location);
	  }

	  function getPadding(node, location) {
	    return getPositiveSpacing(node, 'padding', '', location);
	  }

	  function getBorder(node, location) {
	    return getPositiveSpacing(node, 'border', 'Width', location);
	  }

	  function getPaddingAndBorder(node, location) {
	    return getPadding(node, location) + getBorder(node, location);
	  }

	  function getMarginAxis(node, axis) {
	    return getMargin(node, leading[axis]) + getMargin(node, trailing[axis]);
	  }

	  function getPaddingAndBorderAxis(node, axis) {
	    return getPaddingAndBorder(node, leading[axis]) + getPaddingAndBorder(node, trailing[axis]);
	  }

	  function getJustifyContent(node) {
	    if ('justifyContent' in node.style) {
	      return node.style.justifyContent;
	    }
	    return 'flex-start';
	  }

	  function getAlignItem(node, child) {
	    if ('alignSelf' in child.style) {
	      return child.style.alignSelf;
	    }
	    if ('alignItems' in node.style) {
	      return node.style.alignItems;
	    }
	    return 'stretch';
	  }

	  function getFlexDirection(node) {
	    if ('flexDirection' in node.style) {
	      return node.style.flexDirection;
	    }
	    return 'column';
	  }

	  function getPositionType(node) {
	    if ('position' in node.style) {
	      return node.style.position;
	    }
	    return 'relative';
	  }

	  function getFlex(node) {
	    return node.style.flex;
	  }

	  function isFlex(node) {
	    return (
	      getPositionType(node) === CSS_POSITION_RELATIVE &&
	      getFlex(node) > 0
	    );
	  }

	  function isFlexWrap(node) {
	    return node.style.flexWrap === 'wrap';
	  }

	  function getDimWithMargin(node, axis) {
	    return node.layout[dim[axis]] + getMarginAxis(node, axis);
	  }

	  function isDimDefined(node, axis) {
	    return !isUndefined(node.style[dim[axis]]) && node.style[dim[axis]] >= 0;
	  }

	  function isPosDefined(node, pos) {
	    return !isUndefined(node.style[pos]);
	  }

	  function isMeasureDefined(node) {
	    return 'measure' in node.style;
	  }

	  function getPosition(node, pos) {
	    if (pos in node.style) {
	      return node.style[pos];
	    }
	    return 0;
	  }

	  // When the user specifically sets a value for width or height
	  function setDimensionFromStyle(node, axis) {
	    // The parent already computed us a width or height. We just skip it
	    if (!isUndefined(node.layout[dim[axis]])) {
	      return;
	    }
	    // We only run if there's a width or height defined
	    if (!isDimDefined(node, axis)) {
	      return;
	    }

	    // The dimensions can never be smaller than the padding and border
	    node.layout[dim[axis]] = fmaxf(
	      node.style[dim[axis]],
	      getPaddingAndBorderAxis(node, axis)
	    );
	  }

	  // If both left and right are defined, then use left. Otherwise return
	  // +left or -right depending on which is defined.
	  function getRelativePosition(node, axis) {
	    if (leading[axis] in node.style) {
	      return getPosition(node, leading[axis]);
	    }
	    return -getPosition(node, trailing[axis]);
	  }

	  var leading = {
	    row: 'left',
	    column: 'top'
	  };
	  var trailing = {
	    row: 'right',
	    column: 'bottom'
	  };
	  var pos = {
	    row: 'left',
	    column: 'top'
	  };
	  var dim = {
	    row: 'width',
	    column: 'height'
	  };

	  function fmaxf(a, b) {
	    if (a > b) {
	      return a;
	    }
	    return b;
	  }

	  var CSS_UNDEFINED = undefined;

	  var CSS_FLEX_DIRECTION_ROW = 'row';
	  var CSS_FLEX_DIRECTION_COLUMN = 'column';

	  var CSS_JUSTIFY_FLEX_START = 'flex-start';
	  var CSS_JUSTIFY_CENTER = 'center';
	  var CSS_JUSTIFY_FLEX_END = 'flex-end';
	  var CSS_JUSTIFY_SPACE_BETWEEN = 'space-between';
	  var CSS_JUSTIFY_SPACE_AROUND = 'space-around';

	  var CSS_ALIGN_FLEX_START = 'flex-start';
	  var CSS_ALIGN_CENTER = 'center';
	  var CSS_ALIGN_FLEX_END = 'flex-end';
	  var CSS_ALIGN_STRETCH = 'stretch';

	  var CSS_POSITION_RELATIVE = 'relative';
	  var CSS_POSITION_ABSOLUTE = 'absolute';

	  return function layoutNode(node, parentMaxWidth) {
	    var/*css_flex_direction_t*/ mainAxis = getFlexDirection(node);
	    var/*css_flex_direction_t*/ crossAxis = mainAxis === CSS_FLEX_DIRECTION_ROW ?
	      CSS_FLEX_DIRECTION_COLUMN :
	      CSS_FLEX_DIRECTION_ROW;

	    // Handle width and height style attributes
	    setDimensionFromStyle(node, mainAxis);
	    setDimensionFromStyle(node, crossAxis);

	    // The position is set by the parent, but we need to complete it with a
	    // delta composed of the margin and left/top/right/bottom
	    node.layout[leading[mainAxis]] += getMargin(node, leading[mainAxis]) +
	      getRelativePosition(node, mainAxis);
	    node.layout[leading[crossAxis]] += getMargin(node, leading[crossAxis]) +
	      getRelativePosition(node, crossAxis);

	    if (isMeasureDefined(node)) {
	      var/*float*/ width = CSS_UNDEFINED;
	      if (isDimDefined(node, CSS_FLEX_DIRECTION_ROW)) {
	        width = node.style.width;
	      } else if (!isUndefined(node.layout[dim[CSS_FLEX_DIRECTION_ROW]])) {
	        width = node.layout[dim[CSS_FLEX_DIRECTION_ROW]];
	      } else {
	        width = parentMaxWidth -
	          getMarginAxis(node, CSS_FLEX_DIRECTION_ROW);
	      }
	      width -= getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_ROW);

	      // We only need to give a dimension for the text if we haven't got any
	      // for it computed yet. It can either be from the style attribute or because
	      // the element is flexible.
	      var/*bool*/ isRowUndefined = !isDimDefined(node, CSS_FLEX_DIRECTION_ROW) &&
	        isUndefined(node.layout[dim[CSS_FLEX_DIRECTION_ROW]]);
	      var/*bool*/ isColumnUndefined = !isDimDefined(node, CSS_FLEX_DIRECTION_COLUMN) &&
	        isUndefined(node.layout[dim[CSS_FLEX_DIRECTION_COLUMN]]);

	      // Let's not measure the text if we already know both dimensions
	      if (isRowUndefined || isColumnUndefined) {
	        var/*css_dim_t*/ measure_dim = node.style.measure(
	          /*(c)!node->context,*/
	          width
	        );
	        if (isRowUndefined) {
	          node.layout.width = measure_dim.width +
	            getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_ROW);
	        }
	        if (isColumnUndefined) {
	          node.layout.height = measure_dim.height +
	            getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_COLUMN);
	        }
	      }
	      return;
	    }

	    // Pre-fill some dimensions straight from the parent
	    for (var/*int*/ i = 0; i < node.children.length; ++i) {
	      var/*css_node_t**/ child = node.children[i];
	      // Pre-fill cross axis dimensions when the child is using stretch before
	      // we call the recursive layout pass
	      if (getAlignItem(node, child) === CSS_ALIGN_STRETCH &&
	          getPositionType(child) === CSS_POSITION_RELATIVE &&
	          !isUndefined(node.layout[dim[crossAxis]]) &&
	          !isDimDefined(child, crossAxis)) {
	        child.layout[dim[crossAxis]] = fmaxf(
	          node.layout[dim[crossAxis]] -
	            getPaddingAndBorderAxis(node, crossAxis) -
	            getMarginAxis(child, crossAxis),
	          // You never want to go smaller than padding
	          getPaddingAndBorderAxis(child, crossAxis)
	        );
	      } else if (getPositionType(child) == CSS_POSITION_ABSOLUTE) {
	        // Pre-fill dimensions when using absolute position and both offsets for the axis are defined (either both
	        // left and right or top and bottom).
	        for (var/*int*/ ii = 0; ii < 2; ii++) {
	          var/*css_flex_direction_t*/ axis = (ii != 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;
	          if (!isUndefined(node.layout[dim[axis]]) &&
	              !isDimDefined(child, axis) &&
	              isPosDefined(child, leading[axis]) &&
	              isPosDefined(child, trailing[axis])) {
	            child.layout[dim[axis]] = fmaxf(
	              node.layout[dim[axis]] -
	              getPaddingAndBorderAxis(node, axis) -
	              getMarginAxis(child, axis) -
	              getPosition(child, leading[axis]) -
	              getPosition(child, trailing[axis]),
	              // You never want to go smaller than padding
	              getPaddingAndBorderAxis(child, axis)
	            );
	          }
	        }
	      }
	    }

	    var/*float*/ definedMainDim = CSS_UNDEFINED;
	    if (!isUndefined(node.layout[dim[mainAxis]])) {
	      definedMainDim = node.layout[dim[mainAxis]] -
	          getPaddingAndBorderAxis(node, mainAxis);
	    }

	    // We want to execute the next two loops one per line with flex-wrap
	    var/*int*/ startLine = 0;
	    var/*int*/ endLine = 0;
	    var/*int*/ nextOffset = 0;
	    var/*int*/ alreadyComputedNextLayout = 0;
	    // We aggregate the total dimensions of the container in those two variables
	    var/*float*/ linesCrossDim = 0;
	    var/*float*/ linesMainDim = 0;
	    while (endLine < node.children.length) {
	      // <Loop A> Layout non flexible children and count children by type

	      // mainContentDim is accumulation of the dimensions and margin of all the
	      // non flexible children. This will be used in order to either set the
	      // dimensions of the node if none already exist, or to compute the
	      // remaining space left for the flexible children.
	      var/*float*/ mainContentDim = 0;

	      // There are three kind of children, non flexible, flexible and absolute.
	      // We need to know how many there are in order to distribute the space.
	      var/*int*/ flexibleChildrenCount = 0;
	      var/*float*/ totalFlexible = 0;
	      var/*int*/ nonFlexibleChildrenCount = 0;
	      for (var/*int*/ i = startLine; i < node.children.length; ++i) {
	        var/*css_node_t**/ child = node.children[i];
	        var/*float*/ nextContentDim = 0;

	        // It only makes sense to consider a child flexible if we have a computed
	        // dimension for the node.
	        if (!isUndefined(node.layout[dim[mainAxis]]) && isFlex(child)) {
	          flexibleChildrenCount++;
	          totalFlexible += getFlex(child);

	          // Even if we don't know its exact size yet, we already know the padding,
	          // border and margin. We'll use this partial information to compute the
	          // remaining space.
	          nextContentDim = getPaddingAndBorderAxis(child, mainAxis) +
	            getMarginAxis(child, mainAxis);

	        } else {
	          var/*float*/ maxWidth = CSS_UNDEFINED;
	          if (mainAxis === CSS_FLEX_DIRECTION_ROW) {
	            // do nothing
	          } else if (isDimDefined(node, CSS_FLEX_DIRECTION_ROW)) {
	            maxWidth = node.layout[dim[CSS_FLEX_DIRECTION_ROW]] -
	              getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_ROW);
	          } else {
	            maxWidth = parentMaxWidth -
	              getMarginAxis(node, CSS_FLEX_DIRECTION_ROW) -
	              getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_ROW);
	          }

	          // This is the main recursive call. We layout non flexible children.
	          if (alreadyComputedNextLayout === 0) {
	            layoutNode(child, maxWidth);
	          }

	          // Absolute positioned elements do not take part of the layout, so we
	          // don't use them to compute mainContentDim
	          if (getPositionType(child) === CSS_POSITION_RELATIVE) {
	            nonFlexibleChildrenCount++;
	            // At this point we know the final size and margin of the element.
	            nextContentDim = getDimWithMargin(child, mainAxis);
	          }
	        }

	        // The element we are about to add would make us go to the next line
	        if (isFlexWrap(node) &&
	            !isUndefined(node.layout[dim[mainAxis]]) &&
	            mainContentDim + nextContentDim > definedMainDim &&
	            // If there's only one element, then it's bigger than the content
	            // and needs its own line
	            i !== startLine) {
	          alreadyComputedNextLayout = 1;
	          break;
	        }
	        alreadyComputedNextLayout = 0;
	        mainContentDim += nextContentDim;
	        endLine = i + 1;
	      }

	      // <Loop B> Layout flexible children and allocate empty space

	      // In order to position the elements in the main axis, we have two
	      // controls. The space between the beginning and the first element
	      // and the space between each two elements.
	      var/*float*/ leadingMainDim = 0;
	      var/*float*/ betweenMainDim = 0;

	      // The remaining available space that needs to be allocated
	      var/*float*/ remainingMainDim = 0;
	      if (!isUndefined(node.layout[dim[mainAxis]])) {
	        remainingMainDim = definedMainDim - mainContentDim;
	      } else {
	        remainingMainDim = fmaxf(mainContentDim, 0) - mainContentDim;
	      }

	      // If there are flexible children in the mix, they are going to fill the
	      // remaining space
	      if (flexibleChildrenCount !== 0) {
	        var/*float*/ flexibleMainDim = remainingMainDim / totalFlexible;

	        // The non flexible children can overflow the container, in this case
	        // we should just assume that there is no space available.
	        if (flexibleMainDim < 0) {
	          flexibleMainDim = 0;
	        }
	        // We iterate over the full array and only apply the action on flexible
	        // children. This is faster than actually allocating a new array that
	        // contains only flexible children.
	        for (var/*int*/ i = startLine; i < endLine; ++i) {
	          var/*css_node_t**/ child = node.children[i];
	          if (isFlex(child)) {
	            // At this point we know the final size of the element in the main
	            // dimension
	            child.layout[dim[mainAxis]] = flexibleMainDim * getFlex(child) +
	              getPaddingAndBorderAxis(child, mainAxis);

	            var/*float*/ maxWidth = CSS_UNDEFINED;
	            if (mainAxis === CSS_FLEX_DIRECTION_ROW) {
	              // do nothing
	            } else if (isDimDefined(node, CSS_FLEX_DIRECTION_ROW)) {
	              maxWidth = node.layout[dim[CSS_FLEX_DIRECTION_ROW]] -
	                getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_ROW);
	            } else {
	              maxWidth = parentMaxWidth -
	                getMarginAxis(node, CSS_FLEX_DIRECTION_ROW) -
	                getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_ROW);
	            }

	            // And we recursively call the layout algorithm for this child
	            layoutNode(child, maxWidth);
	          }
	        }

	      // We use justifyContent to figure out how to allocate the remaining
	      // space available
	      } else {
	        var/*css_justify_t*/ justifyContent = getJustifyContent(node);
	        if (justifyContent === CSS_JUSTIFY_FLEX_START) {
	          // Do nothing
	        } else if (justifyContent === CSS_JUSTIFY_CENTER) {
	          leadingMainDim = remainingMainDim / 2;
	        } else if (justifyContent === CSS_JUSTIFY_FLEX_END) {
	          leadingMainDim = remainingMainDim;
	        } else if (justifyContent === CSS_JUSTIFY_SPACE_BETWEEN) {
	          remainingMainDim = fmaxf(remainingMainDim, 0);
	          if (flexibleChildrenCount + nonFlexibleChildrenCount - 1 !== 0) {
	            betweenMainDim = remainingMainDim /
	              (flexibleChildrenCount + nonFlexibleChildrenCount - 1);
	          } else {
	            betweenMainDim = 0;
	          }
	        } else if (justifyContent === CSS_JUSTIFY_SPACE_AROUND) {
	          // Space on the edges is half of the space between elements
	          betweenMainDim = remainingMainDim /
	            (flexibleChildrenCount + nonFlexibleChildrenCount);
	          leadingMainDim = betweenMainDim / 2;
	        }
	      }

	      // <Loop C> Position elements in the main axis and compute dimensions

	      // At this point, all the children have their dimensions set. We need to
	      // find their position. In order to do that, we accumulate data in
	      // variables that are also useful to compute the total dimensions of the
	      // container!
	      var/*float*/ crossDim = 0;
	      var/*float*/ mainDim = leadingMainDim +
	        getPaddingAndBorder(node, leading[mainAxis]);

	      for (var/*int*/ i = startLine; i < endLine; ++i) {
	        var/*css_node_t**/ child = node.children[i];

	        if (getPositionType(child) === CSS_POSITION_ABSOLUTE &&
	            isPosDefined(child, leading[mainAxis])) {
	          // In case the child is position absolute and has left/top being
	          // defined, we override the position to whatever the user said
	          // (and margin/border).
	          child.layout[pos[mainAxis]] = getPosition(child, leading[mainAxis]) +
	            getBorder(node, leading[mainAxis]) +
	            getMargin(child, leading[mainAxis]);
	        } else {
	          // If the child is position absolute (without top/left) or relative,
	          // we put it at the current accumulated offset.
	          child.layout[pos[mainAxis]] += mainDim;
	        }

	        // Now that we placed the element, we need to update the variables
	        // We only need to do that for relative elements. Absolute elements
	        // do not take part in that phase.
	        if (getPositionType(child) === CSS_POSITION_RELATIVE) {
	          // The main dimension is the sum of all the elements dimension plus
	          // the spacing.
	          mainDim += betweenMainDim + getDimWithMargin(child, mainAxis);
	          // The cross dimension is the max of the elements dimension since there
	          // can only be one element in that cross dimension.
	          crossDim = fmaxf(crossDim, getDimWithMargin(child, crossAxis));
	        }
	      }

	      var/*float*/ containerMainAxis = node.layout[dim[mainAxis]];
	      // If the user didn't specify a width or height, and it has not been set
	      // by the container, then we set it via the children.
	      if (isUndefined(node.layout[dim[mainAxis]])) {
	        containerMainAxis = fmaxf(
	          // We're missing the last padding at this point to get the final
	          // dimension
	          mainDim + getPaddingAndBorder(node, trailing[mainAxis]),
	          // We can never assign a width smaller than the padding and borders
	          getPaddingAndBorderAxis(node, mainAxis)
	        );
	      }

	      var/*float*/ containerCrossAxis = node.layout[dim[crossAxis]];
	      if (isUndefined(node.layout[dim[crossAxis]])) {
	        containerCrossAxis = fmaxf(
	          // For the cross dim, we add both sides at the end because the value
	          // is aggregate via a max function. Intermediate negative values
	          // can mess this computation otherwise
	          crossDim + getPaddingAndBorderAxis(node, crossAxis),
	          getPaddingAndBorderAxis(node, crossAxis)
	        );
	      }

	      // <Loop D> Position elements in the cross axis

	      for (var/*int*/ i = startLine; i < endLine; ++i) {
	        var/*css_node_t**/ child = node.children[i];

	        if (getPositionType(child) === CSS_POSITION_ABSOLUTE &&
	            isPosDefined(child, leading[crossAxis])) {
	          // In case the child is absolutely positionned and has a
	          // top/left/bottom/right being set, we override all the previously
	          // computed positions to set it correctly.
	          child.layout[pos[crossAxis]] = getPosition(child, leading[crossAxis]) +
	            getBorder(node, leading[crossAxis]) +
	            getMargin(child, leading[crossAxis]);

	        } else {
	          var/*float*/ leadingCrossDim = getPaddingAndBorder(node, leading[crossAxis]);

	          // For a relative children, we're either using alignItems (parent) or
	          // alignSelf (child) in order to determine the position in the cross axis
	          if (getPositionType(child) === CSS_POSITION_RELATIVE) {
	            var/*css_align_t*/ alignItem = getAlignItem(node, child);
	            if (alignItem === CSS_ALIGN_FLEX_START) {
	              // Do nothing
	            } else if (alignItem === CSS_ALIGN_STRETCH) {
	              // You can only stretch if the dimension has not already been set
	              // previously.
	              if (!isDimDefined(child, crossAxis)) {
	                child.layout[dim[crossAxis]] = fmaxf(
	                  containerCrossAxis -
	                    getPaddingAndBorderAxis(node, crossAxis) -
	                    getMarginAxis(child, crossAxis),
	                  // You never want to go smaller than padding
	                  getPaddingAndBorderAxis(child, crossAxis)
	                );
	              }
	            } else {
	              // The remaining space between the parent dimensions+padding and child
	              // dimensions+margin.
	              var/*float*/ remainingCrossDim = containerCrossAxis -
	                getPaddingAndBorderAxis(node, crossAxis) -
	                getDimWithMargin(child, crossAxis);

	              if (alignItem === CSS_ALIGN_CENTER) {
	                leadingCrossDim += remainingCrossDim / 2;
	              } else { // CSS_ALIGN_FLEX_END
	                leadingCrossDim += remainingCrossDim;
	              }
	            }
	          }

	          // And we apply the position
	          child.layout[pos[crossAxis]] += linesCrossDim + leadingCrossDim;
	        }
	      }

	      linesCrossDim += crossDim;
	      linesMainDim = fmaxf(linesMainDim, mainDim);
	      startLine = endLine;
	    }

	    // If the user didn't specify a width or height, and it has not been set
	    // by the container, then we set it via the children.
	    if (isUndefined(node.layout[dim[mainAxis]])) {
	      node.layout[dim[mainAxis]] = fmaxf(
	        // We're missing the last padding at this point to get the final
	        // dimension
	        linesMainDim + getPaddingAndBorder(node, trailing[mainAxis]),
	        // We can never assign a width smaller than the padding and borders
	        getPaddingAndBorderAxis(node, mainAxis)
	      );
	    }

	    if (isUndefined(node.layout[dim[crossAxis]])) {
	      node.layout[dim[crossAxis]] = fmaxf(
	        // For the cross dim, we add both sides at the end because the value
	        // is aggregate via a max function. Intermediate negative values
	        // can mess this computation otherwise
	        linesCrossDim + getPaddingAndBorderAxis(node, crossAxis),
	        getPaddingAndBorderAxis(node, crossAxis)
	      );
	    }

	    // <Loop E> Calculate dimensions for absolutely positioned elements

	    for (var/*int*/ i = 0; i < node.children.length; ++i) {
	      var/*css_node_t**/ child = node.children[i];
	      if (getPositionType(child) == CSS_POSITION_ABSOLUTE) {
	        // Pre-fill dimensions when using absolute position and both offsets for the axis are defined (either both
	        // left and right or top and bottom).
	        for (var/*int*/ ii = 0; ii < 2; ii++) {
	          var/*css_flex_direction_t*/ axis = (ii !== 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;
	          if (!isUndefined(node.layout[dim[axis]]) &&
	              !isDimDefined(child, axis) &&
	              isPosDefined(child, leading[axis]) &&
	              isPosDefined(child, trailing[axis])) {
	            child.layout[dim[axis]] = fmaxf(
	              node.layout[dim[axis]] -
	              getPaddingAndBorderAxis(node, axis) -
	              getMarginAxis(child, axis) -
	              getPosition(child, leading[axis]) -
	              getPosition(child, trailing[axis]),
	              // You never want to go smaller than padding
	              getPaddingAndBorderAxis(child, axis)
	            );
	          }
	        }
	        for (var/*int*/ ii = 0; ii < 2; ii++) {
	          var/*css_flex_direction_t*/ axis = (ii !== 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;
	          if (isPosDefined(child, trailing[axis]) &&
	              !isPosDefined(child, leading[axis])) {
	            child.layout[leading[axis]] =
	              node.layout[dim[axis]] -
	              child.layout[dim[axis]] -
	              getPosition(child, trailing[axis]);
	          }
	        }
	      }
	    }
	  };
	})();

	if (true) {
	  module.exports = computeLayout;
	}


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var DateTime = __webpack_require__(192);
	var DayButton = __webpack_require__(416);

	var CalendarMonth = React.createClass({displayName: "CalendarMonth",

	  mixins: [Classable],

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    onDayTouchTap: React.PropTypes.func,
	    selectedDate: React.PropTypes.object.isRequired
	  },

	  render: function() {
	    var classes = this.getClasses('mui-date-picker-calendar-month');

	    return (
	      React.createElement("div", {className: classes}, 
	        this._getWeekElements()
	      )
	    );
	  },

	  _getWeekElements: function() {
	    var weekArray = DateTime.getWeekArray(this.props.displayDate);

	    return weekArray.map(function(week, i) {
	      return (
	        React.createElement("div", {
	          key: i, 
	          className: "mui-date-picker-calendar-month-week"}, 
	          this._getDayElements(week)
	        )
	      );
	    }, this);
	  },

	  _getDayElements: function(week) {
	    return week.map(function(day, i) {
	      var selected = DateTime.isEqualDate(this.props.selectedDate, day);
	      return (
	        React.createElement(DayButton, {
	          key: i, 
	          date: day, 
	          onTouchTap: this._handleDayTouchTap, 
	          selected: selected})
	      );
	    }, this);
	  },

	  _handleDayTouchTap: function(e, date) {
	    if (this.props.onDayTouchTap) this.props.onDayTouchTap(e, date);
	  }

	});

	module.exports = CalendarMonth;

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var DateTime = __webpack_require__(192);
	var IconButton = __webpack_require__(52);
	var NavigationChevronLeft = __webpack_require__(67);
	var NavigationChevronRight = __webpack_require__(68);
	var SlideInTransitionGroup = __webpack_require__(398);

	var CalendarToolbar = React.createClass({displayName: "CalendarToolbar",

	  propTypes: {
	    displayDate: React.PropTypes.object.isRequired,
	    onLeftTouchTap: React.PropTypes.func,
	    onRightTouchTap: React.PropTypes.func
	  },

	  getInitialState: function() {
	    return {
	      transitionDirection: 'up'
	    };
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var direction;

	    if (nextProps.displayDate !== this.props.displayDate) {
	      direction = nextProps.displayDate > this.props.displayDate ? 'up' : 'down';
	      this.setState({
	        transitionDirection: direction
	      });
	    }
	  },

	  render: function() {
	    var month = DateTime.getFullMonth(this.props.displayDate);
	    var year = this.props.displayDate.getFullYear();

	    return (
	      React.createElement("div", {className: "mui-date-picker-calendar-toolbar"}, 

	        React.createElement(SlideInTransitionGroup, {
	          className: "mui-date-picker-calendar-toolbar-title", 
	          direction: this.state.transitionDirection}, 
	          React.createElement("div", {key: month + '_' + year}, month, " ", year)
	        ), 

	        React.createElement(IconButton, {
	          className: "mui-date-picker-calendar-toolbar-button-left", 
	          onTouchTap: this.props.onLeftTouchTap}, 
	            React.createElement(NavigationChevronLeft, null)
	        ), 

	        React.createElement(IconButton, {
	          className: "mui-date-picker-calendar-toolbar-button-right", 
	          onTouchTap: this.props.onRightTouchTap}, 
	            React.createElement(NavigationChevronRight, null)
	        )

	      )
	    );
	  }

	});

	module.exports = CalendarToolbar;


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var DateTime = __webpack_require__(192);
	var SlideInTransitionGroup = __webpack_require__(398);

	var DateDisplay = React.createClass({displayName: "DateDisplay",

	  mixins: [Classable],

	  propTypes: {
	    selectedDate: React.PropTypes.object.isRequired
	  },

	  getInitialState: function() {
	    return {
	      transitionDirection: 'up'
	    };
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var direction;

	    if (nextProps.selectedDate !== this.props.selectedDate) {
	      direction = nextProps.selectedDate > this.props.selectedDate ? 'up' : 'down';
	      this.setState({
	        transitionDirection: direction
	      });
	    }
	  },

	  render: function() {
	    var $__0=
	      
	      
	      this.props,selectedDate=$__0.selectedDate,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{selectedDate:1});
	    var classes = this.getClasses('mui-date-picker-date-display');
	    var dayOfWeek = DateTime.getDayOfWeek(this.props.selectedDate);
	    var month = DateTime.getShortMonth(this.props.selectedDate);
	    var day = this.props.selectedDate.getDate();
	    var year = this.props.selectedDate.getFullYear();

	    return (
	      React.createElement("div", React.__spread({},  other, {className: classes}), 

	        React.createElement(SlideInTransitionGroup, {
	          className: "mui-date-picker-date-display-dow", 
	          direction: this.state.transitionDirection}, 
	          React.createElement("div", {key: dayOfWeek}, dayOfWeek)
	        ), 

	        React.createElement("div", {className: "mui-date-picker-date-display-date"}, 

	          React.createElement(SlideInTransitionGroup, {
	            className: "mui-date-picker-date-display-month", 
	            direction: this.state.transitionDirection}, 
	            React.createElement("div", {key: month}, month)
	          ), 

	          React.createElement(SlideInTransitionGroup, {
	            className: "mui-date-picker-date-display-day", 
	            direction: this.state.transitionDirection}, 
	            React.createElement("div", {key: day}, day)
	          ), 

	          React.createElement(SlideInTransitionGroup, {
	            className: "mui-date-picker-date-display-year", 
	            direction: this.state.transitionDirection}, 
	            React.createElement("div", {key: year}, year)
	          )

	        )

	      )
	    );
	  }

	});

	module.exports = DateDisplay;

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(9);
	var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
	var Classable = __webpack_require__(57);

	var SlideIn = React.createClass({displayName: "SlideIn",

	  mixins: [Classable],

	  propTypes: {
	    direction: React.PropTypes.oneOf(['left', 'right', 'up', 'down'])
	  },

	  getDefaultProps: function() {
	    return {
	      direction: 'left'
	    };
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      this.props,className=$__0.className,direction=$__0.direction,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1,direction:1});
	    var classes = this.getClasses('mui-transition-slide-in');

	    classes += ' mui-is-' + this.props.direction;

	    //Add a custom className to every child
	    React.Children.forEach(this.props.children, function(child) {
	      child.props.className = child.props.className ?
	        child.props.className + ' mui-transition-slide-in-child':
	        'mui-transition-slide-in-child';
	    });

	    return (
	      React.createElement(ReactCSSTransitionGroup, React.__spread({},  other, 
	        {className: classes, 
	        transitionName: "mui-transition-slide-in", 
	        component: "div"}), 
	        this.props.children
	      )
	    );
	  }

	});

	module.exports = SlideIn;

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Scroller
	 * http://github.com/zynga/scroller
	 *
	 * Copyright 2011, Zynga Inc.
	 * Licensed under the MIT License.
	 * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
	 *
	 * Based on the work of: Unify Project (unify-project.org)
	 * http://unify-project.org
	 * Copyright 2011, Deutsche Telekom AG
	 * License: MIT + Apache (V2)
	 */

	var core = __webpack_require__(430);
	var Scroller;

	(function() {
		var NOOP = function(){};

		/**
		 * A pure logic 'component' for 'virtual' scrolling/zooming.
		 */
		Scroller = function(callback, options) {

			this.__callback = callback;

			this.options = {

				/** Enable scrolling on x-axis */
				scrollingX: true,

				/** Enable scrolling on y-axis */
				scrollingY: true,

				/** Enable animations for deceleration, snap back, zooming and scrolling */
				animating: true,

				/** duration for animations triggered by scrollTo/zoomTo */
				animationDuration: 250,

				/** Enable bouncing (content can be slowly moved outside and jumps back after releasing) */
				bouncing: true,

				/** Enable locking to the main axis if user moves only slightly on one of them at start */
				locking: true,

				/** Enable pagination mode (switching between full page content panes) */
				paging: false,

				/** Enable snapping of content to a configured pixel grid */
				snapping: false,

				/** Enable zooming of content via API, fingers and mouse wheel */
				zooming: false,

				/** Minimum zoom level */
				minZoom: 0.5,

				/** Maximum zoom level */
				maxZoom: 3,

				/** Multiply or decrease scrolling speed **/
				speedMultiplier: 1,

				/** Callback that is fired on the later of touch end or deceleration end,
					provided that another scrolling action has not begun. Used to know
					when to fade out a scrollbar. */
				scrollingComplete: NOOP,

				/** Increase or decrease the amount of friction applied to deceleration **/
				decelerationRate: 0.95,
				
				/** This configures the amount of change applied to deceleration when reaching boundaries  **/
	            penetrationDeceleration : 0.03,

	            /** This configures the amount of change applied to acceleration when reaching boundaries  **/
	            penetrationAcceleration : 0.08

			};

			for (var key in options) {
				this.options[key] = options[key];
			}

		};


		// Easing Equations (c) 2003 Robert Penner, all rights reserved.
		// Open source under the BSD License.

		/**
		 * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
		**/
		var easeOutCubic = function(pos) {
			return (Math.pow((pos - 1), 3) + 1);
		};

		/**
		 * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
		**/
		var easeInOutCubic = function(pos) {
			if ((pos /= 0.5) < 1) {
				return 0.5 * Math.pow(pos, 3);
			}

			return 0.5 * (Math.pow((pos - 2), 3) + 2);
		};


		var members = {

			/*
			---------------------------------------------------------------------------
				INTERNAL FIELDS :: STATUS
			---------------------------------------------------------------------------
			*/

			/** {Boolean} Whether only a single finger is used in touch handling */
			__isSingleTouch: false,

			/** {Boolean} Whether a touch event sequence is in progress */
			__isTracking: false,

			/** {Boolean} Whether a deceleration animation went to completion. */
			__didDecelerationComplete: false,

			/**
			 * {Boolean} Whether a gesture zoom/rotate event is in progress. Activates when
			 * a gesturestart event happens. This has higher priority than dragging.
			 */
			__isGesturing: false,

			/**
			 * {Boolean} Whether the user has moved by such a distance that we have enabled
			 * dragging mode. Hint: It's only enabled after some pixels of movement to
			 * not interrupt with clicks etc.
			 */
			__isDragging: false,

			/**
			 * {Boolean} Not touching and dragging anymore, and smoothly animating the
			 * touch sequence using deceleration.
			 */
			__isDecelerating: false,

			/**
			 * {Boolean} Smoothly animating the currently configured change
			 */
			__isAnimating: false,



			/*
			---------------------------------------------------------------------------
				INTERNAL FIELDS :: DIMENSIONS
			---------------------------------------------------------------------------
			*/

			/** {Integer} Available outer left position (from document perspective) */
			__clientLeft: 0,

			/** {Integer} Available outer top position (from document perspective) */
			__clientTop: 0,

			/** {Integer} Available outer width */
			__clientWidth: 0,

			/** {Integer} Available outer height */
			__clientHeight: 0,

			/** {Integer} Outer width of content */
			__contentWidth: 0,

			/** {Integer} Outer height of content */
			__contentHeight: 0,

			/** {Integer} Snapping width for content */
			__snapWidth: 100,

			/** {Integer} Snapping height for content */
			__snapHeight: 100,

			/** {Integer} Height to assign to refresh area */
			__refreshHeight: null,

			/** {Boolean} Whether the refresh process is enabled when the event is released now */
			__refreshActive: false,

			/** {Function} Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release */
			__refreshActivate: null,

			/** {Function} Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled */
			__refreshDeactivate: null,

			/** {Function} Callback to execute to start the actual refresh. Call {@link #refreshFinish} when done */
			__refreshStart: null,

			/** {Number} Zoom level */
			__zoomLevel: 1,

			/** {Number} Scroll position on x-axis */
			__scrollLeft: 0,

			/** {Number} Scroll position on y-axis */
			__scrollTop: 0,

			/** {Integer} Maximum allowed scroll position on x-axis */
			__maxScrollLeft: 0,

			/** {Integer} Maximum allowed scroll position on y-axis */
			__maxScrollTop: 0,

			/* {Number} Scheduled left position (final position when animating) */
			__scheduledLeft: 0,

			/* {Number} Scheduled top position (final position when animating) */
			__scheduledTop: 0,

			/* {Number} Scheduled zoom level (final scale when animating) */
			__scheduledZoom: 0,



			/*
			---------------------------------------------------------------------------
				INTERNAL FIELDS :: LAST POSITIONS
			---------------------------------------------------------------------------
			*/

			/** {Number} Left position of finger at start */
			__lastTouchLeft: null,

			/** {Number} Top position of finger at start */
			__lastTouchTop: null,

			/** {Date} Timestamp of last move of finger. Used to limit tracking range for deceleration speed. */
			__lastTouchMove: null,

			/** {Array} List of positions, uses three indexes for each state: left, top, timestamp */
			__positions: null,



			/*
			---------------------------------------------------------------------------
				INTERNAL FIELDS :: DECELERATION SUPPORT
			---------------------------------------------------------------------------
			*/

			/** {Integer} Minimum left scroll position during deceleration */
			__minDecelerationScrollLeft: null,

			/** {Integer} Minimum top scroll position during deceleration */
			__minDecelerationScrollTop: null,

			/** {Integer} Maximum left scroll position during deceleration */
			__maxDecelerationScrollLeft: null,

			/** {Integer} Maximum top scroll position during deceleration */
			__maxDecelerationScrollTop: null,

			/** {Number} Current factor to modify horizontal scroll position with on every step */
			__decelerationVelocityX: null,

			/** {Number} Current factor to modify vertical scroll position with on every step */
			__decelerationVelocityY: null,



			/*
			---------------------------------------------------------------------------
				PUBLIC API
			---------------------------------------------------------------------------
			*/

			/**
			 * Configures the dimensions of the client (outer) and content (inner) elements.
			 * Requires the available space for the outer element and the outer size of the inner element.
			 * All values which are falsy (null or zero etc.) are ignored and the old value is kept.
			 *
			 * @param clientWidth {Integer ? null} Inner width of outer element
			 * @param clientHeight {Integer ? null} Inner height of outer element
			 * @param contentWidth {Integer ? null} Outer width of inner element
			 * @param contentHeight {Integer ? null} Outer height of inner element
			 */
			setDimensions: function(clientWidth, clientHeight, contentWidth, contentHeight) {

				var self = this;

				// Only update values which are defined
				if (clientWidth === +clientWidth) {
					self.__clientWidth = clientWidth;
				}

				if (clientHeight === +clientHeight) {
					self.__clientHeight = clientHeight;
				}

				if (contentWidth === +contentWidth) {
					self.__contentWidth = contentWidth;
				}

				if (contentHeight === +contentHeight) {
					self.__contentHeight = contentHeight;
				}

				// Refresh maximums
				self.__computeScrollMax();

				// Refresh scroll position
				self.scrollTo(self.__scrollLeft, self.__scrollTop, true);

			},


			/**
			 * Sets the client coordinates in relation to the document.
			 *
			 * @param left {Integer ? 0} Left position of outer element
			 * @param top {Integer ? 0} Top position of outer element
			 */
			setPosition: function(left, top) {

				var self = this;

				self.__clientLeft = left || 0;
				self.__clientTop = top || 0;

			},


			/**
			 * Configures the snapping (when snapping is active)
			 *
			 * @param width {Integer} Snapping width
			 * @param height {Integer} Snapping height
			 */
			setSnapSize: function(width, height) {

				var self = this;

				self.__snapWidth = width;
				self.__snapHeight = height;

			},


			/**
			 * Activates pull-to-refresh. A special zone on the top of the list to start a list refresh whenever
			 * the user event is released during visibility of this zone. This was introduced by some apps on iOS like
			 * the official Twitter client.
			 *
			 * @param height {Integer} Height of pull-to-refresh zone on top of rendered list
			 * @param activateCallback {Function} Callback to execute on activation. This is for signalling the user about a refresh is about to happen when he release.
			 * @param deactivateCallback {Function} Callback to execute on deactivation. This is for signalling the user about the refresh being cancelled.
			 * @param startCallback {Function} Callback to execute to start the real async refresh action. Call {@link #finishPullToRefresh} after finish of refresh.
			 */
			activatePullToRefresh: function(height, activateCallback, deactivateCallback, startCallback) {

				var self = this;

				self.__refreshHeight = height;
				self.__refreshActivate = activateCallback;
				self.__refreshDeactivate = deactivateCallback;
				self.__refreshStart = startCallback;

			},


			/**
			 * Starts pull-to-refresh manually.
			 */
			triggerPullToRefresh: function() {
				// Use publish instead of scrollTo to allow scrolling to out of boundary position
				// We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
				this.__publish(this.__scrollLeft, -this.__refreshHeight, this.__zoomLevel, true);

				if (this.__refreshStart) {
					this.__refreshStart();
				}
			},


			/**
			 * Signalizes that pull-to-refresh is finished.
			 */
			finishPullToRefresh: function() {

				var self = this;

				self.__refreshActive = false;
				if (self.__refreshDeactivate) {
					self.__refreshDeactivate();
				}

				self.scrollTo(self.__scrollLeft, self.__scrollTop, true);

			},


			/**
			 * Returns the scroll position and zooming values
			 *
			 * @return {Map} `left` and `top` scroll position and `zoom` level
			 */
			getValues: function() {

				var self = this;

				return {
					left: self.__scrollLeft,
					top: self.__scrollTop,
					zoom: self.__zoomLevel
				};

			},


			/**
			 * Returns the maximum scroll values
			 *
			 * @return {Map} `left` and `top` maximum scroll values
			 */
			getScrollMax: function() {

				var self = this;

				return {
					left: self.__maxScrollLeft,
					top: self.__maxScrollTop
				};

			},


			/**
			 * Zooms to the given level. Supports optional animation. Zooms
			 * the center when no coordinates are given.
			 *
			 * @param level {Number} Level to zoom to
			 * @param animate {Boolean ? false} Whether to use animation
			 * @param originLeft {Number ? null} Zoom in at given left coordinate
			 * @param originTop {Number ? null} Zoom in at given top coordinate
			 * @param callback {Function ? null} A callback that gets fired when the zoom is complete.
			 */
			zoomTo: function(level, animate, originLeft, originTop, callback) {

				var self = this;

				if (!self.options.zooming) {
					throw new Error("Zooming is not enabled!");
				}

				// Add callback if exists
				if(callback) {
					self.__zoomComplete = callback;
				}

				// Stop deceleration
				if (self.__isDecelerating) {
					core.effect.Animate.stop(self.__isDecelerating);
					self.__isDecelerating = false;
				}

				var oldLevel = self.__zoomLevel;

				// Normalize input origin to center of viewport if not defined
				if (originLeft == null) {
					originLeft = self.__clientWidth / 2;
				}

				if (originTop == null) {
					originTop = self.__clientHeight / 2;
				}

				// Limit level according to configuration
				level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

				// Recompute maximum values while temporary tweaking maximum scroll ranges
				self.__computeScrollMax(level);

				// Recompute left and top coordinates based on new zoom level
				var left = ((originLeft + self.__scrollLeft) * level / oldLevel) - originLeft;
				var top = ((originTop + self.__scrollTop) * level / oldLevel) - originTop;

				// Limit x-axis
				if (left > self.__maxScrollLeft) {
					left = self.__maxScrollLeft;
				} else if (left < 0) {
					left = 0;
				}

				// Limit y-axis
				if (top > self.__maxScrollTop) {
					top = self.__maxScrollTop;
				} else if (top < 0) {
					top = 0;
				}

				// Push values out
				self.__publish(left, top, level, animate);

			},


			/**
			 * Zooms the content by the given factor.
			 *
			 * @param factor {Number} Zoom by given factor
			 * @param animate {Boolean ? false} Whether to use animation
			 * @param originLeft {Number ? 0} Zoom in at given left coordinate
			 * @param originTop {Number ? 0} Zoom in at given top coordinate
			 * @param callback {Function ? null} A callback that gets fired when the zoom is complete.
			 */
			zoomBy: function(factor, animate, originLeft, originTop, callback) {

				var self = this;

				self.zoomTo(self.__zoomLevel * factor, animate, originLeft, originTop, callback);

			},


			/**
			 * Scrolls to the given position. Respect limitations and snapping automatically.
			 *
			 * @param left {Number?null} Horizontal scroll position, keeps current if value is <code>null</code>
			 * @param top {Number?null} Vertical scroll position, keeps current if value is <code>null</code>
			 * @param animate {Boolean?false} Whether the scrolling should happen using an animation
			 * @param zoom {Number?null} Zoom level to go to
			 */
			scrollTo: function(left, top, animate, zoom) {

				var self = this;

				// Stop deceleration
				if (self.__isDecelerating) {
					core.effect.Animate.stop(self.__isDecelerating);
					self.__isDecelerating = false;
				}

				// Correct coordinates based on new zoom level
				if (zoom != null && zoom !== self.__zoomLevel) {

					if (!self.options.zooming) {
						throw new Error("Zooming is not enabled!");
					}

					left *= zoom;
					top *= zoom;

					// Recompute maximum values while temporary tweaking maximum scroll ranges
					self.__computeScrollMax(zoom);

				} else {

					// Keep zoom when not defined
					zoom = self.__zoomLevel;

				}

				if (!self.options.scrollingX) {

					left = self.__scrollLeft;

				} else {

					if (self.options.paging) {
						left = Math.round(left / self.__clientWidth) * self.__clientWidth;
					} else if (self.options.snapping) {
						left = Math.round(left / self.__snapWidth) * self.__snapWidth;
					}

				}

				if (!self.options.scrollingY) {

					top = self.__scrollTop;

				} else {

					if (self.options.paging) {
						top = Math.round(top / self.__clientHeight) * self.__clientHeight;
					} else if (self.options.snapping) {
						top = Math.round(top / self.__snapHeight) * self.__snapHeight;
					}

				}

				// Limit for allowed ranges
				left = Math.max(Math.min(self.__maxScrollLeft, left), 0);
				top = Math.max(Math.min(self.__maxScrollTop, top), 0);

				// Don't animate when no change detected, still call publish to make sure
				// that rendered position is really in-sync with internal data
				if (left === self.__scrollLeft && top === self.__scrollTop) {
					animate = false;
				}

				// Publish new values
				self.__publish(left, top, zoom, animate);

			},


			/**
			 * Scroll by the given offset
			 *
			 * @param left {Number ? 0} Scroll x-axis by given offset
			 * @param top {Number ? 0} Scroll x-axis by given offset
			 * @param animate {Boolean ? false} Whether to animate the given change
			 */
			scrollBy: function(left, top, animate) {

				var self = this;

				var startLeft = self.__isAnimating ? self.__scheduledLeft : self.__scrollLeft;
				var startTop = self.__isAnimating ? self.__scheduledTop : self.__scrollTop;

				self.scrollTo(startLeft + (left || 0), startTop + (top || 0), animate);

			},



			/*
			---------------------------------------------------------------------------
				EVENT CALLBACKS
			---------------------------------------------------------------------------
			*/

			/**
			 * Mouse wheel handler for zooming support
			 */
			doMouseZoom: function(wheelDelta, timeStamp, pageX, pageY) {

				var self = this;
				var change = wheelDelta > 0 ? 0.97 : 1.03;

				return self.zoomTo(self.__zoomLevel * change, false, pageX - self.__clientLeft, pageY - self.__clientTop);

			},


			/**
			 * Touch start handler for scrolling support
			 */
			doTouchStart: function(touches, timeStamp) {

				// Array-like check is enough here
				if (touches.length == null) {
					throw new Error("Invalid touch list: " + touches);
				}

				if (timeStamp instanceof Date) {
					timeStamp = timeStamp.valueOf();
				}
				if (typeof timeStamp !== "number") {
					throw new Error("Invalid timestamp value: " + timeStamp);
				}

				var self = this;

				// Reset interruptedAnimation flag
				self.__interruptedAnimation = true;

				// Stop deceleration
				if (self.__isDecelerating) {
					core.effect.Animate.stop(self.__isDecelerating);
					self.__isDecelerating = false;
					self.__interruptedAnimation = true;
				}

				// Stop animation
				if (self.__isAnimating) {
					core.effect.Animate.stop(self.__isAnimating);
					self.__isAnimating = false;
					self.__interruptedAnimation = true;
				}

				// Use center point when dealing with two fingers
				var currentTouchLeft, currentTouchTop;
				var isSingleTouch = touches.length === 1;
				if (isSingleTouch) {
					currentTouchLeft = touches[0].pageX;
					currentTouchTop = touches[0].pageY;
				} else {
					currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
					currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
				}

				// Store initial positions
				self.__initialTouchLeft = currentTouchLeft;
				self.__initialTouchTop = currentTouchTop;

				// Store current zoom level
				self.__zoomLevelStart = self.__zoomLevel;

				// Store initial touch positions
				self.__lastTouchLeft = currentTouchLeft;
				self.__lastTouchTop = currentTouchTop;

				// Store initial move time stamp
				self.__lastTouchMove = timeStamp;

				// Reset initial scale
				self.__lastScale = 1;

				// Reset locking flags
				self.__enableScrollX = !isSingleTouch && self.options.scrollingX;
				self.__enableScrollY = !isSingleTouch && self.options.scrollingY;

				// Reset tracking flag
				self.__isTracking = true;

				// Reset deceleration complete flag
				self.__didDecelerationComplete = false;

				// Dragging starts directly with two fingers, otherwise lazy with an offset
				self.__isDragging = !isSingleTouch;

				// Some features are disabled in multi touch scenarios
				self.__isSingleTouch = isSingleTouch;

				// Clearing data structure
				self.__positions = [];

			},


			/**
			 * Touch move handler for scrolling support
			 */
			doTouchMove: function(touches, timeStamp, scale) {

				// Array-like check is enough here
				if (touches.length == null) {
					throw new Error("Invalid touch list: " + touches);
				}

				if (timeStamp instanceof Date) {
					timeStamp = timeStamp.valueOf();
				}
				if (typeof timeStamp !== "number") {
					throw new Error("Invalid timestamp value: " + timeStamp);
				}

				var self = this;

				// Ignore event when tracking is not enabled (event might be outside of element)
				if (!self.__isTracking) {
					return;
				}


				var currentTouchLeft, currentTouchTop;

				// Compute move based around of center of fingers
				if (touches.length === 2) {
					currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
					currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
				} else {
					currentTouchLeft = touches[0].pageX;
					currentTouchTop = touches[0].pageY;
				}

				var positions = self.__positions;

				// Are we already is dragging mode?
				if (self.__isDragging) {

					// Compute move distance
					var moveX = currentTouchLeft - self.__lastTouchLeft;
					var moveY = currentTouchTop - self.__lastTouchTop;

					// Read previous scroll position and zooming
					var scrollLeft = self.__scrollLeft;
					var scrollTop = self.__scrollTop;
					var level = self.__zoomLevel;

					// Work with scaling
					if (scale != null && self.options.zooming) {

						var oldLevel = level;

						// Recompute level based on previous scale and new scale
						level = level / self.__lastScale * scale;

						// Limit level according to configuration
						level = Math.max(Math.min(level, self.options.maxZoom), self.options.minZoom);

						// Only do further compution when change happened
						if (oldLevel !== level) {

							// Compute relative event position to container
							var currentTouchLeftRel = currentTouchLeft - self.__clientLeft;
							var currentTouchTopRel = currentTouchTop - self.__clientTop;

							// Recompute left and top coordinates based on new zoom level
							scrollLeft = ((currentTouchLeftRel + scrollLeft) * level / oldLevel) - currentTouchLeftRel;
							scrollTop = ((currentTouchTopRel + scrollTop) * level / oldLevel) - currentTouchTopRel;

							// Recompute max scroll values
							self.__computeScrollMax(level);

						}
					}

					if (self.__enableScrollX) {

						scrollLeft -= moveX * this.options.speedMultiplier;
						var maxScrollLeft = self.__maxScrollLeft;

						if (scrollLeft > maxScrollLeft || scrollLeft < 0) {

							// Slow down on the edges
							if (self.options.bouncing) {

								scrollLeft += (moveX / 2  * this.options.speedMultiplier);

							} else if (scrollLeft > maxScrollLeft) {

								scrollLeft = maxScrollLeft;

							} else {

								scrollLeft = 0;

							}
						}
					}

					// Compute new vertical scroll position
					if (self.__enableScrollY) {

						scrollTop -= moveY * this.options.speedMultiplier;
						var maxScrollTop = self.__maxScrollTop;

						if (scrollTop > maxScrollTop || scrollTop < 0) {

							// Slow down on the edges
							if (self.options.bouncing) {

								scrollTop += (moveY / 2 * this.options.speedMultiplier);

								// Support pull-to-refresh (only when only y is scrollable)
								if (!self.__enableScrollX && self.__refreshHeight != null) {

									if (!self.__refreshActive && scrollTop <= -self.__refreshHeight) {

										self.__refreshActive = true;
										if (self.__refreshActivate) {
											self.__refreshActivate();
										}

									} else if (self.__refreshActive && scrollTop > -self.__refreshHeight) {

										self.__refreshActive = false;
										if (self.__refreshDeactivate) {
											self.__refreshDeactivate();
										}

									}
								}

							} else if (scrollTop > maxScrollTop) {

								scrollTop = maxScrollTop;

							} else {

								scrollTop = 0;

							}
						}
					}

					// Keep list from growing infinitely (holding min 10, max 20 measure points)
					if (positions.length > 60) {
						positions.splice(0, 30);
					}

					// Track scroll movement for decleration
					positions.push(scrollLeft, scrollTop, timeStamp);

					// Sync scroll position
					self.__publish(scrollLeft, scrollTop, level);

				// Otherwise figure out whether we are switching into dragging mode now.
				} else {

					var minimumTrackingForScroll = self.options.locking ? 3 : 0;
					var minimumTrackingForDrag = 5;

					var distanceX = Math.abs(currentTouchLeft - self.__initialTouchLeft);
					var distanceY = Math.abs(currentTouchTop - self.__initialTouchTop);

					self.__enableScrollX = self.options.scrollingX && distanceX >= minimumTrackingForScroll;
					self.__enableScrollY = self.options.scrollingY && distanceY >= minimumTrackingForScroll;

					positions.push(self.__scrollLeft, self.__scrollTop, timeStamp);

					self.__isDragging = (self.__enableScrollX || self.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
					if (self.__isDragging) {
						self.__interruptedAnimation = false;
					}

				}

				// Update last touch positions and time stamp for next event
				self.__lastTouchLeft = currentTouchLeft;
				self.__lastTouchTop = currentTouchTop;
				self.__lastTouchMove = timeStamp;
				self.__lastScale = scale;

			},


			/**
			 * Touch end handler for scrolling support
			 */
			doTouchEnd: function(timeStamp) {

				if (timeStamp instanceof Date) {
					timeStamp = timeStamp.valueOf();
				}
				if (typeof timeStamp !== "number") {
					throw new Error("Invalid timestamp value: " + timeStamp);
				}

				var self = this;

				// Ignore event when tracking is not enabled (no touchstart event on element)
				// This is required as this listener ('touchmove') sits on the document and not on the element itself.
				if (!self.__isTracking) {
					return;
				}

				// Not touching anymore (when two finger hit the screen there are two touch end events)
				self.__isTracking = false;

				// Be sure to reset the dragging flag now. Here we also detect whether
				// the finger has moved fast enough to switch into a deceleration animation.
				if (self.__isDragging) {

					// Reset dragging flag
					self.__isDragging = false;

					// Start deceleration
					// Verify that the last move detected was in some relevant time frame
					if (self.__isSingleTouch && self.options.animating && (timeStamp - self.__lastTouchMove) <= 100) {

						// Then figure out what the scroll position was about 100ms ago
						var positions = self.__positions;
						var endPos = positions.length - 1;
						var startPos = endPos;

						// Move pointer to position measured 100ms ago
						for (var i = endPos; i > 0 && positions[i] > (self.__lastTouchMove - 100); i -= 3) {
							startPos = i;
						}

						// If we haven't received consecutive touchmove events within a 100ms
						// timeframe, attempt a best-effort based on the first position. This
						// typically happens when an expensive operation occurs on the main
						// thread during scrolling, such as image decoding.
						if (startPos === endPos && positions.length > 5) {
							startPos = 2;
						}

						// If start and stop position is identical in a 100ms timeframe,
						// we cannot compute any useful deceleration.
						if (startPos !== endPos) {

							// Compute relative movement between these two points
							var timeOffset = positions[endPos] - positions[startPos];
							var movedLeft = self.__scrollLeft - positions[startPos - 2];
							var movedTop = self.__scrollTop - positions[startPos - 1];

							// Based on 50ms compute the movement to apply for each render step
							self.__decelerationVelocityX = movedLeft / timeOffset * (1000 / 60);
							self.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

							// How much velocity is required to start the deceleration
							var minVelocityToStartDeceleration = self.options.paging || self.options.snapping ? 4 : 1;

							// Verify that we have enough velocity to start deceleration
							if (Math.abs(self.__decelerationVelocityX) > minVelocityToStartDeceleration || Math.abs(self.__decelerationVelocityY) > minVelocityToStartDeceleration) {

								// Deactivate pull-to-refresh when decelerating
								if (!self.__refreshActive) {
									self.__startDeceleration(timeStamp);
								}
							}
						} else {
							self.options.scrollingComplete();
						}
					} else if ((timeStamp - self.__lastTouchMove) > 100) {
						self.options.scrollingComplete();
		 			}
				}

				// If this was a slower move it is per default non decelerated, but this
				// still means that we want snap back to the bounds which is done here.
				// This is placed outside the condition above to improve edge case stability
				// e.g. touchend fired without enabled dragging. This should normally do not
				// have modified the scroll positions or even showed the scrollbars though.
				if (!self.__isDecelerating) {

					if (self.__refreshActive && self.__refreshStart) {

						// Use publish instead of scrollTo to allow scrolling to out of boundary position
						// We don't need to normalize scrollLeft, zoomLevel, etc. here because we only y-scrolling when pull-to-refresh is enabled
						self.__publish(self.__scrollLeft, -self.__refreshHeight, self.__zoomLevel, true);

						if (self.__refreshStart) {
							self.__refreshStart();
						}

					} else {

						if (self.__interruptedAnimation || self.__isDragging) {
							self.options.scrollingComplete();
						}
						self.scrollTo(self.__scrollLeft, self.__scrollTop, true, self.__zoomLevel);

						// Directly signalize deactivation (nothing todo on refresh?)
						if (self.__refreshActive) {

							self.__refreshActive = false;
							if (self.__refreshDeactivate) {
								self.__refreshDeactivate();
							}

						}
					}
				}

				// Fully cleanup list
				self.__positions.length = 0;

			},



			/*
			---------------------------------------------------------------------------
				PRIVATE API
			---------------------------------------------------------------------------
			*/

			/**
			 * Applies the scroll position to the content element
			 *
			 * @param left {Number} Left scroll position
			 * @param top {Number} Top scroll position
			 * @param animate {Boolean?false} Whether animation should be used to move to the new coordinates
			 */
			__publish: function(left, top, zoom, animate) {

				var self = this;

				// Remember whether we had an animation, then we try to continue based on the current "drive" of the animation
				var wasAnimating = self.__isAnimating;
				if (wasAnimating) {
					core.effect.Animate.stop(wasAnimating);
					self.__isAnimating = false;
				}

				if (animate && self.options.animating) {

					// Keep scheduled positions for scrollBy/zoomBy functionality
					self.__scheduledLeft = left;
					self.__scheduledTop = top;
					self.__scheduledZoom = zoom;

					var oldLeft = self.__scrollLeft;
					var oldTop = self.__scrollTop;
					var oldZoom = self.__zoomLevel;

					var diffLeft = left - oldLeft;
					var diffTop = top - oldTop;
					var diffZoom = zoom - oldZoom;

					var step = function(percent, now, render) {

						if (render) {

							self.__scrollLeft = oldLeft + (diffLeft * percent);
							self.__scrollTop = oldTop + (diffTop * percent);
							self.__zoomLevel = oldZoom + (diffZoom * percent);

							// Push values out
							if (self.__callback) {
								self.__callback(self.__scrollLeft, self.__scrollTop, self.__zoomLevel);
							}

						}
					};

					var verify = function(id) {
						return self.__isAnimating === id;
					};

					var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
						if (animationId === self.__isAnimating) {
							self.__isAnimating = false;
						}
						if (self.__didDecelerationComplete || wasFinished) {
							self.options.scrollingComplete();
						}

						if (self.options.zooming) {
							self.__computeScrollMax();
							if(self.__zoomComplete) {
								self.__zoomComplete();
								self.__zoomComplete = null;
							}
						}
					};

					// When continuing based on previous animation we choose an ease-out animation instead of ease-in-out
					self.__isAnimating = core.effect.Animate.start(step, verify, completed, self.options.animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);

				} else {

					self.__scheduledLeft = self.__scrollLeft = left;
					self.__scheduledTop = self.__scrollTop = top;
					self.__scheduledZoom = self.__zoomLevel = zoom;

					// Push values out
					if (self.__callback) {
						self.__callback(left, top, zoom);
					}

					// Fix max scroll ranges
					if (self.options.zooming) {
						self.__computeScrollMax();
						if(self.__zoomComplete) {
							self.__zoomComplete();
							self.__zoomComplete = null;
						}
					}
				}
			},


			/**
			 * Recomputes scroll minimum values based on client dimensions and content dimensions.
			 */
			__computeScrollMax: function(zoomLevel) {

				var self = this;

				if (zoomLevel == null) {
					zoomLevel = self.__zoomLevel;
				}

				self.__maxScrollLeft = Math.max((self.__contentWidth * zoomLevel) - self.__clientWidth, 0);
				self.__maxScrollTop = Math.max((self.__contentHeight * zoomLevel) - self.__clientHeight, 0);

			},



			/*
			---------------------------------------------------------------------------
				ANIMATION (DECELERATION) SUPPORT
			---------------------------------------------------------------------------
			*/

			/**
			 * Called when a touch sequence end and the speed of the finger was high enough
			 * to switch into deceleration mode.
			 */
			__startDeceleration: function(timeStamp) {

				var self = this;

				if (self.options.paging) {

					var scrollLeft = Math.max(Math.min(self.__scrollLeft, self.__maxScrollLeft), 0);
					var scrollTop = Math.max(Math.min(self.__scrollTop, self.__maxScrollTop), 0);
					var clientWidth = self.__clientWidth;
					var clientHeight = self.__clientHeight;

					// We limit deceleration not to the min/max values of the allowed range, but to the size of the visible client area.
					// Each page should have exactly the size of the client area.
					self.__minDecelerationScrollLeft = Math.floor(scrollLeft / clientWidth) * clientWidth;
					self.__minDecelerationScrollTop = Math.floor(scrollTop / clientHeight) * clientHeight;
					self.__maxDecelerationScrollLeft = Math.ceil(scrollLeft / clientWidth) * clientWidth;
					self.__maxDecelerationScrollTop = Math.ceil(scrollTop / clientHeight) * clientHeight;

				} else {

					self.__minDecelerationScrollLeft = 0;
					self.__minDecelerationScrollTop = 0;
					self.__maxDecelerationScrollLeft = self.__maxScrollLeft;
					self.__maxDecelerationScrollTop = self.__maxScrollTop;

				}

				// Wrap class method
				var step = function(percent, now, render) {
					self.__stepThroughDeceleration(render);
				};

				// How much velocity is required to keep the deceleration running
				var minVelocityToKeepDecelerating = self.options.snapping ? 4 : 0.1;

				// Detect whether it's still worth to continue animating steps
				// If we are already slow enough to not being user perceivable anymore, we stop the whole process here.
				var verify = function() {
					var shouldContinue = Math.abs(self.__decelerationVelocityX) >= minVelocityToKeepDecelerating || Math.abs(self.__decelerationVelocityY) >= minVelocityToKeepDecelerating;
					if (!shouldContinue) {
						self.__didDecelerationComplete = true;
					}
					return shouldContinue;
				};

				var completed = function(renderedFramesPerSecond, animationId, wasFinished) {
					self.__isDecelerating = false;
					if (self.__didDecelerationComplete) {
						self.options.scrollingComplete();
					}

					// Animate to grid when snapping is active, otherwise just fix out-of-boundary positions
					self.scrollTo(self.__scrollLeft, self.__scrollTop, self.options.snapping);
				};

				// Start animation and switch on flag
				self.__isDecelerating = core.effect.Animate.start(step, verify, completed);

			},


			/**
			 * Called on every step of the animation
			 *
			 * @param inMemory {Boolean?false} Whether to not render the current step, but keep it in memory only. Used internally only!
			 */
			__stepThroughDeceleration: function(render) {

				var self = this;


				//
				// COMPUTE NEXT SCROLL POSITION
				//

				// Add deceleration to scroll position
				var scrollLeft = self.__scrollLeft + self.__decelerationVelocityX;
				var scrollTop = self.__scrollTop + self.__decelerationVelocityY;


				//
				// HARD LIMIT SCROLL POSITION FOR NON BOUNCING MODE
				//

				if (!self.options.bouncing) {

					var scrollLeftFixed = Math.max(Math.min(self.__maxDecelerationScrollLeft, scrollLeft), self.__minDecelerationScrollLeft);
					if (scrollLeftFixed !== scrollLeft) {
						scrollLeft = scrollLeftFixed;
						self.__decelerationVelocityX = 0;
					}

					var scrollTopFixed = Math.max(Math.min(self.__maxDecelerationScrollTop, scrollTop), self.__minDecelerationScrollTop);
					if (scrollTopFixed !== scrollTop) {
						scrollTop = scrollTopFixed;
						self.__decelerationVelocityY = 0;
					}

				}


				//
				// UPDATE SCROLL POSITION
				//

				if (render) {

					self.__publish(scrollLeft, scrollTop, self.__zoomLevel);

				} else {

					self.__scrollLeft = scrollLeft;
					self.__scrollTop = scrollTop;

				}


				//
				// SLOW DOWN
				//

				// Slow down velocity on every iteration
				if (!self.options.paging) {

					// This is the factor applied to every iteration of the animation
					// to slow down the process. This should emulate natural behavior where
					// objects slow down when the initiator of the movement is removed
					var frictionFactor = self.options.decelerationRate;

					self.__decelerationVelocityX *= frictionFactor;
					self.__decelerationVelocityY *= frictionFactor;

				}


				//
				// BOUNCING SUPPORT
				//

				if (self.options.bouncing) {

					var scrollOutsideX = 0;
					var scrollOutsideY = 0;

					// This configures the amount of change applied to deceleration/acceleration when reaching boundaries
					var penetrationDeceleration = self.options.penetrationDeceleration; 
					var penetrationAcceleration = self.options.penetrationAcceleration; 

					// Check limits
					if (scrollLeft < self.__minDecelerationScrollLeft) {
						scrollOutsideX = self.__minDecelerationScrollLeft - scrollLeft;
					} else if (scrollLeft > self.__maxDecelerationScrollLeft) {
						scrollOutsideX = self.__maxDecelerationScrollLeft - scrollLeft;
					}

					if (scrollTop < self.__minDecelerationScrollTop) {
						scrollOutsideY = self.__minDecelerationScrollTop - scrollTop;
					} else if (scrollTop > self.__maxDecelerationScrollTop) {
						scrollOutsideY = self.__maxDecelerationScrollTop - scrollTop;
					}

					// Slow down until slow enough, then flip back to snap position
					if (scrollOutsideX !== 0) {
						if (scrollOutsideX * self.__decelerationVelocityX <= 0) {
							self.__decelerationVelocityX += scrollOutsideX * penetrationDeceleration;
						} else {
							self.__decelerationVelocityX = scrollOutsideX * penetrationAcceleration;
						}
					}

					if (scrollOutsideY !== 0) {
						if (scrollOutsideY * self.__decelerationVelocityY <= 0) {
							self.__decelerationVelocityY += scrollOutsideY * penetrationDeceleration;
						} else {
							self.__decelerationVelocityY = scrollOutsideY * penetrationAcceleration;
						}
					}
				}
			}
		};

		// Copy over members to prototype
		for (var key in members) {
			Scroller.prototype[key] = members[key];
		}

		module.exports = Scroller;
	})();


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexShrink: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeOpacity: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(424);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(401);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(425);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(207);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(140);

	var flattenChildren = __webpack_require__(426);
	var instantiateReactComponent = __webpack_require__(271);
	var shouldUpdateReactComponent = __webpack_require__(273);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);

	var createNodesFromMarkup = __webpack_require__(427);
	var emptyFunction = __webpack_require__(209);
	var getMarkupWrap = __webpack_require__(428);
	var invariant = __webpack_require__(107);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);
	var escapeTextContentForBrowser = __webpack_require__(240);
	var setInnerHTML = __webpack_require__(272);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(145);

	var getNodeForCharacterOffset = __webpack_require__(429);
	var getTextContentAccessor = __webpack_require__(408);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(380);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() {
		var list = [];
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
		return list;
	}

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(15);
	var Classable = __webpack_require__(57);
	var DateTime = __webpack_require__(192);
	var EnhancedButton = __webpack_require__(48);

	var DayButton = React.createClass({displayName: "DayButton",

	  mixins: [Classable],

	  propTypes: {
	    date: React.PropTypes.object,
	    onTouchTap: React.PropTypes.func,
	    selected: React.PropTypes.bool
	  },

	  render: function() {
	    var $__0=
	      
	      
	      
	      
	      
	      this.props,className=$__0.className,date=$__0.date,onTouchTap=$__0.onTouchTap,selected=$__0.selected,other=(function(source, exclusion) {var rest = {};var hasOwn = Object.prototype.hasOwnProperty;if (source == null) {throw new TypeError();}for (var key in source) {if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {rest[key] = source[key];}}return rest;})($__0,{className:1,date:1,onTouchTap:1,selected:1});
	    var classes = this.getClasses('mui-date-picker-day-button', { 
	      'mui-is-current-date': DateTime.isEqualDate(this.props.date, new Date()),
	      'mui-is-selected': this.props.selected
	    });

	    return this.props.date ? (
	      React.createElement(EnhancedButton, React.__spread({},  other, 
	        {className: classes, 
	        disableFocusRipple: true, 
	        disableTouchRipple: true, 
	        onTouchTap: this._handleTouchTap}), 
	        React.createElement("div", {className: "mui-date-picker-day-button-select"}), 
	        React.createElement("span", {className: "mui-date-picker-day-button-label"}, this.props.date.getDate())
	      )
	    ) : (
	      React.createElement("span", {className: classes})
	    );
	  },

	  _handleTouchTap: function(e) {
	    if (this.props.onTouchTap) this.props.onTouchTap(e, this.props.date);
	  }

	});

	module.exports = DayButton;

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "152c291c7e65a07a6587ab148e2fe4c6.eot"

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "3a3e4c4ddbecd6bd63e17a4057d0771c.ttf"

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "c51d32dd8aa851634aa8f7f4d1e0e819.woff"

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "ac3c50e4cfa03a5a48b39821746107a2.svg"

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "6f8b5973955f651b0eedfd42b0b804d0.png"

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "5ad3f15b23627d69cf9c15f7bb58f373.png"

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "a55c5d1acd80a8279375a36ef6e4b506.png"

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(227);
	var warning = __webpack_require__(215);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(145);

	var createArrayFromMixed = __webpack_require__(431);
	var getMarkupWrap = __webpack_require__(428);
	var invariant = __webpack_require__(107);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(145);

	var invariant = __webpack_require__(107);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Scroller
	 * http://github.com/zynga/scroller
	 *
	 * Copyright 2011, Zynga Inc.
	 * Licensed under the MIT License.
	 * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
	 *
	 * Based on the work of: Unify Project (unify-project.org)
	 * http://unify-project.org
	 * Copyright 2011, Deutsche Telekom AG
	 * License: MIT + Apache (V2)
	 */

	/**
	 * Generic animation class with support for dropped frames both optional easing and duration.
	 *
	 * Optional duration is useful when the lifetime is defined by another condition than time
	 * e.g. speed of an animating object, etc.
	 *
	 * Dropped frame logic allows to keep using the same updater logic independent from the actual
	 * rendering. This eases a lot of cases where it might be pretty complex to break down a state
	 * based on the pure time difference.
	 */
	(function(global) {
		var time = Date.now || function() {
			return +new Date();
		};
		var desiredFrames = 60;
		var millisecondsPerSecond = 1000;
		var running = {};
		var counter = 1;

		// Create namespaces
		var core = {
			effect: {}
		};

		core.effect.Animate = {

			/**
			 * A requestAnimationFrame wrapper / polyfill.
			 *
			 * @param callback {Function} The callback to be invoked before the next repaint.
			 * @param root {HTMLElement} The root element for the repaint
			 */
			requestAnimationFrame: (function() {

				// Check for request animation Frame support
				var requestFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame;
				var isNative = !!requestFrame;

				if (requestFrame && !/requestAnimationFrame\(\)\s*\{\s*\[native code\]\s*\}/i.test(requestFrame.toString())) {
					isNative = false;
				}

				if (isNative) {
					return function(callback, root) {
						requestFrame(callback, root)
					};
				}

				var TARGET_FPS = 60;
				var requests = {};
				var requestCount = 0;
				var rafHandle = 1;
				var intervalHandle = null;
				var lastActive = +new Date();

				return function(callback, root) {
					var callbackHandle = rafHandle++;

					// Store callback
					requests[callbackHandle] = callback;
					requestCount++;

					// Create timeout at first request
					if (intervalHandle === null) {

						intervalHandle = setInterval(function() {

							var time = +new Date();
							var currentRequests = requests;

							// Reset data structure before executing callbacks
							requests = {};
							requestCount = 0;

							for(var key in currentRequests) {
								if (currentRequests.hasOwnProperty(key)) {
									currentRequests[key](time);
									lastActive = time;
								}
							}

							// Disable the timeout when nothing happens for a certain
							// period of time
							if (time - lastActive > 2500) {
								clearInterval(intervalHandle);
								intervalHandle = null;
							}

						}, 1000 / TARGET_FPS);
					}

					return callbackHandle;
				};

			})(),


			/**
			 * Stops the given animation.
			 *
			 * @param id {Integer} Unique animation ID
			 * @return {Boolean} Whether the animation was stopped (aka, was running before)
			 */
			stop: function(id) {
				var cleared = running[id] != null;
				if (cleared) {
					running[id] = null;
				}

				return cleared;
			},


			/**
			 * Whether the given animation is still running.
			 *
			 * @param id {Integer} Unique animation ID
			 * @return {Boolean} Whether the animation is still running
			 */
			isRunning: function(id) {
				return running[id] != null;
			},


			/**
			 * Start the animation.
			 *
			 * @param stepCallback {Function} Pointer to function which is executed on every step.
			 *   Signature of the method should be `function(percent, now, virtual) { return continueWithAnimation; }`
			 * @param verifyCallback {Function} Executed before every animation step.
			 *   Signature of the method should be `function() { return continueWithAnimation; }`
			 * @param completedCallback {Function}
			 *   Signature of the method should be `function(droppedFrames, finishedAnimation) {}`
			 * @param duration {Integer} Milliseconds to run the animation
			 * @param easingMethod {Function} Pointer to easing function
			 *   Signature of the method should be `function(percent) { return modifiedValue; }`
			 * @param root {Element ? document.body} Render root, when available. Used for internal
			 *   usage of requestAnimationFrame.
			 * @return {Integer} Identifier of animation. Can be used to stop it any time.
			 */
			start: function(stepCallback, verifyCallback, completedCallback, duration, easingMethod, root) {

				var start = time();
				var lastFrame = start;
				var percent = 0;
				var dropCounter = 0;
				var id = counter++;

				if (!root) {
					root = document.body;
				}

				// Compacting running db automatically every few new animations
				if (id % 20 === 0) {
					var newRunning = {};
					for (var usedId in running) {
						newRunning[usedId] = true;
					}
					running = newRunning;
				}

				// This is the internal step method which is called every few milliseconds
				var step = function(virtual) {

					// Normalize virtual value
					var render = virtual !== true;

					// Get current time
					var now = time();

					// Verification is executed before next animation step
					if (!running[id] || (verifyCallback && !verifyCallback(id))) {

						running[id] = null;
						completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, false);
						return;

					}

					// For the current rendering to apply let's update omitted steps in memory.
					// This is important to bring internal state variables up-to-date with progress in time.
					if (render) {

						var droppedFrames = Math.round((now - lastFrame) / (millisecondsPerSecond / desiredFrames)) - 1;
						for (var j = 0; j < Math.min(droppedFrames, 4); j++) {
							step(true);
							dropCounter++;
						}

					}

					// Compute percent value
					if (duration) {
						percent = (now - start) / duration;
						if (percent > 1) {
							percent = 1;
						}
					}

					// Execute step callback, then...
					var value = easingMethod ? easingMethod(percent) : percent;
					if ((stepCallback(value, now, render) === false || percent === 1) && render) {
						running[id] = null;
						completedCallback && completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, percent === 1 || duration == null);
					} else if (render) {
						lastFrame = now;
						core.effect.Animate.requestAnimationFrame(step, root);
					}
				};

				// Mark as running
				running[id] = true;

				// Init first step
				core.effect.Animate.requestAnimationFrame(step, root);

				// Return unique animation ID
				return id;
			}
		};

		module.exports = core;

	})(typeof window !== 'undefined' ? window : this);



/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(432);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(107);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)))

/***/ }
/******/ ]);